{"version":3,"sources":["GPDScreens/NavbarGPD.js","GPDScreens/ManageStudentsGPD.js","GPDScreens/EditStudentGPD.js","LoginScreens/LoginScreen.js","GPDScreens/EnrollmentTrendsGPD.js","StudentScreens/NavbarStudent.js","StudentScreens/StudentInfo.js","GPDScreens/UploadFileGPD.js","GPDScreens/SuggestCoursePlanGPD.js","App.js","index.js"],"names":["NavbarGPD","props","state","currentClicked","alignLinks","brand","className","href","extendWith","class","target","options","edge","preventScrolling","to","Component","ManageStudentsGPD","onClickSearchCallback","a","values","query","split","length","filter","item","path","console","log","axios","get","catch","err","res","setState","students","data","onClickAdvanceSearch","firstFilter","searchByFirsName","searchByFirstName_input","trim","searchByLastName","searchByLastName_input","searchByDepartment","searchByDepartment_input","searchByEmail","searchByEmail_input","searchByTrack","searchByTrack_input","searchByStudentID","searchByStudentID_input","onChangeSearchQuery","event","value","onChange","id","addStudentCallback","body","firstName","lastName","email","password","department","entrySemester","track","graduation_semester","graduation_year","header","headers","post","error","loadStudents","deleteStudentCallback","editStudent","student","sbuID","then","comments","currentEditStudent","refresh","this","pathname","offset","l","icon","label","onClick","actions","flat","modal","node","trigger","waves","type","checked","e","data-field","map","bind","User","size","EditStudentGPD","onChangeName","nameStr","confirmEdit","userID","studentID","major","confirmAddComment","newComments","currentComment","push","message","comment","getDegreeRequirements","degrees","degreeData","i","tempDegree","replace","json","rerender","onChangeComment","index","currentCommentIndex","onDeleteComment","splice","confirmSuggestPlan","suggestPlan","componentDidMount","checkCompletedCourse","course","courseStrArr","courseStrSpace","courseNum","parseInt","grade","checkCourseInProgress","arr","j","courseStr","currentStudent","location","coursePlan","expectedGraduation","dropdown","arrCourses","tempCoursePlan","Object","keys","forEach","key","key2","key3","requirements","tracks","comp","courses","disabled","indeterminate","final_recommendation","name","op","bio","stats","quan","seminar","general","project","imaging","elective","clinical","translational","thesis","registration","credit","gpa","breadth","description","theory","systems","information","basic","advanced","no_thesis","hardware","networking","cad","description_2","lecture","other","align","placeholder","credits","semester","year","LoginScreen","handleChangeEmail","handleChangePassword","loginCallback","hasOwnProperty","jwt_decode","token","isStudent","redirectStudent","isLogin","loginError","redirectURL","user_data","response","second_render","EnrollmentTrendsGPD","onChangeSemester","tempSem","semes","selectedSemesters","selectedSemData","loadOptions","onChangeDepartment","selectedDepartment","onChangeCourses","tempCNs","str","substring","selectedCourses","tempCourseHolder","updateGraph","dept","temp","allcrsinfo","courseData","master","tempLegend","tempGraphData","crs","courseNumber","strtemp","val","fs","yr","tempnum","totalStudents","x","y","graphData","graphLegend","formData","append","selectedCourseData","Array","from","strArray","num","tempOptionsArray","alreadySeen","courseOptions","departmentOptions","semesterOptions","startSem","endSem","items","isMulti","isDisabled","text","textAnchor","domain","dependentAxis","title","centerTitle","orientation","gutter","style","border","stroke","fontSize","colorScale","NavbarStudent","StudentInfo","findStudent","people","user","UploadFileGPD","onSubmitCourseOfferings","files","onSubmitDegreeRequirements","onSubmitCourseInformation","selectedSemester","onSubmitStudentData","onSubmitStudentGrades","onSubmit","upload_type","selected","onDrop","maxFileSize","SuggestCoursePlanGPD","getGrades","searchCoursesAMS","grades","required_courses","elective_credits","finished_courses","temp_elective_credits","charAt","temp_courses","found_course","k","course_num","duplicate","searchCoursesBMI","searchCoursesCSE","elective_creditd","searchCoursesESE","getRemainingCourses","elective_creds","getCreditsRemainingCourses","remainingCourses","onClickSuggestPlan","requirementsBody","remainingElectiveCredits","getPreferredCourses","getAvoidedCourses","suggestCoursePlan","getAllCourses","courseNames","toString","sort","allCourses","preferredCourses","avoidedCourses","totalRemainingCredits","editElectiveCredits","remainingSemesters","loopNextSem","currentSemester","maxCredits","semCourses","loopSemCredits","constraintViolated","electiveCourse","initSplit","days","daysSplit","timesSplit","mondayTimeBegin","mondayTimeEnd","tuesdayTimeBegin","tuesdayTimeEnd","wednesdayTimeBegin","wednesdayTimeEnd","thursdayTimeBegin","thursdayTimeEnd","fridayTimeBegin","fridayTimeEnd","courseOfferedSemester","degreeReqFound","remainLoop","remainingCoursesSplit","splitLoop","nonPreferredCourses","step","min","max","color","centered","App","callBackendAPI","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.01af11f8.chunk.js","sourcesContent":["import React, { Component} from 'react'\nimport {Navbar, NavItem} from 'react-materialize'\nimport '../style.css'\nimport {Link} from 'react-router-dom'\n\nclass NavbarGPD extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            currentClicked: null\n        };\n    }\n\n    render(){\n        return(\n            <Navbar\n            alignLinks=\"right\"\n            brand={<a className=\"brand-logo\" href=\"/\">MAST</a>}\n            className = \"blue\"\n            extendWith={<ul className=\"tabs tabs-transparent\">\n                <li class=\"tab white-text\"><a target=\"_self\" href=\"/manage_students_gpd\">Manage Students</a></li>\n                <li class=\"tab white-text\"><a target=\"_self\" href=\"/upload_file_gpd\">Upload File</a></li>\n                <li class=\"tab white-text\"><a target=\"_self\" href=\"/enrollment_trends_gpd\">View Enrollment Trends</a></li></ul>}\n            options={{edge: 'left', preventScrolling: true}}>\n            <Link to=\"/\"><NavItem>Logout</NavItem></Link>\n            </Navbar>\n        )\n    }\n\n}\n\nexport default NavbarGPD","import React, { Component} from 'react'\nimport NavbarGPD from './NavbarGPD'\nimport { Row, Col, TextInput, Button, Table, Modal} from 'react-materialize'\nimport axios from 'axios'\nimport { Redirect } from 'react-router-dom'\n\nclass ManageStudentsGPD extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            firstName: \"\",\n            lastName: \"\",\n            email: \"\",\n            password: \"\",\n            department: \"\",\n            entrySemester: \"\",\n            track: \"\",\n            students: [],\n            comments: [],\n            query: \"\",\n            graduation_semester: \"\",\n            graduation_year: \"\",\n            editStudent: false,\n            currentEditStudent: null,\n            refresh: false,\n            searchByFirsName: false,\n            searchByLastName: false,\n            searchByStudentID: false,\n            searchByDepartment: false,\n            searchByEmail: false,\n            searchByTrack: false,\n            searchByStudentID_input: \"\",\n            searchByFirstName_input: \"\",\n            searchByLastName_input: \"\",\n            searchByDepartment_input: \"\",\n            searchByEmail_input: \"\",\n            searchByTrack_input: \"\"\n        }\n    }\n\n    onClickSearchCallback = async () => {\n\n        let values = this.state.query.split(\" \")\n\n        if (this.state.query.length === 0) return \n\n        if(values.length > 2) {\n            values = values.filter((item) => item.length > 0)\n        }\n\n        if(values.length > 2) return\n        \n\n        let path = values.length === 1 ?  \"/api/students/search?firstName=\" + values[0] : \"/api/students/search?firstName=\" + values[0] + \"&lastName=\" + values[1]\n        console.log(\"path is:::\", path)\n        let res = await axios.get(path).catch((err) => console.log('caught', err));\n        \n        this.setState({students: res.data})\n    }\n\n    onClickAdvanceSearch = async () => {\n        \n        let path = \"/api/students/search?\"\n        let firstFilter = true\n\n        if (this.state.searchByFirsName) {\n            path = path + \"firstName=\" + this.state.searchByFirstName_input.trim()\n            firstFilter = false\n        }\n\n        if (this.state.searchByLastName) {\n            path =  firstFilter ? (path + \"lastName=\" + this.state.searchByLastName_input.trim()) : (path + \"&lastName=\" + this.state.searchByLastName_input.trim())\n            firstFilter = false\n        }\n\n        if (this.state.searchByDepartment) {\n            path =  firstFilter ? (path + \"department=\" + this.state.searchByDepartment_input.trim()) : (path + \"&department=\" + this.state.searchByDepartment_input.trim())\n            firstFilter = false\n        }\n\n        if (this.state.searchByEmail) {\n            path =  firstFilter ? (path + \"email=\" + this.state.searchByEmail_input.trim()) : (path + \"&email=\" + this.state.searchByEmail_input.trim())\n            firstFilter = false\n        }\n\n        if (this.state.searchByTrack) {\n            path =  firstFilter ? (path + \"track=\" + this.state.searchByTrack_input.trim()) : (path + \"&track=\" + this.state.searchByTrack_input.trim())\n            firstFilter = false\n        }\n\n        if (this.state.searchByStudentID) {\n            path =  firstFilter ? (path + \"sbuID=\" + this.state.searchByStudentID_input.trim()) : (path + \"&sbuID=\" + this.state.searchByStudentID_input.trim())\n            firstFilter = false\n        }\n\n\n        let res = await axios.get(path).catch((err) => console.log('caught', err));\n        this.setState({students: res.data})\n\n    }\n\n    onChangeSearchQuery = (event) => {\n\n        this.setState({query: event.target.value})\n\n    }\n\n    onChange = (event) => {\n        this.setState({[event.target.id]: event.target.value});\n    }\n\n    addStudentCallback = async () => {\n        let body = {firstName: this.state.firstName, lastName: this.state.lastName, email: this.state.email, password: this.state.password, department: this.state.department, entrySemester: this.state.entrySemester, track: this.state.track, graduation_semester: this.state.graduation_semester, graduation_year: this.state.graduation_year};\n        let header = {\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          };    \n        await axios.post(\"/api/add_student/\", body, header).catch((error) => console.log(error));\n        this.loadStudents()\n    }\n\n    deleteStudentCallback = () => {\n        let body = []\n        axios.post(\"/api/students/delete_all\", body).catch((error) => console.log(error));\n        this.setState({students: []});\n    }\n\n    editStudent = async (student) => {\n        let body = {id: student.sbuID};\n        console.log(body);\n        await axios.post('/api/comments', body).then((res) => this.setState({comments: res.data, currentEditStudent: student, editStudent: true})).catch((err) => console.log(err));\n        console.log(this.state.comments);\n    }\n\n    loadStudents = async () => {\n        var students = await axios.get('/api/students').catch((err) => console.log('caught', err));\n        console.log(students.data)\n        this.setState({students: students.data})\n    }\n\n    async componentDidMount() {\n        this.loadStudents()\n    }\n\n    render(){\n        return(\n            this.state.editStudent ? <Redirect to={{pathname: \"edit_student_gpd\", state: {currentEditStudent: this.state.currentEditStudent, comments: this.state.comments}}}></Redirect> : \n            <div>\n                <NavbarGPD />\n                <div className=\"body\">\n                <Row>\n                    <Col\n                    offset=\"l10\"\n                    l={3}>\n                        <TextInput onChange={this.onChangeSearchQuery}\n                        icon=\"search\"\n                        label=\"Search\">\n                        </TextInput>\n                    </Col>\n                </Row>\n                <Row>\n                <Col offset=\"l10\"\n                    l={2}\n                    >\n                        <Button label=\"Search\" onClick={this.onClickSearchCallback}>Search</Button>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col\n                    offset=\"l10\"\n                    l={2}>\n                        <Modal\n                        actions={[<Button flat modal=\"close\" node=\"button\">Close</Button>]}\n                        header=\"Advance Search\"\n                        trigger={<Button node=\"button\" waves=\"light\"> Advanced Search </Button>}>\n                            <br></br>\n                            <label>\n                                <input type=\"checkbox\" class=\"filled-in\" checked={this.state.searchByFirsName} onChange={() => this.setState({searchByFirsName: !this.state.searchByFirsName})}/>\n                                <span>First-name</span>\n                            </label>\n                            <TextInput className=\"white\" id=\"search_firstName_input\" onChange={(e) => this.setState({searchByFirstName_input: e.target.value})}></TextInput>\n\n                            <label>\n                                <input type=\"checkbox\" class=\"filled-in\" checked={this.state.searchByLastName} onChange={() => this.setState({searchByLastName: !this.state.searchByLastName})}/>\n                                <span>Last name</span>\n                            </label>\n                            <TextInput className=\"white\" id=\"search_lastName_input\" onChange={(e) => this.setState({searchByLastName_input: e.target.value})}></TextInput>\n\n                            <label>\n                                <input type=\"checkbox\" class=\"filled-in\" checked={this.state.searchByStudentID} onChange={() => this.setState({searchByStudentID: !this.state.searchByStudentID})}/>\n                                <span>Student ID</span>\n                            </label>\n                            <TextInput className=\"white\" id=\"search_studentID_input\" onChange={(e) => this.setState({searchByStudentID_input: e.target.value})}></TextInput>\n\n\n                            <label>\n                                <input type=\"checkbox\" class=\"filled-in\" checked={this.state.searchByDepartment} onChange={() => this.setState({searchByDepartment: !this.state.searchByDepartment})}/>\n                                <span>Department</span>\n                            </label>\n                            <TextInput className=\"white\" id=\"search_department_input\" onChange={(e) => this.setState({searchByDepartment_input: e.target.value})} ></TextInput>\n\n                            <label>\n                                <input type=\"checkbox\" class=\"filled-in\" checked={this.state.searchByEmail} onChange={() => this.setState({searchByEmail: !this.state.searchByEmail})}/>\n                                <span>Email</span>\n                            </label>\n                            <TextInput className=\"white\" id=\"search_email_input\" onChange={(e) => this.setState({searchByEmail_input: e.target.value})}></TextInput>\n\n                            <label>\n                                <input type=\"checkbox\" class=\"filled-in\" checked={this.state.searchByTrack} onChange={() => this.setState({searchByTrack: !this.state.searchByTrack})}/>\n                                <span>Track</span>\n                            </label>\n                            <TextInput className=\"white\" id=\"search_track_input\" onChange={(e) => this.setState({searchByTrack_input: e.target.value})}></TextInput>\n\n                            <Button type=\"search\" modal=\"close\" onClick={this.onClickAdvanceSearch}>Submit</Button>\n                        </Modal>\n                        \n                    </Col>\n                </Row>\n                <Table>\n                    <thead>\n                        <tr>\n                            <th data-field=\"Name\">Name</th>\n                            <th data-field=\"Id\">ID</th>\n                            <th data-field=\"Email\">Email</th>\n                            <th data-field=\"Department\">Department</th>\n                            <th data-field=\"Track\">Track</th>\n                            <th data-field=\"Entry Semester\">Entry Semester</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.students.map((student) => (\n                                <tr onClick={this.editStudent.bind(this, student)}>\n                                    <th data-field=\"Name\">{student.User.firstName + \" \" + student.User.lastName}</th>\n                                    <th data-field=\"Id\">{student.sbuID}</th>\n                                    <th data-field=\"Email\">{student.User.email}</th>\n                                    <th data-field=\"Department\">{student.department}</th>\n                                    <th data-field=\"Track\">{student.track}</th>\n                                    <th data-field=\"Entry Semester\">{student.entrySemester}</th>\n                                </tr>\n                            ))\n                        }\n                    </tbody>\n                </Table>\n                <br></br>\n                <Row>\n                    <Col\n                    offset=\"l9\"\n                    size={1}>\n                        <Modal\n                        actions={[<Button flat modal=\"close\" node=\"button\">Close</Button>]}\n                        header=\"Add Student\"\n                        trigger={<Button>Add Student</Button>}>\n                            <br></br>\n                            <span>First Name:</span>\n                            <TextInput className=\"white\" id=\"firstName\" onChange={this.onChange}></TextInput>\n                            <span>Last Name:</span>\n                            <TextInput className=\"white\" id=\"lastName\" onChange={this.onChange}></TextInput>\n                            <span>Email:</span>\n                            <TextInput className=\"white\" id=\"email\" onChange={this.onChange}></TextInput>\n                            <span>Password:</span>\n                            <TextInput className=\"white\" id=\"password\" onChange={this.onChange}></TextInput>\n                            <span>Department:</span>\n                            <TextInput className=\"white\" id=\"department\" onChange={this.onChange}></TextInput>\n                            <span>Entry Semester:</span>\n                            <TextInput className=\"white\" id=\"entrySemester\" onChange={this.onChange}></TextInput>\n                            <span>Track:</span>\n                            <TextInput className=\"white\" id=\"track\" onChange={this.onChange}></TextInput>\n                            <span>Graduation Semester:</span>\n                            <TextInput className=\"white\" id=\"graduation_semester\" onChange={this.onChange}></TextInput>\n                            <span>Graduation Year:</span>\n                            <TextInput className=\"white\" id=\"graduation_year\" onChange={this.onChange}></TextInput>\n                            <Button type=\"submit\" modal=\"close\" onClick={this.addStudentCallback}>Submit</Button>\n                        </Modal>\n                    </Col>\n                    <Col\n                    size={1}>\n                        <Button onClick={this.deleteStudentCallback}>Delete All</Button>\n                    </Col>\n                </Row>\n                </div>\n            </div>\n            \n        );\n    }\n}\n\nexport default ManageStudentsGPD","import React, { Component} from 'react'\nimport { Card, Row, Col, Navbar, TextInput, Button, Collapsible, CollapsibleItem, Table } from 'react-materialize'\nimport {Link, Redirect} from 'react-router-dom'\nimport axios from 'axios'\nimport { Checkbox } from 'react-materialize';\n\nclass EditStudentGPD extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            currentStudent: this.props.location.state.currentEditStudent,\n            userID: this.props.location.state.currentEditStudent.User.id,\n            studentID: this.props.location.state.currentEditStudent.id,\n            firstName: this.props.location.state.currentEditStudent.User.firstName,\n            lastName: this.props.location.state.currentEditStudent.User.lastName,\n            email: this.props.location.state.currentEditStudent.User.email,\n            major: this.props.location.state.currentEditStudent.department,\n            entrySemester: this.props.location.state.currentEditStudent.entrySemester,\n            track: this.props.location.state.currentEditStudent.track,\n            sbuID: this.props.location.state.currentEditStudent.sbuID,\n            coursePlan: {\n                \"studentID\": 1,\n                \"semesters\": {\n                    \"F17\": {\n                        \"0\": {\n                            \"department\": \"AMS\",\n                            \"courseNum\": \"501\",\n                            \"credits\": 3,\n                            \"semester\": \"Fall\",\n                            \"year\": \"2017\",\n                            \"grade\": \"B\"\n                        },\n                        \"1\": {\n                            \"department\": \"CSE\",\n                            \"courseNum\": \"503\",\n                            \"credits\": 3,\n                            \"semester\": \"Fall\",\n                            \"year\": \"2017\",\n                            \"grade\": \"A\"\n                        }\n                    },\n                    \"S17\": {\n                        \"0\": {\n                            \"department\": \"CSE\",\n                            \"courseNum\": \"504\",\n                            \"credits\": 3,\n                            \"semester\": \"Spring\",\n                            \"year\": \"2017\",\n                            \"grade\": \"C\"\n                        },\n                        \"1\": {\n                            \"department\": \"CSE\",\n                            \"courseNum\": \"505\",\n                            \"credits\": 3,\n                            \"semester\": \"Spring\",\n                            \"year\": \"2017\",\n                            \"grade\": \"D\"\n                        }\n                    }\n                }\n            },\n            expectedGraduation: \"\",\n            degreeData: [],\n            comments: this.props.location.state.comments,\n            rerender: false,\n            currentComment: \"\",\n            suggestPlan: false,\n            currentCommentIndex: 0\n        };\n    }\n\n    onChange = (event) => {\n        this.setState({[event.target.id]: event.target.value});\n    }\n\n    onChangeName = (event) => {\n        let nameStr = event.target.value.split(\" \");\n        this.setState({firstName: nameStr[0], lastName: nameStr[1]});\n    }\n\n    //Is called when the confirm button in the edit student information section is pressed\n    confirmEdit = async () => {\n        let body = {userID: this.state.userID, studentID: this.state.studentID, firstName: this.state.firstName, lastName: this.state.lastName, email: this.state.email, sbuID: this.state.sbuID, major: this.state.major, entrySemester: this.state.entrySemester, track: this.state.track};        \n        console.log(body)\n        let header = {\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          };    \n        axios.post(\"/api/edit_student\", body, header).catch((error) => console.log(error));\n\n        await axios.get('/api/students').catch((err) => console.log('caught', err));\n    }\n\n    confirmAddComment = async () => {\n        let newComments = this.state.comments\n        console.log(this.state.currentComment);\n        newComments.push({message: this.state.currentComment});\n        console.log(newComments);\n        let body = {sbuID: this.state.sbuID, comment: this.state.currentComment};\n        let header = {\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          }; \n        await axios.post(\"/api/comments/add_comment\", body, header).then(this.setState({comments: newComments})).catch((err) => console.log(err));\n    }\n\n    getDegreeRequirements = async () => {\n        let degrees = await axios.get('/api/degrees').catch((err) => console.log('caught', err));\n        let degreeData = degrees.data\n        for(let i = 0; i < degreeData.length; i++){\n            let tempDegree = degreeData[i];\n            console.log(tempDegree);\n            if(this.state.major.replace(/ /g,'') === tempDegree.department){\n                console.log(this.state.degreeData)\n                this.setState({\n                    degreeData: degreeData[i].json,\n                    rerender: true\n                });\n                console.log(this.state.degreeData)\n                break;\n            }\n        }\n    }\n\n    onChangeComment = async (index) => { \n        console.log(this.state.currentCommentIndex)\n        this.setState({\n            currentCommentIndex: index\n        });\n        \n    }\n\n    onDeleteComment = async () => {\n        let body = {sbuID: this.state.sbuID, currentComment: this.state.comments[this.state.currentCommentIndex]}\n        let header = {\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          }; \n        let comments = this.state.comments\n        comments.splice(this.state.currentCommentIndex, 1);\n        await axios.post(\"/api/comments/delete_comment\", body, header).then(this.setState({comments: comments})).catch((err) => console.log('caught', err));\n    }\n\n    confirmSuggestPlan = async () => {\n        this.setState({\n            suggestPlan: true\n        });\n    }\n    componentDidMount = () => {\n        this.getDegreeRequirements();\n    }\n\n    checkCompletedCourse = async (course) => {\n        let header = {\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          }; \n        let courseStrArr = course.split(\"/\")\n        console.log(courseStrArr);\n        console.log(\"Haha\");\n        for(let i = 0; i < courseStrArr.length; i++){\n            let courseStrSpace = courseStrArr[i].split(\" \");\n            let courseNum = parseInt(courseStrSpace[1]);\n            let department = courseStrSpace[0]\n            let body = {department: department, courseNum: courseNum, studentID: this.state.studentID}\n            console.log(body)\n            let res = await axios.post(\"/api/courses/checkcompleted\", body, header).catch((err) => console.log('caught error'));\n            let grade = res.data\n            if(grade != \"\"){\n                if(grade[0].grade[0] == \"A\" || grade[0].grade[0] == \"B\") {\n                    return true;\n                }\n                else if(grade[0].grade[0] == \"C\"){\n                    if(grade[0].grade.length > 1){\n                        if(grade[0].grade[1] != \"-\"){\n                            return true;\n                        }\n                    }\n                    else{\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    checkCourseInProgress  = (arr, course) => {\n        console.log(\"Yes\")\n        let courseStrArr = course.split(\"/\")\n        for(let i = 0; i < courseStrArr.length; i++){\n            for(let j = 0; j < arr.length; j++){\n                let courseStr = arr[j].department + \" \" + arr[j].courseNum;\n                if(courseStrArr[i] == courseStr){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    render(){\n        let dropdown;\n        var arrCourses = [];\n        let tempCoursePlan = this.state.coursePlan\n        Object.keys(tempCoursePlan).forEach(function (key){\n            Object.keys(tempCoursePlan[key]).forEach(function (key2){\n                    Object.keys(tempCoursePlan[key][key2]).forEach(function (key3){\n                        arrCourses.push(tempCoursePlan[key][key2][key3])\n                    }) \n            })\n        });\n        console.log(arrCourses);\n        if (this.state.major.replace(/ /g,'') === \"AMS\" && this.state.rerender) {\n            if(this.state.track === \"Computational Applied Mathematics\"){\n                dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.tracks.comp.courses.map(course => {\n                            if(this.checkCompletedCourse(course) == true){\n                                return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else if(this.checkCourseInProgress(arrCourses, course) == true){\n                                return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else{\n                                return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                        })}\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.final_recommendation.name}></CollapsibleItem>\n                    </Collapsible>\n                </div>;\n            }\n            else if(this.state.track === \"Operations Research\"){\n                dropdown = <div>\n                <Collapsible class=\"disabled\">\n                    {this.state.degreeData.requirements.tracks.op.courses.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.final_recommendation.name}></CollapsibleItem>\n                </Collapsible>\n                </div>;\n            }\n            else if(this.state.track === \"Computational Biology\"){\n                dropdown = <div>\n                <Collapsible class=\"disabled\">\n                    {this.state.degreeData.requirements.tracks.bio.courses.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.final_recommendation.name}></CollapsibleItem>\n                </Collapsible>\n                </div>;\n            }\n            else if(this.state.track === \"Statistics\"){\n                dropdown = <div>\n                <Collapsible class=\"disabled\">\n                    {this.state.degreeData.requirements.tracks.stats.courses.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.final_recommendation.name}></CollapsibleItem>\n                </Collapsible>\n                </div>;\n            }\n            else if(this.state.track === \"Quanitative Finance\"){\n                dropdown = <div>\n                <Collapsible class=\"disabled\">\n                    {this.state.degreeData.requirements.tracks.quan.courses.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.final_recommendation.name}></CollapsibleItem>\n                </Collapsible>\n                </div>;\n            }\n        }\n        else if (this.state.major.replace(/ /g,'') === \"BMI\" && this.state.rerender){\n            if(this.state.track === \"Project/Imaging Informatics\"){\n                dropdown = <div>\n                <Collapsible class=\"disabled\">\n                    {this.state.degreeData.requirements.seminar.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.general.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.project.imaging.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.project.elective.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                </Collapsible>\n                </div>;\n            }\n            else if(this.state.track === \"Project/Clinical Informatics\"){\n                dropdown = <div>\n                <Collapsible class=\"disabled\">\n                    {this.state.degreeData.requirements.seminar.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.general.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.project.clinical.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.project.elective.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                </Collapsible>\n                </div>;\n            }\n            else if(this.state.track === \"Project/Translational Bio-Informatics\"){\n                dropdown = <div>\n                <Collapsible class=\"disabled\">\n                    {this.state.degreeData.requirements.seminar.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.general.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.project.translational.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.project.elective.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                </Collapsible>\n                </div>;\n            }\n            else if(this.state.track === \"Thesis/Clinical Informatics\"){\n                dropdown = <div>\n                <Collapsible class=\"disabled\">\n                    {this.state.degreeData.requirements.seminar.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.general.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.thesis.clinical.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.thesis.elective.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                </Collapsible>\n                </div>;\n            }\n            else if(this.state.track === \"Thesis/Translational Bio-Informatics\"){\n                dropdown = <div>\n                <Collapsible class=\"disabled\">\n                    {this.state.degreeData.requirements.seminar.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.general.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.thesis.translational.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.thesis.elective.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                </Collapsible>\n                </div>;\n            }\n            else if(this.state.track === \"Thesis/Imaging Informatics\"){\n                dropdown = <div>\n                <Collapsible class=\"disabled\">\n                    {this.state.degreeData.requirements.seminar.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.general.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.thesis.imaging.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.thesis.elective.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                </Collapsible>\n                </div>;\n            }\n        }\n        else if(this.state.major.replace(/ /g,'') === \"CSE\" && this.state.rerender){\n            if(this.state.track === \"Basic Project\"){\n                dropdown = <div>\n                <Collapsible class=\"disabled\">\n                    <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.registration}></CollapsibleItem>\n                    <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.credit}></CollapsibleItem>\n                    <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.gpa}></CollapsibleItem>\n                    <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.breadth.description}></CollapsibleItem>\n                    {this.state.degreeData.requirements.breadth.theory.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.breadth.systems.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.breadth.information.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.course.basic.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                </Collapsible>\n                </div>;\n            }\n            else if(this.state.track === \"Advanced Project\"){\n                dropdown = <div>\n                <Collapsible class=\"disabled\">\n                    <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.registration}></CollapsibleItem>\n                    <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.credit}></CollapsibleItem>\n                    <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.gpa}></CollapsibleItem>\n                    <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.breadth.description}></CollapsibleItem>\n                    {this.state.degreeData.requirements.breadth.theory.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.breadth.systems.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.breadth.information.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.course.advanced.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                </Collapsible>\n                </div>;\n            }\n            else if(this.state.track === \"Thesis\"){\n                dropdown = <div>\n                <Collapsible class=\"disabled\">\n                    <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.registration}></CollapsibleItem>\n                    <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.credit}></CollapsibleItem>\n                    <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.gpa}></CollapsibleItem>\n                    <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.breadth.description}></CollapsibleItem>\n                    {this.state.degreeData.requirements.breadth.theory.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.breadth.systems.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.breadth.information.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.course.thesis.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                </Collapsible>\n                </div>;\n            }\n        }\n        else if(this.state.major.replace(/ /g,'') === \"CE\" && this.state.rerender){\n            if(this.state.track === \"Non-Thesis\"){\n                dropdown = <div>\n                <Collapsible class=\"disabled\">\n                {this.state.degreeData.requirements.credit.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.no_thesis.description}></CollapsibleItem>\n                    {this.state.degreeData.requirements.no_thesis.hardware.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.no_thesis.networking.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.no_thesis.cad.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.no_thesis.description_2}></CollapsibleItem>\n                    {this.state.degreeData.requirements.no_thesis.theory.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.no_thesis.lecture}></CollapsibleItem>\n                    <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.no_thesis.other}></CollapsibleItem>\n                </Collapsible>\n                </div>;\n            }\n            else if(this.state.track === \"Thesis\"){\n                dropdown = <div>\n                <Collapsible class=\"disabled\">\n                    <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.credit}></CollapsibleItem>\n                    <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.no_thesis.description}></CollapsibleItem>\n                    {this.state.degreeData.requirements.no_thesis.hardware.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.no_thesis.networking.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    {this.state.degreeData.requirements.no_thesis.cad.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.no_thesis.description_2}></CollapsibleItem>\n                    {this.state.degreeData.requirements.no_thesis.theory.map((course) => (\n                        <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                    ))}\n                    <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.no_thesis.lecture}></CollapsibleItem>\n                    <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.no_thesis.other}></CollapsibleItem>\n                    <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.no_thesis.thesis}></CollapsibleItem>\n                </Collapsible>\n                </div>;\n            }\n        }\n        return(\n            this.state.suggestPlan ? <Redirect to={{pathname: \"suggest_course_plan_gpd\", state: {currentEditStudent: this.state.currentStudent}}}></Redirect> :\n            <div align=\"left\">\n                <Navbar className=\"blue\"></Navbar>\n                <br></br>\n                <Row>\n                    <Col l={6}>\n                        <b>Edit Student: {this.state.firstName + \" \" + this.state.lastName}</b>\n                    </Col>\n                    <Col l={6}>\n                        <b>View/Edit Comments</b>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col l={6}>\n                        <Card className=\"blue-grey\">\n                            <Row>\n                                <Col l={6}>\n                                    <span align=\"left\" class=\"white-text\">Full Name:</span>\n                                </Col>\n                                <Col l={6}>\n                                    <span class=\"white-text\">Major:</span>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col l={6}>\n                                    <TextInput class=\"white\" onChange={this.onChangeName} value={this.state.firstName + \" \" + this.state.lastName} id =\"fullName\">\n                                    </TextInput>\n                                </Col>\n                                <Col l={6}>\n                                    <TextInput class=\"white\" onChange={this.onChange} value={this.state.major} id=\"major\">\n                                    </TextInput>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col l={6}>\n                                    <span align=\"left\" class=\"white-text\">Email:</span>\n                                </Col>\n                                <Col l={6}>\n                                    <span class=\"white-text\">Entry Semester:</span>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col l={6}>\n                                    <TextInput class=\"white\" onChange={this.onChange} value={this.state.email} id=\"email\">\n                                    </TextInput>\n                                </Col>\n                                <Col l={6}>\n                                    <TextInput class=\"white\" onChange={this.onChange} value={this.state.entrySemester} id=\"entrySemester\">\n                                    </TextInput>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col l={6}>\n                                    <span align=\"left\" class=\"white-text\">SBU ID:</span>\n                                </Col>\n                                <Col l={6}>\n                                    <span class=\"white-text\">Expected Graduation:</span>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col l={6}>\n                                    <TextInput class=\"white\" onChange={this.onChange} value={this.state.sbuID} id=\"sbuID\">\n                                    </TextInput>\n                                </Col>\n                                <Col l={6}>\n                                    <TextInput class=\"white\" onChange={this.onChange} value={this.state.expectedGraduation} id=\"expectedGraduation\"> \n                                    </TextInput>\n                                </Col>\n                            </Row>\n                            <Row>\n                            <Col l={6} offset=\"l6\">\n                                    <span align=\"left\" class=\"white-text\">Track:</span>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col l={6}>\n                                    <Button onClick={this.confirmEdit}>Confirm Changes</Button>\n                                </Col>\n                                <Col l={6}>\n                                    <TextInput class=\"white\" onChange={this.onChange} value={this.state.track} id=\"track\"> \n                                    </TextInput>\n                                </Col>\n                            </Row>\n                        </Card>\n                    </Col>\n                    <Col l=\"6\">\n                        <Card className=\"blue-grey\">\n                            <Row>\n                                <Col l={6}>\n                                    <Collapsible>\n                                        {this.state.comments.map((comment, index) =>\n                                        (<CollapsibleItem header={comment.message} onClick={this.onChangeComment.bind(this, index)}></CollapsibleItem>))}\n                                    </Collapsible>\n                                </Col>\n                                <Col><TextInput placeholder=\"Comment...\" class=\"white\" value={this.state.currentComment} onChange={this.onChange} id=\"currentComment\"></TextInput></Col>\n                            </Row>\n                            <Row>\n                                <Col l={6}>\n                                    <Button onClick={this.onDeleteComment}>Delete Comment</Button>\n                                </Col>\n                                <Col l={6}>\n                                    <Button onClick={this.confirmAddComment}>Add Comment</Button>\n                                </Col>\n                            </Row>\n                        </Card>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col l={6}>\n                        <b>Current Course Plan:</b>\n                    </Col>\n                    <Col l={6}>\n                        <b>Degree Requirements:</b>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col l={6}>\n                    <Card className=\"blue-grey\">\n                        <Row className=\"white\">\n                            <Col l={12}>\n                                <Table>\n                                    <thead>\n                                        <th>Course</th>\n                                        <th>Credits</th>\n                                        <th>Semester</th>\n                                    </thead>\n                                    <tbody>\n                                        {arrCourses.map((course) => (\n                                            <tr>\n                                                <td>{course.department + \" \" + course.courseNum}</td>\n                                                <td>{course.credits}</td>\n                                                <td>{course.semester + \" \" + course.year}</td>\n                                            </tr>\n                                        ))}\n                                    </tbody>\n                                </Table>\n                            </Col>\n                        </Row>\n                        <Button onClick={this.confirmSuggestPlan}>Suggest Course Plan</Button>\n                    </Card>\n                    </Col>\n                    <Col l={6}>\n                    <Card className=\"blue-grey\">\n                        <Row>\n                        <Col l={12}>\n                            {dropdown}\n                        </Col>\n                        </Row>\n                    </Card>\n                    </Col>    \n                </Row>\n                <br></br>\n                <Link to=\"/manage_students_gpd\">\n                    <Button>Return Home</Button>\n                </Link>\n            </div>\n            \n        );\n    }\n}\nexport default EditStudentGPD;","import axios from 'axios';\nimport React, {Component} from 'react'\nimport { Button, Card, Navbar, TextInput } from 'react-materialize'\nimport { Redirect } from 'react-router';\nimport jwt_decode from \"jwt-decode\";\n\nclass LoginScreen extends Component{\n    constructor(props){\n        super(props);\n        this.state = {user_data: this.props.data, email: \"\", password: \"\", isLogin: false, loginError: false, redirectStudent: false, redirectURL: \"/manage_students_gpd\", response: null, second_render: false}\n    }\n\n    handleChangeEmail = (event) => {\n        this.setState({email: event.target.value});\n    }\n    handleChangePassword = (event) => {\n        this.setState({password: event.target.value});\n    }\n    loginCallback = async () =>{\n        let body = {email: this.state.email, password: this.state.password};\n        let header = {\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          };  \n        await axios.post(\"/api/auth/\", body, header).then((res) =>  {\n            if(res.data.hasOwnProperty(\"token\")){\n                const payload = jwt_decode(res.data.token);\n                if(payload.isStudent === true){\n                    this.state.redirectStudent = true;\n                    this.setState({isLogin: true, loginError: false, redirectURL:\"/student_info_stu\", email: this.state.email})\n                    console.log(this.state.redirectURL)\n                }\n                else{\n                    this.setState({isLogin: true, loginError: false})\n                }\n            }\n            else{\n                this.setState({loginError: true})\n            }}).catch((error) => this.setState({loginError: true}));\n    }\n    render(){\n        return(\n            <div align=\"left\">\n                {this.state.isLogin ? <Redirect push to={{pathname: this.state.redirectURL, state: {email: this.state.email}}}></Redirect> : \n                <div>\n                <Navbar className=\"blue\" brand={<a className=\"brand-logo\" href=\"/\">MAST</a>}>   \n                </Navbar>\n                <br></br>\n                <Card className=\"blue-grey\">\n                    <span class=\"white-text\"><b>Username:</b></span>\n                    <TextInput class=\"white\" onChange={this.handleChangeEmail} value={this.state.email}></TextInput>\n                    <span class=\"white-text\"><b>Password:</b></span>                    \n                    <TextInput class=\"white\" onChange={this.handleChangePassword} value={this.state.password} password></TextInput>\n                    <Button onClick={this.loginCallback}>Login</Button>\n                </Card>\n                <br></br>\n                <div>\n                {this.state.loginError ? \n                (<Card className=\"red\">\n                    <span class=\"black-text\">Invalid Credentials.</span>\n                </Card>) : <br></br>}\n                </div></div>}\n            </div>\n        );\n    }\n}\n\nexport default LoginScreen;","import React, { Component} from 'react'\nimport NavbarGPD from './NavbarGPD'\nimport {VictoryChart, VictoryGroup, VictoryLabel, VictoryAxis, VictoryLine, VictoryLegend} from 'victory';\nimport axios from 'axios'\nimport Select from 'react-select'\nimport formData from 'form-data'\n\n\nclass EnrollmentTrendsGPD extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            //selectedDepartment: \"CSE\",\n            selectedDepartment: \"\",\n            selectedCourses: [],\n            selectedSemesters: [],\n\n            departmentOptions: [\n                { label: 'CSE', value: 'CSE' },\n                { label: 'AMS', value: 'AMS' },\n                { label: 'CE', value: 'CE' },\n                { label: 'BMI', value: 'BMI' },\n            ],\n\n            semesterOptions: [ \n                //the value is the (year * 10) + (1 if Fall) (0 if spring)\n                //only works for years 2000+, the higher the val the more recent the sem\n                { label: 'F15', value: 151 },\n                { label: 'S16', value: 160 },\n                { label: 'F16', value: 161 },\n                { label: 'S17', value: 170 },\n                { label: 'F17', value: 171 },\n                { label: 'S18', value: 180 },\n                { label: 'F18', value: 181 },\n                { label: 'S19', value: 190 },\n                { label: 'F19', value: 191 },\n                { label: 'S20', value: 200 },\n                { label: 'F20', value: 201 },\n                { label: 'S21', value: 211 }\n            ],\n\n            courseOptions: [],\n            selectedSemData: [],\n            selectedCourseData: [],\n\n            courseData: [],\n\n            tempCourseHolder: [],\n\n            graphData: [],\n\n            graphLegend: [],\n\n            startSem: \"\",\n            endSem: \"\",\n\n        }\n    }\n\n    onChangeSemester = (event) => {\n        //Update semesters picked\n        var tempSem = []\n        event.forEach(function(semes) {\n            tempSem.push(semes.label)\n        });\n        this.setState({ selectedSemesters: event, selectedSemData: tempSem}, () => \n            {this.loadOptions()}); \n    }\n\n    onChangeDepartment = (event) => {\n        //Update department and reload course options\n        this.setState({ selectedDepartment: event.value}, () => \n            {this.loadOptions()}); \n    }\n\n    onChangeCourses = (event) => {\n        //Update selected courses\n        var tempCNs = []\n        event.forEach(function(semes) {\n            let str = semes.label\n            str = str.substring(str.length - 3)\n\n            tempCNs.push(parseInt(str));\n        });\n\n        this.setState({ selectedCourses: event, tempCourseHolder : tempCNs}, () => \n            {this.updateGraph()}); \n    }\n\n    updateGraph = () => {\n        let dept = this.state.selectedDepartment;\n\n        //Numerical values representing the selected courses [num, num, ...]\n        let temp = this.state.tempCourseHolder; \n            \n        //Data for all courses that satisfy degree and semester options{[courseNum, sem, totaltudents][...]...}\n        let allcrsinfo = this.state.courseData;    \n\n        let master = []\n        let tempLegend = []\n        temp.forEach(function(courseNum) {  //For each selected course\n            let tempGraphData = [];\n            allcrsinfo.forEach(function(crs) {  //For each course in masterlist that satisfies sem and degree\n\n                if (crs.courseNumber === courseNum) {\n                    let strtemp = crs.semester;\n\n                    //sem to int conversion\n                    let val = 0;\n                    let fs = strtemp.substring(0, 1);\n                    let yr = strtemp.substring(strtemp.length - 2);\n                    val = parseInt(yr) * 10;\n\n                    if (fs === 'F') {\n                        val += 1\n                    } \n\n                    let tempnum = crs.totalStudents;\n                    tempGraphData.push({ x: val, y: tempnum})\n                }\n            });\n            tempLegend.push({ name: (dept + ' ' + courseNum )});\n\n            master.push(tempGraphData)\n        });\n        this.setState({graphData: master, graphLegend : tempLegend}, () => \n        {this.loadOptions()}); \n    }\n\n\n    loadOptions = async () => {\n        //Loads the courses from the database based off of the current state options\n        if (this.state.selectedDepartment.length === 0 || this.state.selectedSemesters.length === 0) {\n            //Dep or sem has not been chosen, Do Nothing\n        } else {\n            let dept = this.state.selectedDepartment;\n\n            const body = new formData()\n            body.append('department', this.state.selectedDepartment)\n            body.append('courselist', this.state.selectedCourseData)\n            body.append('semesters', this.state.selectedSemData)\n\n            var courses = await axios.post('/api/courses/courselist', body).catch((err) => console.log('caught it'));\n            let x = Array.from(courses.data);\n\n            dept = this.state.selectedDepartment;\n\n            //Array that contains the course numbers for all courses that satisfy sem/dept options\n            let strArray = []\n            var i;\n            for (i = 0; i < x.length; i++) {\n                let num = x[i].courseNumber\n                strArray.push(num)\n            }\n\n            //No need for duplicates in select options\n            let tempOptionsArray = []\n            var alreadySeen = [];\n            strArray.forEach(function(str) {\n                if (alreadySeen[str]) {\n                } else {\n                    alreadySeen[str] = true;\n                    tempOptionsArray.push({ label: (dept + ' ' + str ), value: str })\n                }\n            });\n\n                this.setState({courseOptions : tempOptionsArray, courseData : x}); \n        }\n    }\n\n    async componentDidMount() {\n        this.loadOptions()\n    }\n\n    render(){\n        const items = this.state.graphData.map(e => <VictoryLine data={e}/>);\n        return(\n            <div>\n                <NavbarGPD />\n                <div class = \"row\"></div>\n                <div class = \"row\">\n                    <Select\n                        isMulti\n                        placeholder=\"Select Semester(s)\"\n                        options={this.state.semesterOptions}\n                        className=\"col s4\"\n                        onChange={e => this.onChangeSemester(e)}\n                    />\n                    <Select\n                        isMulti={false}\n                        placeholder=\"Select a Department\"\n                        options={this.state.departmentOptions}\n                        className=\"col s4\"\n                        onChange={e => this.onChangeDepartment(e)}\n                    />\n                    <Select\n                        isMulti\n                        placeholder=\"Select Courses...\"\n                        isDisabled={this.state.selectedDepartment.length === 0 || this.state.selectedSemesters.length === 0}\n                        options={this.state.courseOptions}\n                        className=\"col s4\"\n                        onChange={e => this.onChangeCourses(e)}\n                    />\n                </div>\n                <div class = \"row\">\n                </div>\n                <VictoryChart>\n                    <VictoryLabel text=\"Enrollment Trends\" x={225} y={20} textAnchor=\"middle\"/>\n                    <VictoryAxis domain={[0, 20]} dependentAxis label=\"# of Students\"/>\n                    <VictoryAxis  \n                    />\n                    <VictoryLegend x={325} y={20}\n                        title=\"Legend\"\n                        centerTitle\n                        orientation=\"horizontal\"\n                        gutter={20}\n                        style={{ border: { stroke: \"black\" }, title: {fontSize: 20 } }}\n                        data={this.state.graphLegend}\n                    />\n                    <VictoryGroup offset={20}\n                        colorScale={\"qualitative\"}\n                    >\n                        {items}\n                    </VictoryGroup>\n                </VictoryChart>\n            </div>\n        );\n    }\n}\n\nexport default EnrollmentTrendsGPD","import React, { Component} from 'react'\nimport {Button, Card, Navbar, Tab, Icon, NavItem, Tabs} from 'react-materialize'\nimport '../style.css'\nimport {Link, Redirect} from 'react-router-dom'\nclass NavbarStudent extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            currentClicked: null\n        };\n    }\n\n    render(){\n        return(\n            <Navbar\n            alignLinks=\"right\"\n            brand={<a className=\"brand-logo\" href=\"/\">MAST</a>}\n            className = \"blue\"\n            extendWith={<ul className=\"tabs tabs-transparent\">\n                <li class=\"tab white-text\"><a target=\"_self\" href=\"/student_info_stu\">Manage Students</a></li>\n                <li class=\"tab white-text\"><a target=\"_self\" href=\"/student_info_stu\">Sugggest Course Plan</a></li></ul>}\n            options={{edge: 'left', preventScrolling: true}}>\n            <Link to=\"/\"><NavItem>Logout</NavItem></Link>\n            </Navbar>\n        )\n    }\n\n}\n\nexport default NavbarStudent","import React, { Component} from 'react'\nimport { Card, Row, Col, Navbar, TextInput, Button, Collapsible, CollapsibleItem, Table, Checkbox } from 'react-materialize'\nimport {Link} from 'react-router-dom'\nimport axios from 'axios'\nimport NavbarStudent from './NavbarStudent';\n\nclass StudentInfo extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            currentStudent: \"\",\n            firstName: \"\",\n            lastName: \"\",\n            email: this.props.location.state.email,\n            major: \"\",\n            entrySemester: \"\",\n            track: \"\",\n            sbuID: \"\",\n            expectedGraduation: \"\",\n            rerender: false, \n            degreeData: [],\n            comments: []\n        };\n    }\n        \n    onChange = (event) => {\n            this.setState({[event.target.id]: event.target.value});\n        }\n        onChangeName = (event) => {\n            let nameStr = event.target.value.split(\" \");\n            this.setState({firstName: nameStr[0], lastName: nameStr[1]});\n        }\n\n\n        confirmAddComment = async () => {\n            let newComments = this.state.comments\n            console.log(this.state.currentComment);\n            newComments.push({message: this.state.currentComment});\n            console.log(newComments);\n            let body = {sbuID: this.state.sbuID, comment: this.state.currentComment};\n            let header = {\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                },\n              }; \n            let res = await axios.post(\"/api/comments/add_comment\", body, header).then(this.setState({comments: newComments})).catch((err) => console.log(err));\n        }\n\n        findStudent = async () => {\n            console.log(this.props.location.state.email);\n            let body = {email: this.props.location.state.email}\n            console.log(body);\n            let res = await axios.post(\"/api/students/find_student\", body).catch((err) => console.log('caught', err));\n            let people = res.data;\n            console.log(people);\n            this.setState({\n                currentStudent: people.student,\n                firstName: people.user.firstName,\n                lastName: people.user.lastName,\n                major: people.student.department,\n                entrySemester: people.student.entrySemester,\n                track: people.student.track,\n                sbuID: people.student.sbuID,\n                comments: people.comments\n            });\n        }   \n\n        getDegreeRequirements = async () => {\n            let degrees = await axios.get('/api/degrees').catch((err) => console.log('caught', err));\n            let degreeData = degrees.data\n            for(let i = 0; i < degreeData.length; i++){\n                let tempDegree = degreeData[i];\n                console.log(tempDegree);\n                if(this.state.major.replace(/ /g,'') == tempDegree.department){\n                    console.log(this.state.degreeData)\n                    this.setState({\n                        degreeData: degreeData[i].json,\n                        rerender: true\n                    });\n                    console.log(this.state.degreeData)\n                    break;\n                }\n            }\n        }\n\n        componentDidMount = () => {\n            this.findStudent();\n            this.getDegreeRequirements();\n        }\n\n        render(){\n            let dropdown;\n            if (this.state.major.replace(/ /g,'') == \"AMS\" && this.state.rerender) {\n                if(this.state.track == \"Computational Applied Mathematics\"){\n                    dropdown = <div>\n                        <Collapsible class=\"disabled\">\n                            {this.state.degreeData.requirements.tracks.comp.map((course) => (\n                                <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                            ))}\n                            <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.final_recommendation.name}></CollapsibleItem>\n                        </Collapsible>\n                    </div>;\n                }\n                else if(this.state.track == \"Operations Research\"){\n                    dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.tracks.op.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.final_recommendation.name}></CollapsibleItem>\n                    </Collapsible>\n                    </div>;\n                }\n                else if(this.state.track == \"Computational Biology\"){\n                    dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.tracks.bio.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.final_recommendation.name}></CollapsibleItem>\n                    </Collapsible>\n                    </div>;\n                }\n                else if(this.state.track == \"Statistics\"){\n                    dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.tracks.stats.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.final_recommendation.name}></CollapsibleItem>\n                    </Collapsible>\n                    </div>;\n                }\n                else if(this.state.track == \"Quanitative Finance\"){\n                    dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.tracks.quan.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.final_recommendation.name}></CollapsibleItem>\n                    </Collapsible>\n                    </div>;\n                }\n            }\n            else if (this.state.major.replace(/ /g,'') == \"BMI\" && this.state.rerender){\n                if(this.state.track = \"Project/Imaging Informatics\"){\n                    dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.seminar.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.general.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.project.imaging.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.project.elective.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                    </Collapsible>\n                    </div>;\n                }\n                else if(this.state.track == \"Project/Clinical Informatics\"){\n                    dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.seminar.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.general.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.project.clinical.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.project.elective.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                    </Collapsible>\n                    </div>;\n                }\n                else if(this.state.track == \"Project/Translational Bio-Informatics\"){\n                    dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.seminar.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.general.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.project.translational.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.project.elective.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                    </Collapsible>\n                    </div>;\n                }\n                else if(this.state.track == \"Thesis/Clinical Informatics\"){\n                    dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.seminar.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.general.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.thesis.clinical.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.thesis.elective.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                    </Collapsible>\n                    </div>;\n                }\n                else if(this.state.track == \"Thesis/Translational Bio-Informatics\"){\n                    dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.seminar.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.general.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.thesis.translational.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.thesis.elective.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                    </Collapsible>\n                    </div>;\n                }\n                else if(this.state.track = \"Thesis/Imaging Informatics\"){\n                    dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.seminar.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.general.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.thesis.imaging.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.thesis.elective.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                    </Collapsible>\n                    </div>;\n                }\n            }\n            else if(this.state.major.replace(/ /g,'') == \"CSE\" && this.state.rerender){\n                if(this.state.track == \"Basic Project\"){\n                    dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.registration}></CollapsibleItem>\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.credit}></CollapsibleItem>\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.gpa}></CollapsibleItem>\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.breadth.description}></CollapsibleItem>\n                        {this.state.degreeData.requirements.breadth.theory.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.breadth.systems.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.breadth.information.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.course.basic.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                    </Collapsible>\n                    </div>;\n                }\n                else if(this.state.track == \"Advanced Project\"){\n                    dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.registration}></CollapsibleItem>\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.credit}></CollapsibleItem>\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.gpa}></CollapsibleItem>\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.breadth.description}></CollapsibleItem>\n                        {this.state.degreeData.requirements.breadth.theory.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.breadth.systems.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.breadth.information.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.course.advanced.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                    </Collapsible>\n                    </div>;\n                }\n                else if(this.state.track == \"Thesis\"){\n                    dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.registration}></CollapsibleItem>\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.credit}></CollapsibleItem>\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.gpa}></CollapsibleItem>\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.breadth.description}></CollapsibleItem>\n                        {this.state.degreeData.requirements.breadth.theory.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.breadth.systems.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.breadth.information.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.course.thesis.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                    </Collapsible>\n                    </div>;\n                }\n            }\n            else if(this.state.major.replace(/ /g,'') == \"CE\" && this.state.rerender){\n                if(this.state.track == \"Non-Thesis\"){\n                    dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                    {this.state.degreeData.requirements.credit.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.no_thesis.description}></CollapsibleItem>\n                        {this.state.degreeData.requirements.no_thesis.hardware.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.no_thesis.networking.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.no_thesis.cad.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.no_thesis.description_2}></CollapsibleItem>\n                        {this.state.degreeData.requirements.no_thesis.theory.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.no_thesis.lecture}></CollapsibleItem>\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.no_thesis.other}></CollapsibleItem>\n                    </Collapsible>\n                    </div>;\n                }\n                else if(this.state.track == \"Thesis\"){\n                    dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.credit}></CollapsibleItem>\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.no_thesis.description}></CollapsibleItem>\n                        {this.state.degreeData.requirements.no_thesis.hardware.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.no_thesis.networking.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        {this.state.degreeData.requirements.no_thesis.cad.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.no_thesis.description_2}></CollapsibleItem>\n                        {this.state.degreeData.requirements.no_thesis.theory.map((course) => (\n                            <CollapsibleItem icon={<Checkbox />} header={course}></CollapsibleItem>\n                        ))}\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.no_thesis.lecture}></CollapsibleItem>\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.no_thesis.other}></CollapsibleItem>\n                        <CollapsibleItem icon={<Checkbox />} header={this.state.degreeData.requirements.no_thesis.thesis}></CollapsibleItem>\n                    </Collapsible>\n                    </div>;\n                }\n            }\n            return(\n                <div align=\"left\">\n                    <NavbarStudent></NavbarStudent>\n                    <br></br>\n                    <Row>\n                        <Col l={6}>\n                            <b>Edit Student: {this.state.firstName + \" \" + this.state.lastName}</b>\n                        </Col>\n                        <Col l={6}>\n                            <b>View/Edit Comments</b>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col l={6}>\n                            <Card className=\"blue-grey\">\n                                <Row>\n                                    <Col l={6}>\n                                        <span align=\"left\" class=\"white-text\">Full Name:</span>\n                                    </Col>\n                                    <Col l={6}>\n                                        <span class=\"white-text\">Major:</span>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col l={6}>\n                                        <TextInput class=\"white\" onChange={this.onChangeName} value={this.state.firstName + \" \" + this.state.lastName} id =\"fullName\">\n                                        </TextInput>\n                                    </Col>\n                                    <Col l={6}>\n                                        <TextInput class=\"white\" onChange={this.onChange} value={this.state.major} id=\"major\">\n                                        </TextInput>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col l={6}>\n                                        <span align=\"left\" class=\"white-text\">Email:</span>\n                                    </Col>\n                                    <Col l={6}>\n                                        <span class=\"white-text\">Entry Semester:</span>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col l={6}>\n                                        <TextInput class=\"white\" onChange={this.onChange} value={this.state.email} id=\"email\">\n                                        </TextInput>\n                                    </Col>\n                                    <Col l={6}>\n                                        <TextInput class=\"white\" onChange={this.onChange} value={this.state.entrySemester} id=\"entrySemester\">\n                                        </TextInput>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col l={6}>\n                                        <span align=\"left\" class=\"white-text\">SBU ID:</span>\n                                    </Col>\n                                    <Col l={6}>\n                                        <span class=\"white-text\">Expected Graduation:</span>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col l={6}>\n                                        <TextInput class=\"white\" onChange={this.onChange} value={this.state.sbuID} id=\"sbuID\" disabled>\n                                        </TextInput>\n                                    </Col>\n                                    <Col l={6}>\n                                        <TextInput class=\"white\" onChange={this.onChange} value={this.state.expectedGraduation} id=\"expectedGraduation\"> \n                                        </TextInput>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                <Col l={6} offset=\"l6\">\n                                        <span align=\"left\" class=\"white-text\">Track:</span>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col l={6}>\n                                        <Button onClick={this.confirmEdit}>Confirm Changes</Button>\n                                    </Col>\n                                    <Col l={6}>\n                                        <TextInput class=\"white\" onChange={this.onChange} value={this.state.track} id=\"track\"> \n                                        </TextInput>\n                                    </Col>\n                                </Row>\n                            </Card>\n                        </Col>\n                        <Col l=\"6\">\n                            <Card className=\"blue-grey\">\n                                <Row>\n                                    <Col l={6}>\n                                        <Collapsible>\n                                            {this.state.comments.map((comment) =>\n                                            (<CollapsibleItem header={comment.message}></CollapsibleItem>))}\n                                        </Collapsible>\n                                    </Col>\n                                    <Col><TextInput placeholder=\"Comment...\" class=\"white\" value={this.state.currentComment} onChange={this.onChange} id=\"currentComment\"></TextInput></Col>\n                                </Row>\n                                <Row>\n                                    <Col l={6}>\n                                    </Col>\n                                    <Col l={6}>\n                                        <Button onClick={this.confirmAddComment}>Add Comment</Button>\n                                    </Col>\n                                </Row>\n                            </Card>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col l={6}>\n                            <b>Current Course Plan:</b>\n                        </Col>\n                        <Col l={6}>\n                            <b>Degree Requirements:</b>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col l={6}>\n                        <Card className=\"blue-grey\">\n                            <Row>\n                            <Col l={12}>\n                                <Table className=\"white\">\n                                    <thead>\n                                        <tr>\n                                        <th>Course</th>\n                                        <th>Credit(s)</th>\n                                        <th>Time</th>\n                                        <th>Professor</th>\n                                        <th>Location</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr>\n                                            <td>AMS 501</td>\n                                            <td>3</td>\n                                            <td>T/Th 4:00PM-5:20PM</td>\n                                            <td>John Doe</td>\n                                            <td>Javits 100</td>\n                                        </tr>\n                                    </tbody>\n                                </Table>\n                            </Col>\n                            </Row>\n                        </Card>\n                        </Col>\n                        <Col l={6}>\n                        <Card className=\"blue-grey\">\n                            <Row>\n                            <Col l={12}>\n                                {dropdown}\n                            </Col>\n                            </Row>\n                        </Card>\n                        </Col>    \n                    </Row>\n                    <br></br>\n                </div>\n                \n            );\n        }\n    }\n    export default StudentInfo;","import React, { Component} from 'react'\nimport {Button} from 'react-materialize'\nimport '../style.css'\nimport NavbarGPD from './NavbarGPD';\nimport {DropzoneAreaBase} from 'material-ui-dropzone'\nimport axios from 'axios'\nimport formData from 'form-data'\nimport Select from 'react-select'\n\nclass UploadFileGPD extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            files: [],\n            upload_type: '',\n\n            departmentOptions: [\n                { label: 'CSE', value: 'CSE' },\n                { label: 'AMS', value: 'AMS' },\n                { label: 'CE', value: 'CE' },\n                { label: 'BMI', value: 'BMI' },\n            ],\n\n            semesterOptions: [ \n                //the value is the (year * 10) + (1 if Fall) (0 if spring)\n                //only works for years 2000+, the higher the val the more recent the sem\n                { label: 'F15', value: 151 },\n                { label: 'S16', value: 160 },\n                { label: 'F16', value: 161 },\n                { label: 'S17', value: 170 },\n                { label: 'F17', value: 171 },\n                { label: 'S18', value: 180 },\n                { label: 'F18', value: 181 },\n                { label: 'S19', value: 190 },\n                { label: 'F19', value: 191 },\n                { label: 'S20', value: 200 },\n                { label: 'F20', value: 201 },\n                { label: 'S21', value: 211 }\n            ],\n\n            selectedSemester: \"\",\n            selectedDepartment: \"\",\n        };\n    }\n\n    onSubmitCourseOfferings = async () => {\n\n        if (this.state.files.length < 1) return \n        const body = new formData()\n        body.append('file', this.state.files[0])\n\n        console.log(body)\n        await axios.post(\"/api/uploadfiles/course\", body).catch((error) => console.log(error));\n    }\n\n    onSubmitDegreeRequirements = async () => {\n        if(this.state.files.length < 1) return\n        const body = new formData()\n        body.append('file', this.state.files[0])\n        \n        console.log(body)\n        console.log(this.state.files[0])\n        await axios.post(\"/api/uploadfiles/degree_req\", body).catch((error) => console.log(error));\n    }\n\n    onSubmitCourseInformation = async () => {\n        if (this.state.files.length < 1) return \n        const body = new formData()\n        body.append('file', this.state.files[0])   \n        body.append('sem', this.state.selectedSemester)   \n        body.append('dept', this.state.selectedDepartment)   \n                  \n        await axios.post(\"/api/uploadfiles/course_info\", body).catch((error) => console.log(error));\n    }\n\n    onSubmitStudentData = async () => {\n        if (this.state.files.length < 1) return \n        const body = new formData()\n        body.append('studentProfile', this.state.files[0])\n\n        console.log(body)\n        await axios.post(\"/api/uploadfiles/student_data\", body).catch((error) => console.log(error));\n    }\n    \n    onSubmitStudentGrades = async () => {\n        if(this.state.files.length < 1) return\n        const body = new formData()\n        body.append('gradesObj', this.state.files[0])\n\n        console.log(body)\n        await axios.post(\"/api/uploadfiles/student_grades\", body).catch((error) => console.log(error));\n    }\n    \n    onSubmit = () => {\n        switch (this.state.upload_type) {\n            case 'CouseOfferings':\n                this.onSubmitCourseOfferings()\n                break;\n            case 'DegreeRequirements':\n                this.onSubmitDegreeRequirements()\n                break;\n            case 'StudentData':\n                this.onSubmitStudentData()\n                break;\n            case 'CourseInformation':\n                this.onSubmitCourseInformation() \n                break;\n            case 'StudentGrades':\n                this.onSubmitStudentGrades()\n                break;\n            default:\n                break;\n        }\n    }\n\n    render(){\n        return(\n            <div>\n                <NavbarGPD />\n                <div class=\"input-field col s4\">\n                    <select className=\"browser-default\" onChange={(e) => this.setState({upload_type: e.target.value})}>\n                        <option value=\"\" disabled selected>Choose your option</option>\n                        <option value=\"CouseOfferings\">Couse Offerings</option>\n                        <option value=\"DegreeRequirements\">Degree Requirements</option>\n                        <option value=\"StudentData\">Student Data</option>\n                        <option value=\"CourseInformation\">Course Information</option>\n                        <option value=\"StudentGrades\">Student Grades</option>\n                    </select>\n                </div>\n            <DropzoneAreaBase\n            onDrop={(files) => {this.setState({files: files})}}\n            maxFileSize={7000000}            \n            ></DropzoneAreaBase>\n            <br></br>\n            <Button onClick={() => this.onSubmit()} \n            disabled={this.state.upload_type === \"CourseInformation\" && (this.state.selectedDepartment.length === 0 || this.state.selectedSemester.length === 0)} >Submit File</Button>\n            <div class = \"row\"></div>\n            <div class = \"row\">\n                    <Select\n                        isDisabled={this.state.upload_type !== \"CourseInformation\"}\n                        placeholder=\"Select a Semester/Year\"\n                        options={this.state.semesterOptions}\n                        className=\"col s6\"\n                        onChange={e => this.setState({selectedSemester: e.value})}\n                    />\n                    <Select\n                        isDisabled={this.state.upload_type !== 'CourseInformation'}\n                        placeholder=\"Select a Department\"\n                        options={this.state.departmentOptions}\n                        className=\"col s6\"\n                        onChange={e => this.setState({selectedDepartment: e.value})}\n                    />\n                </div>\n                </div>\n        );\n    }\n}\nexport default UploadFileGPD","import React, { Component} from 'react'\nimport { Button, Row, Col, Table, Checkbox, Card, TimePicker } from 'react-materialize';\nimport NavbarGPD from './NavbarGPD'\nimport Select from 'react-select'\nimport axios from 'axios'\n\nclass SuggestCoursePlanGPD extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            currentStudent: this.props.location.state.currentEditStudent,\n            studentID: this.props.location.state.currentEditStudent.id,\n            major: this.props.location.state.currentEditStudent.department,\n            entrySemester: this.props.location.state.currentEditStudent.entrySemester,\n            track: this.props.location.state.currentEditStudent.track,\n            sbuID: this.props.location.state.currentEditStudent.sbuID,\n            expectedGraduation: \"\",\n            degreeData: [],\n            allCourses: [],\n            maxCredits: 0,\n            remainingSemesters: 0,\n            mondayTimeBegin: \"\",\n            mondayTimeEnd: \"\",\n            tuesdayTimeBegin: \"\",\n            tuesdayTimeEnd: \"\",\n            wednesdayTimeBegin: \"\",\n            wednesdayTimeEnd: \"\",\n            thursdayTimeBegin: \"\",\n            thursdayTimeEnd: \"\",\n            fridayTimeBegin: \"\",\n            fridayTimeEnd: \"\", \n            currentSemester: \"\"\n        };\n    }\n\n    //gets all of the grades in the database for the current student\n    getGrades = async () => {\n        let body = {id: this.state.sbuID};\n        let header = {\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          }; \n        let res = await axios.post(\"/api/courses/getgrades\").catch((err) => console.log(err));\n        return res.data;\n    }\n/*\n    calcGPA = async () => {\n        //get grades from databse\n        let grades4GPA = this.getGrades\n        let totalCredits = 0\n        let finalGPA = 0\n        //loop through and get total credits\n        for(let i = 0; i < grades4GPA.length; i++){\n            totalCredits += grades4GPA[i].credits\n        }\n        //loop through grades that are length two A-, b+, c+ etc...\n        for(let i = 0; i < grades4GPA.length; i++){\n            if(grades4GPA[i].grade.length == 2){\n                if(grades4GPA[i].grade.charAt(0) == \"A\"){\n                    if(grades4GPA[i].grade.charAt(1) == \"-\"){\n                        let gradeValue = 3.67\n                        let creditValue = grades4GPA[i].credits\n                        let GPAValue = gradeValue * creditValue\n                        finalGPA += GPAValue\n                    }\n                }\n                if(grades4GPA[i].grade.charAt(0) == \"B\"){\n                    if(grades4GPA[i].grade.charAt(1) == \"+\"){\n                        let gradeValue = 3.33\n                        let creditValue = grades4GPA[i].credits\n                        let GPAValue = gradeValue * creditValue\n                        finalGPA += GPAValue\n                    }\n                    if(grades4GPA[i].grade.charAt(1) == \"-\"){\n                        let gradeValue = 2.67\n                        let creditValue = grades4GPA[i].credits\n                        let GPAValue = gradeValue * creditValue\n                        finalGPA += GPAValue\n                    }\n                }\n                if(grades4GPA[i].grade.charAt(0) == \"C\"){\n                    if(grades4GPA[i].grade.charAt(1) == \"+\"){\n                        let gradeValue = 2.33\n                        let creditValue = grades4GPA[i].credits\n                        let GPAValue = gradeValue * creditValue\n                        finalGPA += GPAValue\n                    }\n                    if(grades4GPA[i].grade.charAt(1) == \"-\"){\n                        let gradeValue = 1.67\n                        let creditValue = grades4GPA[i].credits\n                        let GPAValue = gradeValue * creditValue\n                        finalGPA += GPAValue\n                    }\n                    \n                }\n                if(grades4GPA[i].grade.charAt(0) == \"D\"){\n                    if(grades4GPA[i].grade.charAt(1) == \"+\"){\n                        let gradeValue = 1.33\n                        let creditValue = grades4GPA[i].credits\n                        let GPAValue = gradeValue * creditValue\n                        finalGPA += GPAValue\n                    }\n                }\n            }\n            //Loop through classes get their grade and credit and mulitply for GPA Value\n            if(grades4GPA[i].grade.charAt(0) == \"A\"){\n                let gradeValue = 4.0\n                let creditValue = grades4GPA[i].credits \n                let GPAValue = gradeValue * creditValue\n                finalGPA += GPAValue\n            }\n            if(grades4GPA[i].grade.charAt(0) == \"B\"){\n                let gradeValue = 3.0\n                let creditValue = grades4GPA[i].credits \n                let GPAValue = gradeValue * creditValue\n                finalGPA += GPAValue\n            }\n            if(grades4GPA[i].grade.charAt(0) == \"C\"){\n                let gradeValue = 2.0\n                let creditValue = grades[i].credits \n                let GPAValue = gradeValue * creditValue\n                finalGPA += GPAValue\n            }\n            if(grades4GPA[i].grade.charAt(0) == \"D\"){\n                let gradeValue = 1.0\n                let creditValue = grades[i].credits\n                let GPAValue = gradeValue * creditValue\n                finalGPA += GPAValue\n            }\n            if(grades4GPA[i].grade.charAt(0) == \"F\"){\n                let gradeValue = 0.0\n                let creditValue = grades[i].credits\n                let GPAValue = gradeValue * creditValue\n                finalGPA += GPAValue\n            }\n            finalGPA = finalGPA / totalCredits //get the actual final GPA\n            return finalGPA\n        }\n    }\n*/\n\n    //gets all the degree requirements for a specific major/track\n    getDegreeRequirements = async () => {\n        let degrees = await axios.get('api/degrees').catch((err) => console.log('caught it'));\n        let degreeData = degrees.data\n        for(let i = 0; i < degreeData.length; i++){\n            let tempDegree = degreeData[i];\n            console.log(tempDegree);\n            if(this.state.major.replace(/ /g,'') == tempDegree.department){\n                console.log(this.state.degreeData)\n                this.setState({\n                    degreeData: degreeData[i].json,\n                    rerender: true\n                });\n                console.log(this.state.degreeData)\n                break;\n            }\n        }\n    }\n//get_creditsd_reamining takes remaining courses paramter and gets the total credits of the courses and see how many credits they still need to take\n\n    //compares grades with required courses for major and track to check what courses still need to be taken\n    searchCoursesAMS = async (grades, required_courses, elective_credits) => {\n        let finished_courses = []\n        let temp_elective_credits = elective_credits\n        for(let i = 0; i < grades.length; i++){\n            //checks letter grades to see if it is a valid grade (C to pass)\n            if(grades[i].grade.charAt(0) <= \"C\"){\n                if(grades[i].grade.length > 1){\n                    if(grades[i].grade.charAt(1) != \"-\"){\n                        //then split the required courses by / if there are multiple required courses that could fit one requirement\n                        for(let j = 0; j < required_courses.length; j++){\n                            let temp_courses = required_courses[j].split('/');\n                            let found_course = false;\n                            for(let k = 0; k < temp_courses.length; k++){\n                                //checks to see if there is a grade that matches a required course\n                                if((grades[i].department + \" \" + grades[i].course_num) == temp_courses[k]){\n                                    //if so that course is finished, push to finished courses and remove it from required courses\n                                    finished_courses.push(grades[i].department + \" \" + grades[i].course_num);\n                                    required_courses.splice(j, 1);\n                                    found_course = true;\n                                    break;\n                                }\n                            }\n                            //if no direct course that requirements are solved, check to see if it can satisfy an elective course\n                            if(!found_course){\n                                let duplicate = false;\n                                for(let l = 0; l < finished_courses.length; l++){\n                                    //if the grade is already accounted for, don't account for it again\n                                    if((grades[i].department + \" \" + grades[i].course_num) == finished_courses[l]){\n                                        duplicate = true;\n                                        break;\n                                    }\n                                }\n                                //if not, have it satisfy elective credits\n                                if(!duplicate){\n                                    finished_courses.push(grades[i].department + \" \" + grades[i].course_num);\n                                    temp_elective_credits = temp_elective_credits - (grades[i].credits);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        let body = {required_courses: required_courses, elective_credits: temp_elective_credits}\n        return body;\n    }\n\n    searchCoursesBMI = async () => {\n\n    }\n\n    searchCoursesCSE = async (grades, required_courses, elective_creditd) => {\n\n    }\n\n    searchCoursesESE = async () => {\n\n    }\n\n    //gets the remaining courses \n    getRemainingCourses = async () => {\n        let grades = this.getGrades();\n        let required_courses = []\n        let elective_credits = 0\n        let remaining_courses = []\n        if (this.state.major.replace(/ /g,'') == \"AMS\") {\n            if(this.state.track == \"Computational Applied Mathematics\"){\n                required_courses = this.state.degreeData.requirements.tracks.comp.courses\n                elective_credits = this.state.degreeData.requirements.tracks.comp.elective_creds\n                remaining_courses = this.searchCoursesAMS(grades, required_courses);\n            }\n            else if(this.state.track == \"Computational Biology\"){\n                required_courses = this.state.degreeData.requirements.tracks.bio.courses\n                elective_credits = this.state.degreeData.requirements.tracks.bio.elective_creds\n                remaining_courses = this.searchCoursesAMS(grades, required_courses);\n            }\n            else if(this.state.track == \"Operations Research\"){\n                required_courses = this.state.degreeData.requirements.tracks.op.courses\n                elective_credits = this.state.degreeData.requirements.tracks.op.elective_creds\n                remaining_courses = this.searchCoursesAMS(grades, required_courses);\n            }\n            else if(this.state.track == \"Statistics\"){\n                required_courses = this.state.degreeData.requirements.tracks.stats.courses\n                elective_credits = this.state.degreeData.requirements.tracks.stats.elective_creds\n                remaining_courses = this.searchCoursesAMS(grades, required_courses);\n            }\n            else if(this.state.track == \"Quanitative Finance\"){\n                required_courses = this.state.degreeData.requirements.tracks.quan.courses\n                elective_credits = this.state.degreeData.requirements.tracks.quan.elective_creds\n                remaining_courses = this.searchCoursesAMS(grades, required_courses);\n            }\n        } \n        if(this.state.major.replace(/ /g, '') == 'BMI'){\n\n        }\n        if(this.state.major.replace(/ /g, '') == 'CSE'){\n\n        }\n        if(this.state.major.replace(/ /g, '') == 'ESE'){\n\n        }\n    }\n\n    //gets the total credits from the remaining courses for the student to take\n    getCreditsRemainingCourses = async (remainingCourses) => {\n\n    }\n\n    //triggered when \"Suggest Course Plan\" Button is pressed\n    onClickSuggestPlan = async () => {\n        let requirementsBody = this.getRemainingCourses();\n        let remainingCourses = requirementsBody.required_courses;\n        let remainingElectiveCredits = requirementsBody.elective_credits;\n        let preferredCourses = this.getPreferredCourses();\n        let avoidedCourses = this.getAvoidedCourses();\n        let plans = this.suggestCoursePlan(remainingCourses, remainingElectiveCredits);\n\n    }\n\n    //gets the preferred courses from the user input on the website\n    getPreferredCourses = async () => {\n\n    }\n\n    //gets the avoided courses from the user input on the website\n    getAvoidedCourses = async () => {\n\n    }\n\n    //gets all courses from the database\n    getAllCourses = async () => {\n        let courses = await axios.get(\"http://localhost:5000/api/courses/\");\n        let courseData = courses.data\n        let courseNames = []\n        for(var course in courseData){\n            courseNames.push((courseData[course].department + \" \" + (courseData[course].courseNumber).toString()));\n        }\n        courseNames.sort();\n        this.setState({\n            allCourses: courseNames\n        });\n        console.log(this.state.allCourses);\n\n    }\n\n    suggestCoursePlan = async (remainingCourses, remainingElectiveCredits, preferredCourses, avoidedCourses) => {\n        let totalRemainingCredits = this.getCreditsRemainingCourses(remainingCourses) + remainingElectiveCredits;\n        let editElectiveCredits = remainingElectiveCredits;\n        let remainingSemesters = this.state.remainingSemesters\n        let loopNextSem = this.state.currentSemester;\n        let coursePlan = []\n        let coursePlanWeight = 0\n        if(totalRemainingCredits > (this.state.maxCredits * remainingSemesters)){\n            return [] //can't be done with constraints provided\n        }\n        while(remainingSemesters > 0){\n            let semCourses = [];\n            let loopSemCredits = this.state.maxCredits;\n            if(loopNextSem.charAt(0) == \"F\"){\n                loopNextSem = \"S\" + loopNextSem.substring(1);\n            }\n            else{\n                let year = parseInt(loopNextSem.substring(1));\n                year = year + 1\n                loopNextSem = \"F\" + year.toString();\n            }\n            //start priority course loop\n            for(let i = 0; i < preferredCourses.length; i++){\n                let constraintViolated = false;\n                let electiveCourse = false;\n                //checks to see if any time constraints are violated, if so don't add course to plan\n                let initSplit = preferredCourses[i].days.split(\" \");\n                let daysSplit = initSplit[0].split(\"/\");\n                let timesSplit = initSplit[1].split(\"-\");\n                for(let temp = 0; temp < daysSplit.length; temp++){\n                    if(daysSplit[temp] == \"M\"){\n                        if(timesSplit[0] < this.state.mondayTimeBegin || timesSplit[1] > this.state.mondayTimeEnd){\n                            constraintViolated = true;\n                            break;\n                        }\n                    }\n                    else if(daysSplit[temp] == \"Tu\"){\n                        if(timesSplit[0] < this.state.tuesdayTimeBegin || timesSplit[1] > this.state.tuesdayTimeEnd){\n                            constraintViolated = true;\n                            break;\n                        }\n                    }\n                    else if(daysSplit[temp] == \"W\"){\n                        if(timesSplit[0] < this.state.wednesdayTimeBegin || timesSplit[1] > this.state.wednesdayTimeEnd){\n                            constraintViolated = true;\n                            break;\n                        }\n                    }\n                    else if(daysSplit[temp] == \"Th\"){\n                        if(timesSplit[0] < this.state.thursdayTimeBegin || timesSplit[1] > this.state.thursdayTimeEnd){\n                            constraintViolated = true;\n                            break;\n                        }\n                    }\n                    else if(daysSplit[temp] == \"F\"){\n                        if(timesSplit[0] < this.state.fridayTimeBegin || timesSplit[1] > this.state.fridayTimeEnd){\n                            constraintViolated = true;\n                            break;\n                        }\n                    }\n                }\n                //Now checks to see if semester constraint would be violated\n                let courseOfferedSemester = preferredCourses[i].semester\n                if(loopNextSem != courseOfferedSemester)\n                {\n                    constraintViolated = true;\n                }\n                if(constraintViolated){\n                    continue;\n                }\n                //Now checks degree requirement constraint\n                let courseStr = preferredCourses[i].department + \" \" + preferredCourses[i].courseNumber;\n                let degreeReqFound = false;\n                for(let remainLoop = 0; remainLoop < remainingCourses.length; remainLoop++){\n                    let remainingCoursesSplit = remainingCourses[remainLoop].split(\"/\");\n                    for(let splitLoop = 0; splitLoop < remainingCoursesSplit; splitLoop++){\n                        if(courseStr == remainingCoursesSplit[splitLoop]){\n                            degreeReqFound = true;\n                        }\n                    }\n                }\n                if(!degreeReqFound){\n                    if(preferredCourses[i].credits < editElectiveCredits){\n                        continue;\n                    }\n                    else{\n                        electiveCourse = true;\n                    }\n                }\n                //finally pushes it to the semester plan\n                if(preferredCourses[i].credits >= loopSemCredits){\n                    semCourses.push(preferredCourses[i]);\n                    coursePlanWeight += 12;\n                    if(electiveCourse){\n                        editElectiveCredits = editElectiveCredits - preferredCourses[i].credits;\n                        loopSemCredits = loopSemCredits - preferredCourses[i].credits;\n                    }\n                    else{\n                        loopSemCredits -= preferredCourses[i].credits;\n                    }\n                }\n                if(loopSemCredits == 0){\n                    break;\n                }\n            }\n            //end of preferred course loop, check to see if the credit limit was reached for the semester\n            if(loopSemCredits == 0){\n                coursePlan.push(semCourses);\n                remainingSemesters = remainingSemesters - 1;\n            }\n            else{\n                let nonPreferredCourses = this.getAllCourses();\n                for(let i = 0; i < nonPreferredCourses.length; i++){\n                    let constraintViolated = false;\n                    let electiveCourse = false;\n                    //checks to see if any time constraints are violated, if so don't add course to plan\n                    let initSplit = nonPreferredCourses[i].days.split(\" \");\n                    let daysSplit = initSplit[0].split(\"/\");\n                    let timesSplit = initSplit[1].split(\"-\");\n                    for(let temp = 0; temp < daysSplit.length; temp++){\n                        if(daysSplit[temp] == \"M\"){\n                            if(timesSplit[0] < this.state.mondayTimeBegin || timesSplit[1] > this.state.mondayTimeEnd){\n                                constraintViolated = true;\n                                break;\n                            }\n                        }\n                        else if(daysSplit[temp] == \"Tu\"){\n                            if(timesSplit[0] < this.state.tuesdayTimeBegin || timesSplit[1] > this.state.tuesdayTimeEnd){\n                                constraintViolated = true;\n                                break;\n                            }\n                        }\n                        else if(daysSplit[temp] == \"W\"){\n                            if(timesSplit[0] < this.state.wednesdayTimeBegin || timesSplit[1] > this.state.wednesdayTimeEnd){\n                                constraintViolated = true;\n                                break;\n                            }\n                        }\n                        else if(daysSplit[temp] == \"Th\"){\n                            if(timesSplit[0] < this.state.thursdayTimeBegin || timesSplit[1] > this.state.thursdayTimeEnd){\n                                constraintViolated = true;\n                                break;\n                            }\n                        }\n                        else if(daysSplit[temp] == \"F\"){\n                            if(timesSplit[0] < this.state.fridayTimeBegin || timesSplit[1] > this.state.fridayTimeEnd){\n                                constraintViolated = true;\n                                break;\n                            }\n                        }\n                    }\n                    //Now checks to see if semester constraint would be violated\n                    let courseOfferedSemester = nonPreferredCourses[i].semester\n                    if(loopNextSem != courseOfferedSemester)\n                    {\n                        constraintViolated = true;\n                    }\n                    if(constraintViolated){\n                        continue;\n                    }\n                    //Now checks degree requirement constraint\n                    let courseStr = nonPreferredCourses[i].department + \" \" + nonPreferredCourses[i].courseNumber;\n                    let degreeReqFound = false;\n                    for(let remainLoop = 0; remainLoop < remainingCourses.length; remainLoop++){\n                        let remainingCoursesSplit = remainingCourses[remainLoop].split(\"/\");\n                        for(let splitLoop = 0; splitLoop < remainingCoursesSplit; splitLoop++){\n                            if(courseStr == remainingCoursesSplit[splitLoop]){\n                                degreeReqFound = true;\n                            }\n                        }\n                    }\n                    if(!degreeReqFound){\n                        if(nonPreferredCourses[i].credits < editElectiveCredits){\n                            continue;\n                        }\n                        else{\n                            electiveCourse = true;\n                        }\n                    }\n                    //finally pushes it to the semester plan\n                    if(nonPreferredCourses[i].credits >= loopSemCredits){\n                        semCourses.push(nonPreferredCourses[i]);\n                        coursePlanWeight += 10;\n                        if(electiveCourse){\n                            editElectiveCredits = editElectiveCredits - nonPreferredCourses[i].credits;\n                            loopSemCredits = loopSemCredits -nonPreferredCourses[i].credits;\n                        }\n                        else{\n                            loopSemCredits -= nonPreferredCourses[i].credits;\n                        }\n                    }\n                    if(loopSemCredits == 0){\n                        break;\n                    }\n                }\n                coursePlan.push(semCourses);\n                remainingSemesters = remainingSemesters - 1;\n            }\n        }\n    }\n\n    onChange = (event) => {\n        this.setState({[event.target.id]: event.target.value});\n    }\n\n    componentDidMount = async() => {\n        this.getDegreeRequirements();\n        this.getAllCourses();\n    }\n\n    render(){\n        return(\n            <div>\n            <NavbarGPD />\n            <br></br>\n            <Row>\n                <Col l={2}>\n                    <Card className=\"grey lighten-3\">\n                        <Row>\n                            <Col l={12}>\n                                <Button>Smart Suggestion</Button>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col l={12}>\n                                <b><u>Student Suggestions</u></b>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col l={12}>\n                                <b><u>Max Credits:</u></b>\n                                <input type=\"number\" id=\"maxCredits\" name=\"credits\" step=\"1\" min=\"0\" max=\"24\" onChange={this.onChange}></input>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col l={12}>\n                                <b><u>Max Semesters:</u></b>\n                                <input type=\"number\" id=\"remainingSemesters\" name=\"credits\" step=\"1\" min=\"0\" max=\"4\" onChange={this.onChange}></input>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col l={12}>\n                                <b><u>Course(s) to Avoid</u></b>\n                                <Table>\n                                    <thead>\n                                        <tr>\n                                            <th data-field=\"Name\">Course Name:</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {this.state.allCourses.map((course) => (\n                                            <tr>\n                                                <td><Checkbox id={course + \"prefer\"} label={<span style={{color: \"black\"}}>{course}</span>}></Checkbox></td>\n                                            </tr>\n                                        ))}\n                                    </tbody>\n                                </Table>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col l={12}>\n                                <b><u>Preferred Course(s)</u></b>\n                                <Table>\n                                    <thead>\n                                        <tr>\n                                            <th data-field=\"Name\">Course Name:</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {this.state.allCourses.map((course) => (\n                                            <tr>\n                                                <td><Checkbox id={course + \"avoid\"} label={<span style={{color: \"black\"}}>{course}</span>}></Checkbox></td>\n                                            </tr>\n                                        ))}\n                                    </tbody>\n                                </Table>\n                            </Col>\n                        </Row>\n                    </Card>\n                </Col>\n                <Col l={8} offset=\"l1\">\n                    <Row>\n                    <Card className=\"grey lighten-3\">\n                        <Row>\n                            <Col l={4}>\n                                <Select\n                                    placeholder=\"Select Semester\"\n                                />\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col l={12}>\n                                <Table centered>\n                                    <thead>\n                                        <tr>\n                                            <th data-field=\"Name\">Course</th>\n                                            <th data-field=\"Credit\">Credit(s)</th>\n                                            <th data-field=\"Days\">Days</th>\n                                            <th data-field=\"Time\">Time</th>\n                                            <th data-field=\"Professor\">Professor</th>\n                                            <th data-field=\"Location\">Location</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr>\n                                            <td data-field=\"Name\">Course</td>\n                                            <td data-field=\"Credit\">Credit(s)</td>\n                                            <td data-field=\"Days\">Days</td>\n                                            <td data-field=\"Time\">Time</td>\n                                            <td data-field=\"Professor\">Professor</td>\n                                            <td data-field=\"Location\">Location</td>\n                                        </tr>\n                                        <tr>\n                                            <td data-field=\"Name\">Course</td>\n                                            <td data-field=\"Credit\">Credit(s)</td>\n                                            <td data-field=\"Days\">Days</td>\n                                            <td data-field=\"Time\">Time</td>\n                                            <td data-field=\"Professor\">Professor</td>\n                                            <td data-field=\"Location\">Location</td>\n                                        </tr>\n                                        <tr>\n                                            <td data-field=\"Name\">Course</td>\n                                            <td data-field=\"Credit\">Credit(s)</td>\n                                            <td data-field=\"Days\">Days</td>\n                                            <td data-field=\"Time\">Time</td>\n                                            <td data-field=\"Professor\">Professor</td>\n                                            <td data-field=\"Location\">Location</td>\n                                        </tr>\n                                    </tbody>\n                                </Table>\n                            </Col>\n                        </Row>\n                    </Card>\n                    </Row>\n                    <Row>\n                        <Card className=\"grey lighten-3\">\n                            <b><u>Preferred Timeslots for Courses:</u></b>\n                            <Row></Row>\n                            <Row>\n                                <Col l={3}>\n                                    <b><u>Monday</u></b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"mondayTimeBegin\" onChange={this.onChange}></input>\n                                </Col>\n                                <Col l={3}>\n                                    <b>to</b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"mondayTimeEnd\" onChange={this.onChange}></input>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col l={3}>\n                                    <b><u>Tuesday</u></b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"tuesdayTimeBegin\" onChange={this.onChange}></input>\n                                </Col>\n                                <Col l={3}>\n                                    <b>to</b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"tuesdayTimeEnd\" onChange={this.onChange}></input>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col l={3}>\n                                    <b><u>Wednesday</u></b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"wednesdayTimeBegin\" onChange={this.onChange}></input>\n                                </Col>\n                                <Col l={3}>\n                                    <b>to</b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"wednesdayTimeEnd\" onChange={this.onChange}></input>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col l={3}>\n                                    <b><u>Thursday</u></b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"thursdayTimeBegin\" onChange={this.onChange}></input>\n                                </Col>\n                                <Col l={3}>\n                                    <b>to</b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"thursdayTimeEnd\" onChange={this.onChange}></input>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col l={3}>\n                                    <b><u>Friday</u></b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"fridayTimeBegin\" onChange={this.onChange}></input>\n                                </Col>\n                                <Col l={3}>\n                                    <b>to</b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"fridayTimeEnd\" onChange={this.onChange}></input>\n                                </Col>\n                            </Row>\n                            <Button>Suggest Course Plan</Button>\n                        </Card>\n                    </Row>\n                </Col>\n            </Row>\n            </div>\n        );\n    }\n}\n\nexport default SuggestCoursePlanGPD;","\nimport './App.css';\nimport React, { Component} from 'react'\nimport {Switch, Route, BrowserRouter} from 'react-router-dom'\nimport ManageStudentsGPD from './GPDScreens/ManageStudentsGPD';\nimport EditStudentGPD from './GPDScreens/EditStudentGPD';\nimport LoginScreen from './LoginScreens/LoginScreen';\nimport EnrollmentTrendsGPD from './GPDScreens/EnrollmentTrendsGPD';\nimport StudentInfo from './StudentScreens/StudentInfo';\nimport axios from 'axios'\nimport UploadFileGPD from './GPDScreens/UploadFileGPD';\nimport SuggestCoursePlanGPD from './GPDScreens/SuggestCoursePlanGPD';\n\nclass App extends Component{\n  state = {\n    data: null\n  };\n\n  componentDidMount = () => {\n    this.callBackendAPI();\n  }\n\n  callBackendAPI = async () => {\n    const response = await axios.get(\"/api/users\").catch((err) => console.log('caught', err));\n    this.setState({data: response.data});\n    console.log(this.state.data)\n\n    return response;\n  }\n\n\n  render(){\n  return this.state.data ? (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={LoginScreen}>\n          </Route>\n          <Route exact path=\"/manage_students_gpd\" component={ManageStudentsGPD}>\n          </Route>\n          <Route exact path=\"/edit_student_gpd\" component={EditStudentGPD}>\n          </Route>  \n          <Route exact path=\"/upload_file_gpd\" component={UploadFileGPD}>\n          </Route>\n          <Route exact path=\"/student_info_stu\" component ={StudentInfo}>\n          </Route>\n          <Route exact path=\"/enrollment_trends_gpd\" component={EnrollmentTrendsGPD}>\n          </Route>\n          <Route exact path = \"/suggest_course_plan_gpd\" component={SuggestCoursePlanGPD}>\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  ) : (<div>Loading...</div>);\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'materialize-css/dist/css/materialize.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}