{"version":3,"sources":["GPDScreens/NavbarGPD.js","GPDScreens/ManageStudentsGPD.js","GPDScreens/EditStudentGPD.js","LoginScreens/LoginScreen.js","GPDScreens/EnrollmentTrendsGPD.js","StudentScreens/NavbarStudent.js","StudentScreens/StudentInfo.js","GPDScreens/UploadFileGPD.js","GPDScreens/SuggestCoursePlanGPD.js","StudentScreens/CoursePlanScreen.js","App.js","index.js"],"names":["NavbarGPD","props","state","currentClicked","alignLinks","brand","className","href","extendWith","target","options","edge","preventScrolling","to","Component","ManageStudentsGPD","calcGPA","id","grades","student_grades","item","grades4GPA","totalCredits","finalGPA","i","length","credits","grade","charAt","onClickSearchCallback","a","values","query","split","filter","path","console","log","axios","get","catch","err","res","setState","students","data","onClickAdvanceSearch","firstFilter","searchByFirsName","searchByFirstName_input","trim","searchByLastName","searchByLastName_input","searchByDepartment","searchByDepartment_input","searchByEmail","searchByEmail_input","searchByTrack","searchByTrack_input","searchByStudentID","searchByStudentID_input","getAllGrades","header","headers","post","onChangeSearchQuery","event","value","onChange","addStudentCallback","body","firstName","lastName","email","password","department","entrySemester","track","graduation_semester","graduation_year","error","loadStudents","deleteStudentCallback","editStudent","student","sbuID","then","comments","currentEditStudent","push","getDegreeRequirements","degrees","degreeData","checkCourseInPlan","course","arrCourses","tempCoursePlan","coursePlan","Object","keys","forEach","key","key2","key3","j","courseNum","checkCompletedRequirements","completedCourses","pendingCourses","unsatisfiedCourses","tempDegree","replace","courses","json","requirements","tracks","comp","courseStrArr","completedCheck","course_num","toString","StudentId","op","bio","stats","quan","gpa_requirement","proj_imag","proj_clinical","proj_trans","thesis_imag","thesis_clinical","thesis_trans","non_thesis","thesis","basic","advanced","populateRequierement","status","onClick","bind","data-field","User","sortStudents","e","sortedList","sort","b","aFullname","bFullname","localeCompare","sortedList_grad","aGradSem","bGradSem","aGradYear","parseInt","bGradYear","sortedList_sem","aCoursePlan","bCoursePlan","aHasSemester","hasOwnProperty","bHasSemester","aNumSemesters","semesters","refresh","this","pathname","offset","l","icon","label","actions","flat","modal","node","trigger","waves","type","checked","defaultValue","disabled","map","size","EditStudentGPD","onChangeName","nameStr","confirmEdit","userID","studentID","major","confirmAddComment","newComments","message","currentComment","comment","rerender","onChangeComment","index","currentCommentIndex","onDeleteComment","splice","confirmSuggestPlan","suggestPlan","componentDidMount","getCompletedCourse","checkCompletedCourse","location","checkCourseInProgress","arr","courseStr","returnTrueVal","currentStudent","expectedGraduation","dropdown","class","indeterminate","align","placeholder","semester","year","LoginScreen","handleChangeEmail","handleChangePassword","loginCallback","jwt_decode","token","isStudent","redirectStudent","isLogin","loginError","redirectURL","user_data","response","second_render","EnrollmentTrendsGPD","onChangeSemester","tempSem","semes","selectedSemesters","selectedSemData","loadOptions","onChangeDepartment","selectedDepartment","onChangeCourses","tempCNs","str","substring","selectedCourses","tempCourseHolder","updateGraph","dept","temp","allcrsinfo","courseData","master","tempLegend","tempGraphData","crs","courseNumber","strtemp","val","fs","yr","tempnum","totalStudents","x","y","name","graphData","graphLegend","formData","append","selectedCourseData","Array","from","strArray","num","tempOptionsArray","alreadySeen","courseOptions","departmentOptions","semesterOptions","startSem","endSem","items","isMulti","isDisabled","text","textAnchor","domain","dependentAxis","title","centerTitle","orientation","gutter","style","border","stroke","fontSize","colorScale","NavbarStudent","StudentInfo","findStudent","people","user","UploadFileGPD","onSubmitCourseOfferings","files","onSubmitDegreeRequirements","onSubmitCourseInformation","selectedSemester","onSubmitStudentData","studentCoursePlan","course_data_body","onSubmitStudentGrades","onSubmit","upload_type","onDrop","maxFileSize","SuggestCoursePlanGPD","getGrades","searchCoursesAMS","required_courses","elective_credits","finished_courses","temp_elective_credits","temp_courses","found_course","k","duplicate","getRemainingCourses","remaining_courses","elective_creds","getCreditsRemainingCourses","remainingCourses","total","retval","onClickSuggestPlan","requirementsBody","remainingElectiveCredits","getPreferredCourses","preferredCourses","getAvoidedCourses","avoidedCourses","totalRemainingCredits","suggestCoursePlan","plans","currentCoursePlan","getAllCourses","courseNames","courseVals","allCourses","allCourseVals","convert24to12","hours","minutes","smartSuggestCoursePlan","editElectiveCredits","remainingSemesters","loopNextSem","currentSemester","maxCredits","semCourses","loopSemCredits","constraintViolated","electiveCourse","initSplit","days","daysSplit","timesSplit","mondayTimeBegin","mondayTimeEnd","wednesdayTimeBegin","wednesdayTimeEnd","tuesdayTimeBegin","tuesdayTimeEnd","thursdayTimeBegin","thursdayTimeEnd","fridayTimeBegin","fridayTimeEnd","courseOfferedSemester","degreeReqFound","remainLoop","remainingCoursesSplit","splitLoop","nonPreferredCourses","requiredCourseFlag","tempStrArr","approveCousePlan","approvedPlan","step","min","max","includes","obj","color","centered","CoursePlanScreen","goHome","goHomeFlag","returnHome","App","callBackendAPI","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7cc2f80e.chunk.js","sourcesContent":["import React, { Component} from 'react'\nimport {Navbar, NavItem} from 'react-materialize'\nimport '../style.css'\nimport {Link} from 'react-router-dom'\n\nclass NavbarGPD extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            currentClicked: null\n        };\n    }\n\n    render(){\n        return(\n            <Navbar\n            alignLinks=\"right\"\n            brand={<a className=\"brand-logo\" href=\"/\">MAST</a>}\n            className = \"blue\"\n            extendWith={<ul className=\"tabs tabs-transparent\">\n                <li className=\"tab white-text\"><a target=\"_self\" href=\"/manage_students_gpd\">Manage Students</a></li>\n                <li className=\"tab white-text\"><a target=\"_self\" href=\"/upload_file_gpd\">Upload File</a></li>\n                <li className=\"tab white-text\"><a target=\"_self\" href=\"/enrollment_trends_gpd\">View Enrollment Trends</a></li></ul>}\n            options={{edge: 'left', preventScrolling: true}}>\n            <Link to=\"/\"><NavItem>Logout</NavItem></Link>\n            </Navbar>\n        )\n    }\n\n}\n\nexport default NavbarGPD","import React, { Component} from 'react'\nimport NavbarGPD from './NavbarGPD'\nimport { Row, Col, TextInput, Button, Table, Modal} from 'react-materialize'\nimport axios from 'axios'\nimport { Redirect } from 'react-router-dom'\n\nclass ManageStudentsGPD extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            firstName: \"\",\n            lastName: \"\",\n            email: \"\",\n            password: \"\",\n            department: \"\",\n            entrySemester: \"\",\n            track: \"\",\n            students: [],\n            comments: [],\n            query: \"\",\n            graduation_semester: \"\",\n            graduation_year: \"\",\n            editStudent: false,\n            currentEditStudent: null,\n            refresh: false,\n            searchByFirsName: false,\n            searchByLastName: false,\n            searchByStudentID: false,\n            searchByDepartment: false,\n            searchByEmail: false,\n            searchByTrack: false,\n            searchByStudentID_input: \"\",\n            searchByFirstName_input: \"\",\n            searchByLastName_input: \"\",\n            searchByDepartment_input: \"\",\n            searchByEmail_input: \"\",\n            searchByTrack_input: \"\",\n            degreeData: [],\n            grades: [],\n            student_grades: []\n        }\n    }\n\n\n    calcGPA = (id) => {\n        //get grades from databse\n\n        let grades = []\n\n        for(const item of this.state.student_grades){\n            if(item.id == id){\n                grades = [...item.grades]\n                break\n            }\n        }\n\n        let grades4GPA = [...grades]\n        let totalCredits = 0\n        let finalGPA = 0\n        //loop through and get total credits\n        for(let i = 0; i < grades4GPA.length; i++){\n            totalCredits += grades4GPA[i].credits\n        }\n        //loop through grades that are length two A-, b+, c+ etc...\n        for(let i = 0; i < grades4GPA.length; i++){\n            if(grades4GPA[i].grade.length == 2){\n                if(grades4GPA[i].grade.charAt(0) == \"A\"){\n                    if(grades4GPA[i].grade.charAt(1) == \"-\"){\n                        let gradeValue = 3.67\n                        let creditValue = grades4GPA[i].credits\n                        let GPAValue = gradeValue * creditValue\n                        finalGPA += GPAValue\n                    }\n                }\n                if(grades4GPA[i].grade.charAt(0) == \"B\"){\n                    if(grades4GPA[i].grade.charAt(1) == \"+\"){\n                        let gradeValue = 3.33\n                        let creditValue = grades4GPA[i].credits\n                        let GPAValue = gradeValue * creditValue\n                        finalGPA += GPAValue\n                    }\n                    if(grades4GPA[i].grade.charAt(1) == \"-\"){\n                        let gradeValue = 2.67\n                        let creditValue = grades4GPA[i].credits\n                        let GPAValue = gradeValue * creditValue\n                        finalGPA += GPAValue\n                    }\n                }\n                if(grades4GPA[i].grade.charAt(0) == \"C\"){\n                    if(grades4GPA[i].grade.charAt(1) == \"+\"){\n                        let gradeValue = 2.33\n                        let creditValue = grades4GPA[i].credits\n                        let GPAValue = gradeValue * creditValue\n                        finalGPA += GPAValue\n                    }\n                    if(grades4GPA[i].grade.charAt(1) == \"-\"){\n                        let gradeValue = 1.67\n                        let creditValue = grades4GPA[i].credits\n                        let GPAValue = gradeValue * creditValue\n                        finalGPA += GPAValue\n                    }\n                    \n                }\n                if(grades4GPA[i].grade.charAt(0) == \"D\"){\n                    if(grades4GPA[i].grade.charAt(1) == \"+\"){\n                        let gradeValue = 1.33\n                        let creditValue = grades4GPA[i].credits\n                        let GPAValue = gradeValue * creditValue\n                        finalGPA += GPAValue\n                    }\n                }\n            }\n            //Loop through classes get their grade and credit and mulitply for GPA Value\n            if(grades4GPA[i].grade.charAt(0) == \"A\"){\n                let gradeValue = 4.0\n                let creditValue = grades4GPA[i].credits \n                let GPAValue = gradeValue * creditValue\n                finalGPA += GPAValue\n            }\n            if(grades4GPA[i].grade.charAt(0) == \"B\"){\n                let gradeValue = 3.0\n                let creditValue = grades4GPA[i].credits \n                let GPAValue = gradeValue * creditValue\n                finalGPA += GPAValue\n            }\n            if(grades4GPA[i].grade.charAt(0) == \"C\"){\n                let gradeValue = 2.0\n                let creditValue = grades4GPA[i].credits \n                let GPAValue = gradeValue * creditValue\n                finalGPA += GPAValue\n            }\n            if(grades4GPA[i].grade.charAt(0) == \"D\"){\n                let gradeValue = 1.0\n                let creditValue = grades4GPA[i].credits\n                let GPAValue = gradeValue * creditValue\n                finalGPA += GPAValue\n            }\n            if(grades4GPA[i].grade.charAt(0) == \"F\"){\n                let gradeValue = 0.0\n                let creditValue = grades4GPA[i].credits\n                let GPAValue = gradeValue * creditValue\n                finalGPA += GPAValue\n            }\n            finalGPA = finalGPA / totalCredits //get the actual final GPA\n\n            return finalGPA\n        }\n    }\n\n    onClickSearchCallback = async () => {\n\n        let values = this.state.query.split(\" \")\n\n        if (this.state.query.length === 0) return \n\n        if(values.length > 2) {\n            values = values.filter((item) => item.length > 0)\n        }\n\n        if(values.length > 2) return\n        \n\n        let path = values.length === 1 ?  \"/api/students/search?firstName=\" + values[0] : \"/api/students/search?firstName=\" + values[0] + \"&lastName=\" + values[1]\n        console.log(\"path is:::\", path)\n        let res = await axios.get(path).catch((err) => console.log('caught', err));\n        \n        this.setState({students: res.data})\n    }\n\n    onClickAdvanceSearch = async () => {\n        \n        let path = \"/api/students/search?\"\n        let firstFilter = true\n\n        if (this.state.searchByFirsName) {\n            path = path + \"firstName=\" + this.state.searchByFirstName_input.trim()\n            firstFilter = false\n        }\n\n        if (this.state.searchByLastName) {\n            path =  firstFilter ? (path + \"lastName=\" + this.state.searchByLastName_input.trim()) : (path + \"&lastName=\" + this.state.searchByLastName_input.trim())\n            firstFilter = false\n        }\n\n        if (this.state.searchByDepartment) {\n            path =  firstFilter ? (path + \"department=\" + this.state.searchByDepartment_input.trim()) : (path + \"&department=\" + this.state.searchByDepartment_input.trim())\n            firstFilter = false\n        }\n\n        if (this.state.searchByEmail) {\n            path =  firstFilter ? (path + \"email=\" + this.state.searchByEmail_input.trim()) : (path + \"&email=\" + this.state.searchByEmail_input.trim())\n            firstFilter = false\n        }\n\n        if (this.state.searchByTrack) {\n            path =  firstFilter ? (path + \"track=\" + this.state.searchByTrack_input.trim()) : (path + \"&track=\" + this.state.searchByTrack_input.trim())\n            firstFilter = false\n        }\n\n        if (this.state.searchByStudentID) {\n            path =  firstFilter ? (path + \"sbuID=\" + this.state.searchByStudentID_input.trim()) : (path + \"&sbuID=\" + this.state.searchByStudentID_input.trim())\n            firstFilter = false\n        }\n\n\n        let res = await axios.get(path).catch((err) => console.log('caught', err));\n        this.setState({students: res.data})\n\n    }\n\n    getAllGrades = async () => {\n        let header = {\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          }; \n        let res = await axios.post(\"/api/courses/getallgrades\", header).catch((err) => console.log('caught error'));\n        this.setState({grades: res.data})\n    }\n\n    onChangeSearchQuery = (event) => {\n\n        this.setState({query: event.target.value})\n\n    }\n\n    onChange = (event) => {\n        this.setState({[event.target.id]: event.target.value});\n    }\n\n    addStudentCallback = async () => {\n        let body = {firstName: this.state.firstName, lastName: this.state.lastName, email: this.state.email, password: this.state.password, department: this.state.department, entrySemester: this.state.entrySemester, track: this.state.track, graduation_semester: this.state.graduation_semester, graduation_year: this.state.graduation_year};\n        let header = {\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          };    \n        await axios.post(\"/api/add_student/\", body, header).catch((error) => console.log(error));\n        this.loadStudents()\n    }\n\n    deleteStudentCallback = async () => {\n        let body = []\n        axios.post(\"/api/students/delete_all\", body).catch((error) => console.log(error));\n        this.setState({students: []});\n    }\n\n    editStudent = async (student) => {\n        let body = {id: student.sbuID};\n        console.log(body);\n        await axios.post('/api/comments', body).then((res) => this.setState({comments: res.data, currentEditStudent: student, editStudent: true})).catch((err) => console.log(err));\n        console.log(this.state.comments);\n    }\n\n    loadStudents = async () => {\n        var students = await axios.get('/api/students').catch((err) => console.log('caught', err));\n        console.log(students.data)\n        this.setState({students: students.data})\n        \n        let grades = []\n        for (const student of students.data){\n            \n            let body = {id: student.id};\n            let header = {\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            }; \n            let res = await axios.post(\"/api/courses/getgrades\", body)\n            grades.push({id: student.id, grades: [...res.data]})\n        }\n\n        this.setState({student_grades: [...grades]})\n    }\n\n    async componentDidMount() {\n        await this.loadStudents();\n        await this.getDegreeRequirements();\n        await this.getAllGrades();\n    }\n\n    getDegreeRequirements = async () => {\n        let degrees = await axios.get('/api/degrees').catch((err) => console.log('caught', err));\n        let degreeData = degrees.data\n        console.log(degreeData);\n        this.setState({degreeData: degreeData})\n    }\n\n    checkCourseInPlan = (student, course) => {\n        var arrCourses = [];\n        let tempCoursePlan = student.coursePlan\n        if(tempCoursePlan == null){\n            return false;\n        }\n        else{\n            Object.keys(tempCoursePlan).forEach(function (key){\n                Object.keys(tempCoursePlan[key]).forEach(function (key2){\n                        Object.keys(tempCoursePlan[key][key2]).forEach(function (key3){\n                            arrCourses.push(tempCoursePlan[key][key2][key3])\n                        }) \n                })\n            });\n            for(let j = 0; j < arrCourses.length; j++){\n                let courseStr = arrCourses[j].department + \" \" + arrCourses[j].courseNum;\n                if(course == courseStr){\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n\n    checkCompletedRequirements =  (student) => {\n        let completedCourses = 0;\n        let pendingCourses = 0;\n        let unsatisfiedCourses = 0;\n        for(let i = 0; i < this.state.degreeData.length; i++){\n            let tempDegree = this.state.degreeData[i];\n            if(student.department.replace(/ /g,'') === tempDegree.department){\n                if(student.department.replace(/ /g,'') === \"AMS\"){\n                    if(student.track === \"Computational Applied Mathematics\"){\n                        let courses = tempDegree.json.requirements.tracks.comp.courses\n                        console.log(courses);\n                        for(var course in courses){\n                            let courseStrArr = courses[course].split(\"/\")\n                            for(let i = 0; i < courseStrArr.length; i++){\n                                let completedCheck = false;\n                                for(var grade in this.state.grades){\n                                    if(courseStrArr[i] === (this.state.grades[grade].department + \" \" + this.state.grades[grade].course_num).toString() && this.state.grades[grade].StudentId === student.id)\n                                    {\n                                        if(this.state.grades[grade].grade ===\"A\" || this.state.grades[grade].grade === \"B\") {\n                                            completedCourses = completedCourses + 1;\n                                            completedCheck = true;\n                                        }\n                                        else if(this.state.grades[grade].grade === \"C\"){\n                                            if(this.state.grades[grade].grade.length > 1){\n                                                if(this.state.grades[grade].grade.charAt(1) !== \"-\"){\n                                                    completedCourses = completedCourses + 1\n                                                    completedCheck = true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                if(this.checkCourseInPlan(student, courseStrArr[i]) && !completedCheck){\n                                    pendingCourses = pendingCourses + 1;\n                                }\n                                else if(!completedCheck && i == courseStrArr.length - 1){\n                                    unsatisfiedCourses = unsatisfiedCourses + 1;\n                                }     \n                            }\n                        }\n                    }\n                    else if(student.track == \"Operations Research\"){\n                        let courses = tempDegree.json.requirements.tracks.op.courses\n                        console.log(courses);\n                        for(var course in courses){\n                            console.log(courses[course]);\n                            let courseStrArr = courses[course].split(\"/\")\n                            for(let i = 0; i < courseStrArr.length; i++){\n                                let completedCheck = false;\n                                for(var grade in this.state.grades){\n                                    if(courseStrArr[i] == (this.state.grades[grade].department + \" \" + this.state.grades[grade].course_num).toString() && this.state.grades[grade].StudentId == student.id)\n                                    {\n                                        if(this.state.grades[grade].grade == \"A\" || this.state.grades[grade].grade == \"B\") {\n                                            completedCourses = completedCourses + 1;\n                                            completedCheck = true;\n                                            break;\n                                        }\n                                        else if(this.state.grades[grade].grade == \"C\"){\n                                            if(this.state.grades[grade].grade.length > 1){\n                                                if(this.state.grades[grade].grade.charAt(1) != \"-\"){\n                                                    completedCourses = completedCourses + 1\n                                                    completedCheck = true;\n                                                    break;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                if(this.checkCourseInPlan(student, courseStrArr[i]) && !completedCheck){\n                                    pendingCourses = pendingCourses + 1;\n                                }\n                                else if(!completedCheck && i == courseStrArr.length - 1){\n                                    unsatisfiedCourses = unsatisfiedCourses + 1;\n                                }     \n                            }\n                        }\n                    }\n                    else if(student.track == \"Computational Biology\"){\n                        let courses = tempDegree.json.requirements.tracks.bio.courses\n                        console.log(courses);\n                        for(var course in courses){\n                            let courseStrArr = courses[course].split(\"/\")\n                            for(let i = 0; i < courseStrArr.length; i++){\n                                let completedCheck = false;\n                                for(var grade in this.state.grades){\n                                    if(courseStrArr[i] == (this.state.grades[grade].department + \" \" + this.state.grades[grade].course_num).toString() && this.state.grades[grade].StudentId == student.id)\n                                    {\n                                        if(this.state.grades[grade].grade == \"A\" || this.state.grades[grade].grade == \"B\") {\n                                            completedCourses = completedCourses + 1;\n                                            completedCheck = true;\n                                        }\n                                        else if(this.state.grades[grade].grade == \"C\"){\n                                            if(this.state.grades[grade].grade.length > 1){\n                                                if(this.state.grades[grade].grade.charAt(1) != \"-\"){\n                                                    completedCourses = completedCourses + 1\n                                                    completedCheck = true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                if(this.checkCourseInPlan(student, courseStrArr[i]) && !completedCheck){\n                                    pendingCourses = pendingCourses + 1;\n                                }\n                                else if(!completedCheck && i == courseStrArr.length - 1){\n                                    unsatisfiedCourses = unsatisfiedCourses + 1;\n                                }     \n                            }\n                        }\n                    }\n                    else if(student.track == \"Statistics\"){\n                        let courses = tempDegree.json.requirements.tracks.stats.courses\n                        console.log(courses);\n                        for(var course in courses){\n                            let courseStrArr = courses[course].split(\"/\")\n                            for(let i = 0; i < courseStrArr.length; i++){\n                                    let completedCheck = false;\n                                    for(var grade in this.state.grades){\n                                        if(courseStrArr[i] == (this.state.grades[grade].department + \" \" + this.state.grades[grade].course_num).toString() && this.state.grades[grade].StudentId == student.id)\n                                        {\n                                            if(this.state.grades[grade].grade == \"A\" || this.state.grades[grade].grade == \"B\") {\n                                                completedCourses = completedCourses + 1;\n                                                completedCheck = true;\n                                            }\n                                            else if(this.state.grades[grade].grade == \"C\"){\n                                                if(this.state.grades[grade].grade.length > 1){\n                                                    if(this.state.grades[grade].grade.charAt(1) != \"-\"){\n                                                        completedCourses = completedCourses + 1\n                                                        completedCheck = true;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    if(this.checkCourseInPlan(student, courseStrArr[i]) && !completedCheck){\n                                        pendingCourses = pendingCourses + 1;\n                                    }\n                                    else if(!completedCheck && i == courseStrArr.length - 1){\n                                        unsatisfiedCourses = unsatisfiedCourses + 1;\n                                    }     \n                                }\n                        }\n                    }\n                    else if(student.track == \"Quanitative Finance\"){\n                        let courses = tempDegree.json.requirements.tracks.quan.courses\n                        console.log(courses);\n                        for(var course in courses){\n                            let courseStrArr = courses[course].split(\"/\")\n                            for(let i = 0; i < courseStrArr.length; i++){\n                                let completedCheck = false;\n                                for(var grade in this.state.grades){\n                                    if(courseStrArr[i] == (this.state.grades[grade].department + \" \" + this.state.grades[grade].course_num).toString() && this.state.grades[grade].StudentId == student.id)\n                                    {\n                                        if(this.state.grades[grade].grade == \"A\" || this.state.grades[grade].grade == \"B\") {\n                                            completedCourses = completedCourses + 1;\n                                            completedCheck = true;\n                                        }\n                                        else if(this.state.grades[grade].grade == \"C\"){\n                                            if(this.state.grades[grade].grade.length > 1){\n                                                if(this.state.grades[grade].grade.charAt(1) != \"-\"){\n                                                    completedCourses = completedCourses + 1\n                                                    completedCheck = true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                if(this.checkCourseInPlan(student, courseStrArr[i]) && !completedCheck){\n                                    pendingCourses = pendingCourses + 1;\n                                }\n                                else if(!completedCheck && i == courseStrArr.length - 1){\n                                    unsatisfiedCourses = unsatisfiedCourses + 1;\n                                }     \n                            }\n                        }\n                    }\n                    \n                     //GPA===1 requierment\n                    let gpa =  this.calcGPA(student.id)\n                    if(gpa >= tempDegree.json.requirements.gpa_requirement){\n                        completedCourses = completedCourses + 1\n                    }else {\n                        unsatisfiedCourses = unsatisfiedCourses + 1;\n                    }\n\n                }\n                else if(student.department.replace(/ /g,'') == \"BMI\"){\n                    if(student.track == \"Project/Imaging Informatics\"){\n                        let courses = tempDegree.json.requirements.tracks.proj_imag.courses\n                        console.log(courses);\n                        for(var course in courses){\n                            let courseStrArr = courses[course].split(\"/\")\n                            for(let i = 0; i < courseStrArr.length; i++){\n                                let completedCheck = false;\n                                for(var grade in this.state.grades){\n                                    if(courseStrArr[i] == (this.state.grades[grade].department + \" \" + this.state.grades[grade].course_num).toString() && this.state.grades[grade].StudentId == student.id)\n                                    {\n                                        if(this.state.grades[grade].grade == \"A\" || this.state.grades[grade].grade == \"B\") {\n                                            completedCourses = completedCourses + 1;\n                                            completedCheck = true;\n                                        }\n                                        else if(this.state.grades[grade].grade == \"C\"){\n                                            if(this.state.grades[grade].grade.length > 1){\n                                                if(this.state.grades[grade].grade.charAt(1) != \"-\"){\n                                                    completedCourses = completedCourses + 1\n                                                    completedCheck = true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                if(this.checkCourseInPlan(student, courseStrArr[i]) && !completedCheck){\n                                    pendingCourses = pendingCourses + 1;\n                                }\n                                else if(!completedCheck && i == courseStrArr.length - 1){\n                                    unsatisfiedCourses = unsatisfiedCourses + 1;\n                                }     \n                            }\n                        }\n                    }\n                    else if(student.track == \"Project/Clinical Informatics\"){\n                        let courses = tempDegree.json.requirements.tracks.proj_clinical.courses\n                        console.log(courses);\n                        for(var course in courses){\n                            let courseStrArr = courses[course].split(\"/\")\n                            for(let i = 0; i < courseStrArr.length; i++){\n                                let completedCheck = false;\n                                for(var grade in this.state.grades){\n                                    if(courseStrArr[i] == (this.state.grades[grade].department + \" \" + this.state.grades[grade].course_num).toString() && this.state.grades[grade].StudentId == student.id)\n                                    {\n                                        if(this.state.grades[grade].grade == \"A\" || this.state.grades[grade].grade == \"B\") {\n                                            completedCourses = completedCourses + 1;\n                                            completedCheck = true;\n                                        }\n                                        else if(this.state.grades[grade].grade == \"C\"){\n                                            if(this.state.grades[grade].grade.length > 1){\n                                                if(this.state.grades[grade].grade.charAt(1) != \"-\"){\n                                                    completedCourses = completedCourses + 1\n                                                    completedCheck = true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                if(this.checkCourseInPlan(student, courseStrArr[i]) && !completedCheck){\n                                    pendingCourses = pendingCourses + 1;\n                                }\n                                else if(!completedCheck && i == courseStrArr.length - 1){\n                                    unsatisfiedCourses = unsatisfiedCourses + 1;\n                                }     \n                            }\n                        }\n                    }\n                    else if(student.track == \"Project/Translational Bio-Informatics\"){\n                        let courses = tempDegree.json.requirements.tracks.proj_trans.courses\n                        console.log(courses);\n                        for(var course in courses){\n                            let courseStrArr = courses[course].split(\"/\")\n                            for(let i = 0; i < courseStrArr.length; i++){\n                                let completedCheck = false;\n                                for(var grade in this.state.grades){\n                                    if(courseStrArr[i] == (this.state.grades[grade].department + \" \" + this.state.grades[grade].course_num).toString() && this.state.grades[grade].StudentId == student.id)\n                                    {\n                                        if(this.state.grades[grade].grade == \"A\" || this.state.grades[grade].grade == \"B\") {\n                                            completedCourses = completedCourses + 1;\n                                            completedCheck = true;\n                                        }\n                                        else if(this.state.grades[grade].grade == \"C\"){\n                                            if(this.state.grades[grade].grade.length > 1){\n                                                if(this.state.grades[grade].grade.charAt(1) != \"-\"){\n                                                    completedCourses = completedCourses + 1\n                                                    completedCheck = true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                if(this.checkCourseInPlan(student, courseStrArr[i]) && !completedCheck){\n                                    pendingCourses = pendingCourses + 1;\n                                }\n                                else if(!completedCheck && i == courseStrArr.length - 1){\n                                    unsatisfiedCourses = unsatisfiedCourses + 1;\n                                }     \n                            }\n                        }\n                    }\n                    else if(student.track == \"Thesis/Imaging Informatics\"){\n                        let courses = tempDegree.json.requirements.tracks.thesis_imag.courses\n                        console.log(courses);\n                        for(var course in courses){\n                            let courseStrArr = courses[course].split(\"/\")\n                            for(let i = 0; i < courseStrArr.length; i++){\n                                let completedCheck = false;\n                                for(var grade in this.state.grades){\n                                    if(courseStrArr[i] == (this.state.grades[grade].department + \" \" + this.state.grades[grade].course_num).toString() && this.state.grades[grade].StudentId == student.id)\n                                    {\n                                        if(this.state.grades[grade].grade == \"A\" || this.state.grades[grade].grade == \"B\") {\n                                            completedCourses = completedCourses + 1;\n                                            completedCheck = true;\n                                        }\n                                        else if(this.state.grades[grade].grade == \"C\"){\n                                            if(this.state.grades[grade].grade.length > 1){\n                                                if(this.state.grades[grade].grade.charAt(1) != \"-\"){\n                                                    completedCourses = completedCourses + 1\n                                                    completedCheck = true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                if(this.checkCourseInPlan(student, courseStrArr[i]) && !completedCheck){\n                                    pendingCourses = pendingCourses + 1;\n                                }\n                                else if(!completedCheck && i == courseStrArr.length - 1){\n                                    unsatisfiedCourses = unsatisfiedCourses + 1;\n                                }     \n                            }\n                        }\n                    }\n                    else if(student.track == \"Project/Clinical Informatics\"){\n                        let courses = tempDegree.json.requirements.tracks.thesis_clinical.courses\n                        console.log(courses);\n                        for(var course in courses){\n                            let courseStrArr = courses[course].split(\"/\")\n                            for(let i = 0; i < courseStrArr.length; i++){\n                                let completedCheck = false;\n                                for(var grade in this.state.grades){\n                                    if(courseStrArr[i] == (this.state.grades[grade].department + \" \" + this.state.grades[grade].course_num).toString() && this.state.grades[grade].StudentId == student.id)\n                                    {\n                                        if(this.state.grades[grade].grade == \"A\" || this.state.grades[grade].grade == \"B\") {\n                                            completedCourses = completedCourses + 1;\n                                            completedCheck = true;\n                                        }\n                                        else if(this.state.grades[grade].grade == \"C\"){\n                                            if(this.state.grades[grade].grade.length > 1){\n                                                if(this.state.grades[grade].grade.charAt(1) != \"-\"){\n                                                    completedCourses = completedCourses + 1\n                                                    completedCheck = true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                if(this.checkCourseInPlan(student, courseStrArr[i]) && !completedCheck){\n                                    pendingCourses = pendingCourses + 1;\n                                }\n                                else if(!completedCheck && i == courseStrArr.length - 1){\n                                    unsatisfiedCourses = unsatisfiedCourses + 1;\n                                }     \n                            }\n                        }\n                    }\n                    else if(student.track == \"Project/Translational Bio-Informatics\"){\n                        let courses = tempDegree.json.requirements.tracks.thesis_trans.courses\n                        console.log(courses);\n                        for(var course in courses){\n                            let courseStrArr = courses[course].split(\"/\")\n                            for(let i = 0; i < courseStrArr.length; i++){\n                                let completedCheck = false;\n                                for(var grade in this.state.grades){\n                                    if(courseStrArr[i] == (this.state.grades[grade].department + \" \" + this.state.grades[grade].course_num).toString() && this.state.grades[grade].StudentId == student.id)\n                                    {\n                                        if(this.state.grades[grade].grade == \"A\" || this.state.grades[grade].grade == \"B\") {\n                                            completedCourses = completedCourses + 1;\n                                            completedCheck = true;\n                                        }\n                                        else if(this.state.grades[grade].grade == \"C\"){\n                                            if(this.state.grades[grade].grade.length > 1){\n                                                if(this.state.grades[grade].grade.charAt(1) != \"-\"){\n                                                    completedCourses = completedCourses + 1\n                                                    completedCheck = true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                if(this.checkCourseInPlan(student, courseStrArr[i]) && !completedCheck){\n                                    pendingCourses = pendingCourses + 1;\n                                }\n                                else if(!completedCheck && i == courseStrArr.length - 1){\n                                    unsatisfiedCourses = unsatisfiedCourses + 1;\n                                }     \n                            }\n                        }\n                    }\n\n                     //GPA===1 requierment\n                     let gpa = this.calcGPA(student.id)\n                     if(gpa >= tempDegree.json.requirements.gpa_requirement){\n                         completedCourses = completedCourses + 1\n                     }else {\n                         unsatisfiedCourses = unsatisfiedCourses + 1;\n                     }\n                }\n                else if(student.department.replace(/ /g,'') == \"CE\"){\n                    if(student.track == \"Non-Thesis\"){\n                        let courses = tempDegree.json.requirements.tracks.non_thesis.courses\n                        console.log(courses);\n                        for(var course in courses){\n                            let courseStrArr = courses[course].split(\"/\")\n                            for(let i = 0; i < courseStrArr.length; i++){\n                                let completedCheck = false;\n                                for(var grade in this.state.grades){\n                                    if(courseStrArr[i] == (this.state.grades[grade].department + \" \" + this.state.grades[grade].course_num).toString() && this.state.grades[grade].StudentId == student.id)\n                                    {\n                                        if(this.state.grades[grade].grade == \"A\" || this.state.grades[grade].grade == \"B\") {\n                                            completedCourses = completedCourses + 1;\n                                            completedCheck = true;\n                                        }\n                                        else if(this.state.grades[grade].grade == \"C\"){\n                                            if(this.state.grades[grade].grade.length > 1){\n                                                if(this.state.grades[grade].grade.charAt(1) != \"-\"){\n                                                    completedCourses = completedCourses + 1\n                                                    completedCheck = true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                if(this.checkCourseInPlan(student, courseStrArr[i]) && !completedCheck){\n                                    pendingCourses = pendingCourses + 1;\n                                }\n                                else if(!completedCheck && i == courseStrArr.length - 1){\n                                    unsatisfiedCourses = unsatisfiedCourses + 1;\n                                }     \n                            }\n                        }\n                    }\n                    else if(student.track == \"Thesis\"){\n                        let courses = tempDegree.json.requirements.tracks.thesis.courses\n                        console.log(courses);\n                        for(var course in courses){\n                            console.log(courses[course]);\n                            let courseStrArr = courses[course].split(\"/\")\n                            for(let i = 0; i < courseStrArr.length; i++){\n                                let completedCheck = false;\n                                for(var grade in this.state.grades){\n                                    if(courseStrArr[i] == (this.state.grades[grade].department + \" \" + this.state.grades[grade].course_num).toString() && this.state.grades[grade].StudentId == student.id)\n                                    {\n                                        if(this.state.grades[grade].grade == \"A\" || this.state.grades[grade].grade == \"B\") {\n                                            completedCourses = completedCourses + 1;\n                                            completedCheck = true;\n                                            break;\n                                        }\n                                        else if(this.state.grades[grade].grade == \"C\"){\n                                            if(this.state.grades[grade].grade.length > 1){\n                                                if(this.state.grades[grade].grade.charAt(1) != \"-\"){\n                                                    completedCourses = completedCourses + 1\n                                                    completedCheck = true;\n                                                    break;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                if(this.checkCourseInPlan(student, courseStrArr[i]) && !completedCheck){\n                                    pendingCourses = pendingCourses + 1;\n                                }\n                                else if(!completedCheck && i == courseStrArr.length - 1){\n                                    unsatisfiedCourses = unsatisfiedCourses + 1;\n                                }     \n                            }\n                        }\n                    } \n\n                     //GPA===1 requierment\n                     let gpa = this.calcGPA(student.id)\n                     if(gpa >= tempDegree.json.requirements.gpa_requirement){\n                         completedCourses = completedCourses + 1\n                     }else {\n                         unsatisfiedCourses = unsatisfiedCourses + 1;\n                     }\n                }\n                else if(student.department.replace(/ /g,'') == \"CSE\"){\n                    if(student.track == \"Basic\"){\n                        let courses = tempDegree.json.requirements.tracks.basic.courses\n                        console.log(courses);\n                        for(var course in courses){\n                            let courseStrArr = courses[course].split(\"/\")\n                            for(let i = 0; i < courseStrArr.length; i++){\n                                let completedCheck = false;\n                                for(var grade in this.state.grades){\n                                    if(courseStrArr[i] == (this.state.grades[grade].department + \" \" + this.state.grades[grade].course_num).toString() && this.state.grades[grade].StudentId == student.id)\n                                    {\n                                        if(this.state.grades[grade].grade == \"A\" || this.state.grades[grade].grade == \"B\") {\n                                            completedCourses = completedCourses + 1;\n                                            completedCheck = true;\n                                        }\n                                        else if(this.state.grades[grade].grade == \"C\"){\n                                            if(this.state.grades[grade].grade.length > 1){\n                                                if(this.state.grades[grade].grade.charAt(1) != \"-\"){\n                                                    completedCourses = completedCourses + 1\n                                                    completedCheck = true;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                if(this.checkCourseInPlan(student, courseStrArr[i]) && !completedCheck){\n                                    pendingCourses = pendingCourses + 1;\n                                }\n                                else if(!completedCheck && i == courseStrArr.length - 1){\n                                    unsatisfiedCourses = unsatisfiedCourses + 1;\n                                }     \n                            }\n                        }\n                    }\n                    else if(student.track == \"Thesis\"){\n                        let courses = tempDegree.json.requirements.tracks.thesis.courses\n                        console.log(courses);\n                        for(var course in courses){\n                            console.log(courses[course]);\n                            let courseStrArr = courses[course].split(\"/\")\n                            for(let i = 0; i < courseStrArr.length; i++){\n                                let completedCheck = false;\n                                for(var grade in this.state.grades){\n                                    if(courseStrArr[i] == (this.state.grades[grade].department + \" \" + this.state.grades[grade].course_num).toString() && this.state.grades[grade].StudentId == student.id)\n                                    {\n                                        if(this.state.grades[grade].grade == \"A\" || this.state.grades[grade].grade == \"B\") {\n                                            completedCourses = completedCourses + 1;\n                                            completedCheck = true;\n                                            break;\n                                        }\n                                        else if(this.state.grades[grade].grade == \"C\"){\n                                            if(this.state.grades[grade].grade.length > 1){\n                                                if(this.state.grades[grade].grade.charAt(1) != \"-\"){\n                                                    completedCourses = completedCourses + 1\n                                                    completedCheck = true;\n                                                    break;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                if(this.checkCourseInPlan(student, courseStrArr[i]) && !completedCheck){\n                                    pendingCourses = pendingCourses + 1;\n                                }\n                                else if(!completedCheck && i == courseStrArr.length - 1){\n                                    unsatisfiedCourses = unsatisfiedCourses + 1;\n                                }     \n                            }\n                        }\n                    }\n                    else if(student.track == \"Advanced\"){\n                        let courses = tempDegree.json.requirements.tracks.advanced.courses\n                        console.log(courses);\n                        for(var course in courses){\n                            console.log(courses[course]);\n                            let courseStrArr = courses[course].split(\"/\")\n                            for(let i = 0; i < courseStrArr.length; i++){\n                                let completedCheck = false;\n                                for(var grade in this.state.grades){\n                                    if(courseStrArr[i] == (this.state.grades[grade].department + \" \" + this.state.grades[grade].course_num).toString() && this.state.grades[grade].StudentId == student.id)\n                                    {\n                                        if(this.state.grades[grade].grade == \"A\" || this.state.grades[grade].grade == \"B\") {\n                                            completedCourses = completedCourses + 1;\n                                            completedCheck = true;\n                                            break;\n                                        }\n                                        else if(this.state.grades[grade].grade == \"C\"){\n                                            if(this.state.grades[grade].grade.length > 1){\n                                                if(this.state.grades[grade].grade.charAt(1) != \"-\"){\n                                                    completedCourses = completedCourses + 1\n                                                    completedCheck = true;\n                                                    break;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                if(this.checkCourseInPlan(student, courseStrArr[i]) && !completedCheck){\n                                    pendingCourses = pendingCourses + 1;\n                                }\n                                else if(!completedCheck && i == courseStrArr.length - 1){\n                                    unsatisfiedCourses = unsatisfiedCourses + 1;\n                                }     \n                            }\n                        }\n                    } \n\n                     //GPA===1 requierment\n                     let gpa = this.calcGPA(student.sbuID)\n                     if(gpa >= tempDegree.json.requirements.gpa_requirement){\n                         completedCourses = completedCourses + 1\n                     }else {\n                         unsatisfiedCourses = unsatisfiedCourses + 1;\n                     }\n                }  \n            }\n        }\n\n         return {completedCourses: completedCourses,\n                 pendingCourses: pendingCourses,\n                 unsatisfiedCourses: unsatisfiedCourses};\n    }\n    \n    populateRequierement =  (student) => {\n\n        var status = this.checkCompletedRequirements(student)\n        \n        console.log(status)\n\n        return (<tr  key={student.sbuID} onClick={this.editStudent.bind(this, student)}>\n        <th data-field=\"Name\">{student.User.firstName + \" \" + student.User.lastName}</th>\n        <th data-field=\"Id\">{student.sbuID}</th>\n        <th data-field=\"Email\">{student.User.email}</th>\n        <th data-field=\"Department\">{student.department}</th>\n        <th data-field=\"Track\">{student.track}</th>\n        <th data-field=\"Entry Semester\">{student.entrySemester}</th>\n        <th data-field=\"Completed Courses\">{status.completedCourses}</th>\n        <th data-field=\"Pending Courses\">{status.pendingCourses}</th>\n        <th data-field=\"Unsatisfied Courses\">{status.unsatisfiedCourses}</th>\n        </tr>)\n    }\n\n    sortStudents = (e) => {\n         console.log(\"sorting...\")\n        switch (e.target.value) {\n            case \"name\":\n                let sortedList = this.state.students.sort((a,b) => {\n                    let aFullname = a.User.firstName + a.User.lastName\n                    let bFullname = b.User.firstName + b.User.lastName\n                    \n                    aFullname = aFullname.replace(/\\s+/g, '')\n                    bFullname = bFullname.replace(/\\s+/g, '')\n\n                    return aFullname.localeCompare(bFullname)})\n\n                this.setState({students: [...sortedList]})\n                \n            break;\n\n            case \"graduation_semester\":\n                let sortedList_grad = this.state.students.sort((a,b) => {\n                    let aGradSem= a.graduation_semester\n                    let bGradSem = b.graduation_semester\n                    let aGradYear= parseInt(a.graduation_year)\n                    let bGradYear = parseInt(b.graduation_year)\n                    \n                    if (aGradSem === bGradSem){\n\n                        return aGradYear - bGradYear\n                    }else {\n\n                        if(aGradYear !== bGradYear) return aGradYear - bGradYear\n                        if(aGradSem === \"Spring\" && (bGradSem == \"Fall\" || bGradSem == \"Summer\" )) return -1\n                        if(aGradSem === \"Fall\" && (bGradSem == \"Spring\" || bGradSem == \"Summer\" )) return 1\n                        if(aGradSem === \"Summer\" && (bGradSem == \"Spring\")) return 1\n                        if(aGradSem === \"Summer\" && (bGradSem == \"Fall\")) return -1\n                        return 0\n                    }})\n                    \n\n                this.setState({students: [...sortedList_grad]})\n                break;\n        \n                    \n            case \"num_of_semesters\":\n                let sortedList_sem = this.state.students.sort((a,b) => {\n                    let aCoursePlan = a.coursePlan\n                    let bCoursePlan = b.coursePlan\n                    \n                    let aHasSemester = aCoursePlan.hasOwnProperty('semesters')\n                    let bHasSemester = bCoursePlan.hasOwnProperty('semesters')\n\n                    if (aHasSemester && !bHasSemester) return -1\n                    if (bHasSemester && !aHasSemester) return 1\n                    if (!bHasSemester && !aHasSemester) return 0\n\n                    let aNumSemesters = Object.keys(aCoursePlan.semesters).length\n                    let bNumSemesters = Object.keys(bCoursePlan.semesters).length\n                    return bNumSemesters - aNumSemesters\n                })\n\n\n\n                this.setState({students: [...sortedList_sem]})\n                break;\n                \n        \n            default:\n                break;\n        }\n    }\n\n    render(){\n        return(\n            this.state.editStudent ? <Redirect to={{pathname: \"edit_student_gpd\", state: {currentEditStudent: this.state.currentEditStudent, comments: this.state.comments}}}></Redirect> : \n            <div>\n                <NavbarGPD />\n                <div className=\"body\">\n                <Row>\n                    <Col\n                    offset=\"l10\"\n                    l={3}>\n                        <TextInput onChange={this.onChangeSearchQuery}\n                        icon=\"search\"\n                        label=\"Search\">\n                        </TextInput>\n                    </Col>\n                </Row>\n                <Row>\n                <Col offset=\"l10\"\n                    l={2}\n                    >\n                        <Button label=\"Search\" onClick={this.onClickSearchCallback}>Search</Button>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col\n                    offset=\"l10\"\n                    l={2}>\n                        <Modal\n                        actions={[<Button flat modal=\"close\" node=\"button\">Close</Button>]}\n                        header=\"Advance Search\"\n                        trigger={<Button node=\"button\" waves=\"light\"> Advanced Search </Button>}>\n                            <br></br>\n                            <label>\n                                <input type=\"checkbox\" className=\"filled-in\" checked={this.state.searchByFirsName} onChange={() => this.setState({searchByFirsName: !this.state.searchByFirsName})}/>\n                                <span>First-name</span>\n                            </label>\n                            <TextInput className=\"white\" id=\"search_firstName_input\" onChange={(e) => this.setState({searchByFirstName_input: e.target.value})}></TextInput>\n\n                            <label>\n                                <input type=\"checkbox\" className=\"filled-in\" checked={this.state.searchByLastName} onChange={() => this.setState({searchByLastName: !this.state.searchByLastName})}/>\n                                <span>Last name</span>\n                            </label>\n                            <TextInput className=\"white\" id=\"search_lastName_input\" onChange={(e) => this.setState({searchByLastName_input: e.target.value})}></TextInput>\n\n                            <label>\n                                <input type=\"checkbox\" className=\"filled-in\" checked={this.state.searchByStudentID} onChange={() => this.setState({searchByStudentID: !this.state.searchByStudentID})}/>\n                                <span>Student ID</span>\n                            </label>\n                            <TextInput className=\"white\" id=\"search_studentID_input\" onChange={(e) => this.setState({searchByStudentID_input: e.target.value})}></TextInput>\n\n\n                            <label>\n                                <input type=\"checkbox\" className=\"filled-in\" checked={this.state.searchByDepartment} onChange={() => this.setState({searchByDepartment: !this.state.searchByDepartment})}/>\n                                <span>Department</span>\n                            </label>\n                            <TextInput className=\"white\" id=\"search_department_input\" onChange={(e) => this.setState({searchByDepartment_input: e.target.value})} ></TextInput>\n\n                            <label>\n                                <input type=\"checkbox\" className=\"filled-in\" checked={this.state.searchByEmail} onChange={() => this.setState({searchByEmail: !this.state.searchByEmail})}/>\n                                <span>Email</span>\n                            </label>\n                            <TextInput className=\"white\" id=\"search_email_input\" onChange={(e) => this.setState({searchByEmail_input: e.target.value})}></TextInput>\n\n                            <label>\n                                <input type=\"checkbox\" className=\"filled-in\" checked={this.state.searchByTrack} onChange={() => this.setState({searchByTrack: !this.state.searchByTrack})}/>\n                                <span>Track</span>\n                            </label>\n                            <TextInput className=\"white\" id=\"search_track_input\" onChange={(e) => this.setState({searchByTrack_input: e.target.value})}></TextInput>\n\n                            <Button type=\"search\" modal=\"close\" onClick={this.onClickAdvanceSearch}>Submit</Button>\n                        </Modal>\n                        \n                    </Col>\n                </Row>\n                <Row>\n                    \n                    <div className=\"input-field col s4\">\n                        <select className=\"browser-default\" defaultValue=\"\" onChange={(e) => this.sortStudents(e)}>\n                            <option value=\"\" disabled >Sort By</option>\n                            <option value=\"name\">Name</option>\n                            <option value=\"graduation_semester\">Graduation Semester</option>\n                            <option value=\"num_of_semesters\">Number of Semester</option>\n                        </select>\n                    </div>\n                </Row>\n                <Table>\n                    <thead>\n                        <tr>\n                            <th data-field=\"Name\">Name</th>\n                            <th data-field=\"Id\">ID</th>\n                            <th data-field=\"Email\">Email</th>\n                            <th data-field=\"Department\">Department</th>\n                            <th data-field=\"Track\">Track</th>\n                            <th data-field=\"Entry Semester\">Entry Semester</th>\n                            <th data-field=\"Completed Courses\">Completed Courses</th>\n                            <th data-field=\"Pending Courses\">Pending Courses</th>\n                            <th data-field=\"Unsatisfied Courses\">Unsatisfied Courses</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.students.map((student) => this.populateRequierement(student))\n                        }\n                    </tbody>\n                </Table>\n                <br></br>\n                <Row>\n                    <Col\n                    offset=\"l9\"\n                    size={1}>\n                        <Modal\n                        actions={[<Button flat modal=\"close\" node=\"button\">Close</Button>]}\n                        header=\"Add Student\"\n                        trigger={<Button>Add Student</Button>}>\n                            <br></br>\n                            <span>First Name:</span>\n                            <TextInput className=\"white\" id=\"firstName\" onChange={this.onChange}></TextInput>\n                            <span>Last Name:</span>\n                            <TextInput className=\"white\" id=\"lastName\" onChange={this.onChange}></TextInput>\n                            <span>Email:</span>\n                            <TextInput className=\"white\" id=\"email\" onChange={this.onChange}></TextInput>\n                            <span>Password:</span>\n                            <TextInput className=\"white\" id=\"password\" onChange={this.onChange}></TextInput>\n                            <span>Department:</span>\n                            <TextInput className=\"white\" id=\"department\" onChange={this.onChange}></TextInput>\n                            <span>Entry Semester:</span>\n                            <TextInput className=\"white\" id=\"entrySemester\" onChange={this.onChange}></TextInput>\n                            <span>Track:</span>\n                            <TextInput className=\"white\" id=\"track\" onChange={this.onChange}></TextInput>\n                            <span>Graduation Semester:</span>\n                            <TextInput className=\"white\" id=\"graduation_semester\" onChange={this.onChange}></TextInput>\n                            <span>Graduation Year:</span>\n                            <TextInput className=\"white\" id=\"graduation_year\" onChange={this.onChange}></TextInput>\n                            <Button type=\"submit\" modal=\"close\" onClick={this.addStudentCallback}>Submit</Button>\n                        </Modal>\n                    </Col>\n                    <Col\n                    size={1}>\n                        <Button onClick={this.deleteStudentCallback}>Delete All</Button>\n                    </Col>\n                </Row>\n                </div>\n            </div>\n            \n        );\n    }\n}\n\nexport default ManageStudentsGPD","import React, { Component} from 'react'\nimport { Card, Row, Col, Navbar, TextInput, Button, Collapsible, CollapsibleItem, Table } from 'react-materialize'\nimport {Link, Redirect} from 'react-router-dom'\nimport axios from 'axios'\nimport { Checkbox } from 'react-materialize';\n\nclass EditStudentGPD extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            currentStudent: this.props.location.state.currentEditStudent,\n            userID: this.props.location.state.currentEditStudent.User.id,\n            studentID: this.props.location.state.currentEditStudent.id,\n            firstName: this.props.location.state.currentEditStudent.User.firstName,\n            lastName: this.props.location.state.currentEditStudent.User.lastName,\n            email: this.props.location.state.currentEditStudent.User.email,\n            major: this.props.location.state.currentEditStudent.department,\n            entrySemester: this.props.location.state.currentEditStudent.entrySemester,\n            track: this.props.location.state.currentEditStudent.track,\n            sbuID: this.props.location.state.currentEditStudent.sbuID,\n            coursePlan: this.props.location.state.currentEditStudent.coursePlan,\n            expectedGraduation: \"\",\n            degreeData: [],\n            comments: this.props.location.state.comments,\n            rerender: false,\n            currentComment: \"\",\n            suggestPlan: false,\n            currentCommentIndex: 0,\n            grades: []\n        };\n    }\n\n    onChange = (event) => {\n        this.setState({[event.target.id]: event.target.value});\n    }\n\n    onChangeName = (event) => {\n        let nameStr = event.target.value.split(\" \");\n        this.setState({firstName: nameStr[0], lastName: nameStr[1]});\n    }\n\n    //Is called when the confirm button in the edit student information section is pressed\n    confirmEdit = async () => {\n        let body = {userID: this.state.userID, studentID: this.state.studentID, firstName: this.state.firstName, lastName: this.state.lastName, email: this.state.email, sbuID: this.state.sbuID, major: this.state.major, entrySemester: this.state.entrySemester, track: this.state.track};        \n        let header = {\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          };    \n        axios.post(\"/api/edit_student\", body, header).catch((error) => console.log(error));\n\n        await axios.get('/api/students').catch((err) => console.log('caught', err));\n    }\n\n    confirmAddComment = async () => {\n        let newComments = this.state.comments\n        newComments.push({message: this.state.currentComment});\n        let body = {sbuID: this.state.sbuID, comment: this.state.currentComment};\n        let header = {\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          }; \n        await axios.post(\"/api/comments/add_comment\", body, header).then(this.setState({comments: newComments})).catch((err) => console.log(err));\n    }\n\n    getDegreeRequirements = async () => {\n        let degrees = await axios.get('/api/degrees').catch((err) => console.log('caught', err));\n        let degreeData = degrees.data\n        for(let i = 0; i < degreeData.length; i++){\n            let tempDegree = degreeData[i];\n            if(this.state.major.replace(/ /g,'') === tempDegree.department){\n                this.setState({\n                    degreeData: degreeData[i].json,\n                    rerender: true\n                });\n                break;\n            }\n        }\n    }\n\n    onChangeComment = async (index) => { \n        this.setState({\n            currentCommentIndex: index\n        });\n        \n    }\n\n    onDeleteComment = async () => {\n        let body = {sbuID: this.state.sbuID, currentComment: this.state.comments[this.state.currentCommentIndex]}\n        let header = {\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          }; \n        let comments = this.state.comments\n        comments.splice(this.state.currentCommentIndex, 1);\n        await axios.post(\"/api/comments/delete_comment\", body, header).then(this.setState({comments: comments})).catch((err) => console.log('caught', err));\n    }\n\n    confirmSuggestPlan = async () => {\n        this.setState({\n            suggestPlan: true\n        });\n    }\n    componentDidMount = async () => {\n        this.getDegreeRequirements();\n        this.getAllGrades();\n    }\n\n    getCompletedCourse = (course) => {\n        return this.checkCompletedCourse(course);\n    }\n\n    getAllGrades = async () => {\n        let header = {\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          }; \n        let body = {id: this.props.location.state.currentEditStudent.id}\n        console.log(body);\n        let res = await axios.post(\"/api/courses/getgrades\", body, header).catch((err) => console.log('caught error'));\n        this.setState({grades: res.data})\n    }\n\n    checkCompletedCourse = (course) => {\n        let courseStrArr = course.split(\"/\")\n        for(let i = 0; i < courseStrArr.length; i++){\n            for(var grade in this.state.grades){\n                if(courseStrArr[i] === (this.state.grades[grade].department + \" \" + this.state.grades[grade].course_num).toString())\n                {\n                    if(this.state.grades[grade].grade === \"A\" || this.state.grades[grade].grade === \"B\") {\n                        return true;\n                    }\n                    else if(this.state.grades[grade].grade === \"C\"){\n                        if(this.state.grades[grade].grade.length > 1){\n                            if(this.state.grades[grade].grade.charAt(1) !== \"-\"){\n                                return true;\n                            }\n                        }\n                        else{\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }   \n\n    checkCourseInProgress  = (arr, course) => {\n        let courseStrArr = course.split(\"/\")\n        for(let i = 0; i < courseStrArr.length; i++){\n            for(let j = 0; j < arr.length; j++){\n                let courseStr = arr[j].department + \" \" + arr[j].courseNum;\n                if(courseStrArr[i] === courseStr){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    returnTrueVal = (value) => {\n        return value;\n    }\n\n    render(){\n        let dropdown;\n        var arrCourses = [];\n        let tempCoursePlan = this.state.coursePlan\n        Object.keys(tempCoursePlan).forEach(function (key){\n            Object.keys(tempCoursePlan[key]).forEach(function (key2){\n                    Object.keys(tempCoursePlan[key][key2]).forEach(function (key3){\n                        arrCourses.push(tempCoursePlan[key][key2][key3])\n                    }) \n            })\n        });\n        if (this.state.major.replace(/ /g,'') === \"AMS\" && this.state.rerender) {\n            if(this.state.track === \"Computational Applied Mathematics\"){\n                dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.tracks.comp.courses.map((course) => {\n                            \n                            let trueVal = this.checkCompletedCourse(course);\n                            if(trueVal === true){\n                                return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else if(this.checkCourseInProgress(arrCourses, course) === true){\n                                return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else{\n                                return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                        })}\n                    </Collapsible>\n                </div>;\n            }\n            else if(this.state.track === \"Operations Research\"){\n                dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.tracks.bio.courses.map((course) => {\n                            \n                            let trueVal = this.checkCompletedCourse(course);\n                            if(trueVal === true){\n                                return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else if(this.checkCourseInProgress(arrCourses, course) === true){\n                                return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else{\n                                return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                        })}\n                    </Collapsible>\n                </div>;\n            }\n            else if(this.state.track === \"Computational Biology\"){\n                dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.tracks.op.courses.map((course) => {\n                            \n                            let trueVal = this.checkCompletedCourse(course);\n                            if(trueVal === true){\n                                return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else if(this.checkCourseInProgress(arrCourses, course) === true){\n                                return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else{\n                                return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                        })}\n                    </Collapsible>\n                </div>;\n            }\n            else if(this.state.track === \"Statistics\"){\n                dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.tracks.stats.courses.map((course) => {\n                            \n                            let trueVal = this.checkCompletedCourse(course);\n                            if(trueVal === true){\n                                return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else if(this.checkCourseInProgress(arrCourses, course) === true){\n                                return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else{\n                                return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                        })}\n                    </Collapsible>\n                </div>;\n            }\n            else if(this.state.track === \"Quanitative Finance\"){\n                dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.tracks.quan.courses.map((course) => {\n                            \n                            let trueVal = this.checkCompletedCourse(course);\n                            if(trueVal === true){\n                                return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else if(this.checkCourseInProgress(arrCourses, course) === true){\n                                return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else{\n                                return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                        })}\n                    </Collapsible>\n                </div>;\n            }\n        }\n        else if (this.state.major.replace(/ /g,'') === \"BMI\" && this.state.rerender){\n            if(this.state.track === \"Project/Imaging Informatics\"){\n                dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.tracks.proj_imag.courses.map((course) => {\n                            \n                            let trueVal = this.checkCompletedCourse(course);\n                            if(trueVal === true){\n                                return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else if(this.checkCourseInProgress(arrCourses, course) === true){\n                                return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else{\n                                return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                        })}\n                    </Collapsible>\n                </div>;\n            }\n            else if(this.state.track === \"Project/Clinical Informatics\"){\n                dropdown = <div>\n                <Collapsible class=\"disabled\">\n                    {this.state.degreeData.requirements.tracks.proj_clinical.courses.map((course) => {\n                        \n                        let trueVal = this.checkCompletedCourse(course);\n                        if(trueVal === true){\n                            return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                        }\n                        else if(this.checkCourseInProgress(arrCourses, course) === true){\n                            return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                        }\n                        else{\n                            return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                        }\n                    })}\n                </Collapsible>\n            </div>;\n            }\n            else if(this.state.track === \"Project/Translational Bio-Informatics\"){\n                dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.tracks.proj_trans.courses.map((course) => {\n                            \n                            let trueVal = this.checkCompletedCourse(course);\n                            if(trueVal === true){\n                                return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else if(this.checkCourseInProgress(arrCourses, course) === true){\n                                return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else{\n                                return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                        })}\n                    </Collapsible>\n                </div>;\n            }\n            else if(this.state.track === \"Thesis/Clinical Informatics\"){\n                dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.tracks.thesis_clinical.courses.map((course) => {\n                            \n                            let trueVal = this.checkCompletedCourse(course);\n                            if(trueVal === true){\n                                return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else if(this.checkCourseInProgress(arrCourses, course) === true){\n                                return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else{\n                                return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                        })}\n                    </Collapsible>\n                </div>;\n            }\n            else if(this.state.track === \"Thesis/Translational Bio-Informatics\"){\n                dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.tracks.thesis_trans.courses.map((course) => {\n                            \n                            let trueVal = this.checkCompletedCourse(course);\n                            if(trueVal === true){\n                                return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else if(this.checkCourseInProgress(arrCourses, course) === true){\n                                return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else{\n                                return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                        })}\n                    </Collapsible>\n                </div>;\n            }\n            else if(this.state.track === \"Thesis/Imaging Informatics\"){\n                dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.tracks.thesis_imag.courses.map((course) => {\n                            \n                            let trueVal = this.checkCompletedCourse(course);\n                            if(trueVal === true){\n                                return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else if(this.checkCourseInProgress(arrCourses, course) === true){\n                                return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else{\n                                return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                        })}\n                    </Collapsible>\n                </div>;\n            }\n        }\n        else if(this.state.major.replace(/ /g,'') === \"CSE\" && this.state.rerender){\n            if(this.state.track === \"Basic\"){\n                dropdown = <div>\n                <Collapsible class=\"disabled\">\n                    {this.state.degreeData.requirements.tracks.basic.courses.map((course) => {\n                        let completedCheck = false;\n                        let trueVal = this.checkCompletedCourse(course);\n                        if(trueVal == true){\n                            return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                        }\n                        else if(this.checkCourseInProgress(arrCourses, course) == true){\n                            return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                        }\n                        else{\n                            return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                        }\n                    })}\n                </Collapsible>\n            </div>;\n            }\n            else if(this.state.track === \"Advanced\"){\n                dropdown = <div>\n                <Collapsible class=\"disabled\">\n                    {this.state.degreeData.requirements.tracks.advanced.courses.map((course) => {\n                        let completedCheck = false;\n                        let trueVal = this.checkCompletedCourse(course);\n                        if(trueVal == true){\n                            return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                        }\n                        else if(this.checkCourseInProgress(arrCourses, course) == true){\n                            return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                        }\n                        else{\n                            return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                        }\n                    })}\n                </Collapsible>\n            </div>;\n            }\n            if(this.state.track === \"Thesis\"){\n                dropdown = <div>\n                <Collapsible class=\"disabled\">\n                    {this.state.degreeData.requirements.tracks.thesis.courses.map((course) => {\n                        let completedCheck = false;\n                        let trueVal = this.checkCompletedCourse(course);\n                        if(trueVal == true){\n                            return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                        }\n                        else if(this.checkCourseInProgress(arrCourses, course) == true){\n                            return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                        }\n                        else{\n                            return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                        }\n                    })}\n                </Collapsible>\n            </div>;\n            }\n        }\n        else if(this.state.major.replace(/ /g,'') === \"CE\" && this.state.rerender){\n            if(this.state.track === \"Non-Thesis\"){\n                dropdown = <div>\n                <Collapsible class=\"disabled\">\n                    {this.state.degreeData.requirements.tracks.non_thesis.courses.map((course) => {\n                        \n                        let trueVal = this.checkCompletedCourse(course);\n                        if(trueVal === true){\n                            return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                        }\n                        else if(this.checkCourseInProgress(arrCourses, course) === true){\n                            return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                        }\n                        else{\n                            return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                        }\n                    })}\n                </Collapsible>\n            </div>;\n            }\n            else if(this.state.track === \"Thesis\"){\n                dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.tracks.thesis.courses.map((course) => {\n                            \n                            let trueVal = this.checkCompletedCourse(course);\n                            if(trueVal === true){\n                                return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else if(this.checkCourseInProgress(arrCourses, course) === true){\n                                return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else{\n                                return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                        })}\n                    </Collapsible>\n                </div>;\n            }\n        }\n        return(\n            this.state.suggestPlan ? <Redirect to={{pathname: \"suggest_course_plan_gpd\", state: {currentEditStudent: this.state.currentStudent}}}></Redirect> :\n            <div align=\"left\">\n                <Navbar className=\"blue\"></Navbar>\n                <br></br>\n                <Row>\n                    <Col l={6}>\n                        <b>Edit Student: {this.state.firstName + \" \" + this.state.lastName}</b>\n                    </Col>\n                    <Col l={6}>\n                        <b>View/Edit Comments</b>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col l={6}>\n                        <Card className=\"blue-grey\">\n                            <Row>\n                                <Col l={6}>\n                                    <span align=\"left\" class=\"white-text\">Full Name:</span>\n                                </Col>\n                                <Col l={6}>\n                                    <span class=\"white-text\">Major:</span>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col l={6}>\n                                    <TextInput class=\"white\" onChange={this.onChangeName} value={this.state.firstName + \" \" + this.state.lastName} id =\"fullName\">\n                                    </TextInput>\n                                </Col>\n                                <Col l={6}>\n                                    <TextInput class=\"white\" onChange={this.onChange} value={this.state.major} id=\"major\">\n                                    </TextInput>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col l={6}>\n                                    <span align=\"left\" class=\"white-text\">Email:</span>\n                                </Col>\n                                <Col l={6}>\n                                    <span class=\"white-text\">Entry Semester:</span>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col l={6}>\n                                    <TextInput class=\"white\" onChange={this.onChange} value={this.state.email} id=\"email\">\n                                    </TextInput>\n                                </Col>\n                                <Col l={6}>\n                                    <TextInput class=\"white\" onChange={this.onChange} value={this.state.entrySemester} id=\"entrySemester\">\n                                    </TextInput>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col l={6}>\n                                    <span align=\"left\" class=\"white-text\">SBU ID:</span>\n                                </Col>\n                                <Col l={6}>\n                                    <span class=\"white-text\">Expected Graduation:</span>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col l={6}>\n                                    <TextInput class=\"white\" onChange={this.onChange} value={this.state.sbuID} id=\"sbuID\">\n                                    </TextInput>\n                                </Col>\n                                <Col l={6}>\n                                    <TextInput class=\"white\" onChange={this.onChange} value={this.state.expectedGraduation} id=\"expectedGraduation\"> \n                                    </TextInput>\n                                </Col>\n                            </Row>\n                            <Row>\n                            <Col l={6} offset=\"l6\">\n                                    <span align=\"left\" class=\"white-text\">Track:</span>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col l={6}>\n                                    <Button onClick={this.confirmEdit}>Confirm Changes</Button>\n                                </Col>\n                                <Col l={6}>\n                                    <TextInput class=\"white\" onChange={this.onChange} value={this.state.track} id=\"track\"> \n                                    </TextInput>\n                                </Col>\n                            </Row>\n                        </Card>\n                    </Col>\n                    <Col l=\"6\">\n                        <Card className=\"blue-grey\">\n                            <Row>\n                                <Col l={6}>\n                                    <Collapsible>\n                                        {this.state.comments.map((comment, index) =>\n                                        (<CollapsibleItem header={comment.message} onClick={this.onChangeComment.bind(this, index)}></CollapsibleItem>))}\n                                    </Collapsible>\n                                </Col>\n                                <Col><TextInput placeholder=\"Comment...\" class=\"white\" value={this.state.currentComment} onChange={this.onChange} id=\"currentComment\"></TextInput></Col>\n                            </Row>\n                            <Row>\n                                <Col l={6}>\n                                    <Button onClick={this.onDeleteComment}>Delete Comment</Button>\n                                </Col>\n                                <Col l={6}>\n                                    <Button onClick={this.confirmAddComment}>Add Comment</Button>\n                                </Col>\n                            </Row>\n                        </Card>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col l={6}>\n                        <b>Current Course Plan:</b>\n                    </Col>\n                    <Col l={6}>\n                        <b>Degree Requirements:</b>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col l={6}>\n                    <Card className=\"blue-grey\">\n                        <Row className=\"white\">\n                            <Col l={12}>\n                                <Table>\n                                    <thead>\n                                        <th>Course</th>\n                                        <th>Credits</th>\n                                        <th>Semester</th>\n                                    </thead>\n                                    <tbody>\n                                        {arrCourses.map((course) => (\n                                            <tr>\n                                                <td>{course.department + \" \" + course.courseNum}</td>\n                                                <td>{course.credits}</td>\n                                                <td>{course.semester + \" \" + course.year}</td>\n                                            </tr>\n                                        ))}\n                                    </tbody>\n                                </Table>\n                            </Col>\n                        </Row>\n                        <Button onClick={this.confirmSuggestPlan}>Suggest Course Plan</Button>\n                    </Card>\n                    </Col>\n                    <Col l={6}>\n                    <Card className=\"blue-grey\">\n                        <Row>\n                        <Col l={12}>\n                            {dropdown}\n                        </Col>\n                        </Row>\n                    </Card>\n                    </Col>    \n                </Row>\n                <br></br>\n                <Link to=\"/manage_students_gpd\">\n                    <Button>Return Home</Button>\n                </Link>\n            </div>\n            \n        );\n    }\n}\nexport default EditStudentGPD;","import axios from 'axios';\nimport React, {Component} from 'react'\nimport { Button, Card, Navbar, TextInput } from 'react-materialize'\nimport { Redirect } from 'react-router';\nimport jwt_decode from \"jwt-decode\";\n\nclass LoginScreen extends Component{\n    constructor(props){\n        super(props);\n        this.state = {user_data: this.props.data, email: \"\", password: \"\", isLogin: false, loginError: false, redirectStudent: false, redirectURL: \"/manage_students_gpd\", response: null, second_render: false}\n    }\n\n    handleChangeEmail = (event) => {\n        this.setState({email: event.target.value});\n    }\n    handleChangePassword = (event) => {\n        this.setState({password: event.target.value});\n    }\n    loginCallback = async () =>{\n        let body = {email: this.state.email, password: this.state.password};\n        let header = {\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          };  \n        await axios.post(\"/api/auth/\", body, header).then((res) =>  {\n            if(res.data.hasOwnProperty(\"token\")){\n                const payload = jwt_decode(res.data.token);\n                if(payload.isStudent === true){\n                    this.state.redirectStudent = true;\n                    this.setState({isLogin: true, loginError: false, redirectURL:\"/student_info_stu\", email: this.state.email})\n                    console.log(this.state.redirectURL)\n                }\n                else{\n                    this.setState({isLogin: true, loginError: false})\n                }\n            }\n            else{\n                this.setState({loginError: true})\n            }}).catch((error) => this.setState({loginError: true}));\n    }\n    render(){\n        return(\n            <div align=\"left\">\n                {this.state.isLogin ? <Redirect push to={{pathname: this.state.redirectURL, state: {email: this.state.email}}}></Redirect> : \n                <div>\n                <Navbar className=\"blue\" brand={<a className=\"brand-logo\" href=\"/\">MAST</a>}>   \n                </Navbar>\n                <br></br>\n                <Card className=\"blue-grey\">\n                    <span className=\"white-text\"><b>Username:</b></span>\n                    <TextInput className=\"white\" onChange={this.handleChangeEmail} value={this.state.email}></TextInput>\n                    <span className=\"white-text\"><b>Password:</b></span>                    \n                    <TextInput className=\"white\" onChange={this.handleChangePassword} value={this.state.password} password></TextInput>\n                    <Button onClick={this.loginCallback}>Login</Button>\n                </Card>\n                <br></br>\n                <div>\n                {this.state.loginError ? \n                (<Card className=\"red\">\n                    <span className=\"black-text\">Invalid Credentials.</span>\n                </Card>) : <br></br>}\n                </div></div>}\n            </div>\n        );\n    }\n}\n\nexport default LoginScreen;","import React, { Component} from 'react'\nimport NavbarGPD from './NavbarGPD'\nimport {VictoryChart, VictoryGroup, VictoryLabel, VictoryAxis, VictoryLine, VictoryLegend} from 'victory';\nimport axios from 'axios'\nimport Select from 'react-select'\nimport formData from 'form-data'\n\n\nclass EnrollmentTrendsGPD extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            //selectedDepartment: \"CSE\",\n            selectedDepartment: \"\",\n            selectedCourses: [],\n            selectedSemesters: [],\n\n            departmentOptions: [\n                { label: 'CSE', value: 'CSE' },\n                { label: 'AMS', value: 'AMS' },\n                { label: 'CE', value: 'CE' },\n                { label: 'BMI', value: 'BMI' },\n            ],\n\n            semesterOptions: [ \n                //the value is the (year * 10) + (1 if Fall) (0 if spring)\n                //only works for years 2000+, the higher the val the more recent the sem\n                { label: 'F15', value: 151 },\n                { label: 'S16', value: 160 },\n                { label: 'F16', value: 161 },\n                { label: 'S17', value: 170 },\n                { label: 'F17', value: 171 },\n                { label: 'S18', value: 180 },\n                { label: 'F18', value: 181 },\n                { label: 'S19', value: 190 },\n                { label: 'F19', value: 191 },\n                { label: 'S20', value: 200 },\n                { label: 'F20', value: 201 },\n                { label: 'S21', value: 211 }\n            ],\n\n            courseOptions: [],\n            selectedSemData: [],\n            selectedCourseData: [],\n\n            courseData: [],\n\n            tempCourseHolder: [],\n\n            graphData: [],\n\n            graphLegend: [],\n\n            startSem: \"\",\n            endSem: \"\",\n\n        }\n    }\n\n    onChangeSemester = (event) => {\n        //Update semesters picked\n        var tempSem = []\n        event.forEach(function(semes) {\n            tempSem.push(semes.label)\n        });\n        this.setState({ selectedSemesters: event, selectedSemData: tempSem}, () => \n            {this.loadOptions()}); \n    }\n\n    onChangeDepartment = (event) => {\n        //Update department and reload course options\n        this.setState({ selectedDepartment: event.value}, () => \n            {this.loadOptions()}); \n    }\n\n    onChangeCourses = (event) => {\n        //Update selected courses\n        var tempCNs = []\n        event.forEach(function(semes) {\n            let str = semes.label\n            str = str.substring(str.length - 3)\n\n            tempCNs.push(parseInt(str));\n        });\n\n        this.setState({ selectedCourses: event, tempCourseHolder : tempCNs}, () => \n            {this.updateGraph()}); \n    }\n\n    updateGraph = () => {\n        let dept = this.state.selectedDepartment;\n\n        //Numerical values representing the selected courses [num, num, ...]\n        let temp = this.state.tempCourseHolder; \n            \n        //Data for all courses that satisfy degree and semester options{[courseNum, sem, totaltudents][...]...}\n        let allcrsinfo = this.state.courseData;    \n\n        let master = []\n        let tempLegend = []\n        temp.forEach(function(courseNum) {  //For each selected course\n            let tempGraphData = [];\n            allcrsinfo.forEach(function(crs) {  //For each course in masterlist that satisfies sem and degree\n\n                if (crs.courseNumber === courseNum) {\n                    let strtemp = crs.semester;\n\n                    //sem to int conversion\n                    let val = 0;\n                    let fs = strtemp.substring(0, 1);\n                    let yr = strtemp.substring(strtemp.length - 2);\n                    val = parseInt(yr) * 10;\n\n                    if (fs === 'F') {\n                        val += 1\n                    } \n\n                    let tempnum = crs.totalStudents;\n                    tempGraphData.push({ x: val, y: tempnum})\n                }\n            });\n            tempLegend.push({ name: (dept + ' ' + courseNum )});\n\n            master.push(tempGraphData)\n        });\n        this.setState({graphData: master, graphLegend : tempLegend}, () => \n        {this.loadOptions()}); \n    }\n\n\n    loadOptions = async () => {\n        //Loads the courses from the database based off of the current state options\n        if (this.state.selectedDepartment.length === 0 || this.state.selectedSemesters.length === 0) {\n            //Dep or sem has not been chosen, Do Nothing\n        } else {\n            let dept = this.state.selectedDepartment;\n\n            const body = new formData()\n            body.append('department', this.state.selectedDepartment)\n            body.append('courselist', this.state.selectedCourseData)\n            body.append('semesters', this.state.selectedSemData)\n\n            var courses = await axios.post('/api/courses/courselist', body).catch((err) => console.log('caught it'));\n            let x = Array.from(courses.data);\n\n            dept = this.state.selectedDepartment;\n\n            //Array that contains the course numbers for all courses that satisfy sem/dept options\n            let strArray = []\n            var i;\n            for (i = 0; i < x.length; i++) {\n                let num = x[i].courseNumber\n                strArray.push(num)\n            }\n\n            //No need for duplicates in select options\n            let tempOptionsArray = []\n            var alreadySeen = [];\n            strArray.forEach(function(str) {\n                if (alreadySeen[str]) {\n                } else {\n                    alreadySeen[str] = true;\n                    tempOptionsArray.push({ label: (dept + ' ' + str ), value: str })\n                }\n            });\n\n                this.setState({courseOptions : tempOptionsArray, courseData : x}); \n        }\n    }\n\n    async componentDidMount() {\n        this.loadOptions()\n    }\n\n    render(){\n        const items = this.state.graphData.map(e => <VictoryLine data={e}/>);\n        return(\n            <div>\n                <NavbarGPD />\n                <div className = \"row\"></div>\n                <div className = \"row\">\n                    <Select\n                        isMulti\n                        placeholder=\"Select Semester(s)\"\n                        options={this.state.semesterOptions}\n                        className=\"col s4\"\n                        onChange={e => this.onChangeSemester(e)}\n                    />\n                    <Select\n                        isMulti={false}\n                        placeholder=\"Select a Department\"\n                        options={this.state.departmentOptions}\n                        className=\"col s4\"\n                        onChange={e => this.onChangeDepartment(e)}\n                    />\n                    <Select\n                        isMulti\n                        placeholder=\"Select Courses...\"\n                        isDisabled={this.state.selectedDepartment.length === 0 || this.state.selectedSemesters.length === 0}\n                        options={this.state.courseOptions}\n                        className=\"col s4\"\n                        onChange={e => this.onChangeCourses(e)}\n                    />\n                </div>\n                <div className = \"row\">\n                </div>\n                <VictoryChart>\n                    <VictoryLabel text=\"Enrollment Trends\" x={225} y={20} textAnchor=\"middle\"/>\n                    <VictoryAxis domain={[0, 20]} dependentAxis label=\"# of Students\"/>\n                    <VictoryAxis  \n                    />\n                    <VictoryLegend x={325} y={20}\n                        title=\"Legend\"\n                        centerTitle\n                        orientation=\"horizontal\"\n                        gutter={20}\n                        style={{ border: { stroke: \"black\" }, title: {fontSize: 20 } }}\n                        data={this.state.graphLegend}\n                    />\n                    <VictoryGroup offset={20}\n                        colorScale={\"qualitative\"}\n                    >\n                        {items}\n                    </VictoryGroup>\n                </VictoryChart>\n            </div>\n        );\n    }\n}\n\nexport default EnrollmentTrendsGPD","import React, { Component} from 'react'\nimport { Navbar, NavItem} from 'react-materialize'\nimport '../style.css'\nimport {Link} from 'react-router-dom'\nclass NavbarStudent extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            currentClicked: null\n        };\n    }\n\n    render(){\n        return(\n            <Navbar\n            alignLinks=\"right\"\n            brand={<a className=\"brand-logo\" href=\"/\">MAST</a>}\n            className = \"blue\"\n            options={{edge: 'left', preventScrolling: true}}>\n            <Link to=\"/\"><NavItem>Logout</NavItem></Link>\n            </Navbar>\n        )\n    }\n\n}\n\nexport default NavbarStudent","import React, { Component} from 'react'\nimport { Card, Row, Col, TextInput, Button, Collapsible, CollapsibleItem, Table, Checkbox, Navbar } from 'react-materialize'\nimport axios from 'axios'\nimport NavbarStudent from './NavbarStudent';\nimport { Redirect } from 'react-router';\nimport { Link } from 'react-router-dom';\n\nclass StudentInfo extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            currentStudent: \"\",\n            firstName: \"\",\n            lastName: \"\",\n            email: this.props.location.state.email,\n            major: \"\",\n            entrySemester: \"\",\n            track: \"\",\n            sbuID: \"\",\n            expectedGraduation: \"\",\n            rerender: false, \n            degreeData: [],\n            comments: [],\n            coursePlan: {},\n        };\n    }\n        \n    onChange = (event) => {\n            this.setState({[event.target.id]: event.target.value});\n        }\n        onChangeName = (event) => {\n            let nameStr = event.target.value.split(\" \");\n            this.setState({firstName: nameStr[0], lastName: nameStr[1]});\n        }\n\n\n        confirmAddComment = async () => {\n            let newComments = this.state.comments\n            console.log(this.state.currentComment);\n            newComments.push({message: this.state.currentComment});\n            console.log(newComments);\n            let body = {sbuID: this.state.sbuID, comment: this.state.currentComment};\n            let header = {\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                },\n              }; \n            await axios.post(\"/api/comments/add_comment\", body, header).then(this.setState({comments: newComments})).catch((err) => console.log(err));\n        }\n\n        findStudent = async () => {\n            console.log(this.props.location.state.email);\n            let body = {email: this.props.location.state.email}\n            console.log(body);\n            let res = await axios.post(\"/api/students/find_student\", body).catch((err) => console.log('caught', err));\n            let people = res.data;\n            console.log(people);\n            this.setState({\n                currentStudent: people.student,\n                firstName: people.user.firstName,\n                lastName: people.user.lastName,\n                major: people.student.department,\n                entrySemester: people.student.entrySemester,\n                track: people.student.track,\n                sbuID: people.student.sbuID,\n                comments: people.comments,\n                coursePlan: people.coursePlan\n            });\n        }   \n\n        onChange = (event) => {\n            this.setState({[event.target.id]: event.target.value});\n        }\n    \n        onChangeName = (event) => {\n            let nameStr = event.target.value.split(\" \");\n            this.setState({firstName: nameStr[0], lastName: nameStr[1]});\n        }\n    \n        //Is called when the confirm button in the edit student information section is pressed\n        confirmEdit = async () => {\n            let body = {userID: this.state.userID, studentID: this.state.studentID, firstName: this.state.firstName, lastName: this.state.lastName, email: this.state.email, sbuID: this.state.sbuID, major: this.state.major, entrySemester: this.state.entrySemester, track: this.state.track};        \n            let header = {\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                },\n              };    \n            axios.post(\"/api/edit_student\", body, header).catch((error) => console.log(error));\n    \n            await axios.get('/api/students').catch((err) => console.log('caught', err));\n        }\n    \n        confirmAddComment = async () => {\n            let newComments = this.state.comments\n            newComments.push({message: this.state.currentComment});\n            let body = {sbuID: this.state.sbuID, comment: this.state.currentComment};\n            let header = {\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                },\n              }; \n            await axios.post(\"/api/comments/add_comment\", body, header).then(this.setState({comments: newComments})).catch((err) => console.log(err));\n        }\n    \n        getDegreeRequirements = async () => {\n            let degrees = await axios.get('/api/degrees').catch((err) => console.log('caught', err));\n            let degreeData = degrees.data\n            for(let i = 0; i < degreeData.length; i++){\n                let tempDegree = degreeData[i];\n                if(this.state.major.replace(/ /g,'') === tempDegree.department){\n                    this.setState({\n                        degreeData: degreeData[i].json,\n                        rerender: true\n                    });\n                    break;\n                }\n            }\n        }\n    \n        onChangeComment = async (index) => { \n            this.setState({\n                currentCommentIndex: index\n            });\n            \n        }\n    \n        onDeleteComment = async () => {\n            let body = {sbuID: this.state.sbuID, currentComment: this.state.comments[this.state.currentCommentIndex]}\n            let header = {\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                },\n              }; \n            let comments = this.state.comments\n            comments.splice(this.state.currentCommentIndex, 1);\n            await axios.post(\"/api/comments/delete_comment\", body, header).then(this.setState({comments: comments})).catch((err) => console.log('caught', err));\n        }\n    \n        confirmSuggestPlan = async () => {\n            this.setState({\n                suggestPlan: true\n            });\n        }\n        componentDidMount = async () => {\n            await this.findStudent();\n            await this.getDegreeRequirements();\n            await this.getAllGrades();\n        }\n    \n        getCompletedCourse = (course) => {\n            return this.checkCompletedCourse(course);\n        }\n    \n        getAllGrades = async () => {\n            let header = {\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                },\n              }; \n            let body = {id: this.state.currentStudent.id}\n            console.log(body);\n            let res = await axios.post(\"/api/courses/getgrades\", body, header).catch((err) => console.log('caught error'));\n            this.setState({grades: res.data})\n        }\n    \n        checkCompletedCourse = (course) => {\n            let courseStrArr = course.split(\"/\")\n            for(let i = 0; i < courseStrArr.length; i++){\n                for(var grade in this.state.grades){\n                    if(courseStrArr[i] === (this.state.grades[grade].department + \" \" + this.state.grades[grade].course_num).toString())\n                    {\n                        if(this.state.grades[grade].grade === \"A\" || this.state.grades[grade].grade === \"B\") {\n                            return true;\n                        }\n                        else if(this.state.grades[grade].grade === \"C\"){\n                            if(this.state.grades[grade].grade.length > 1){\n                                if(this.state.grades[grade].grade.charAt(1) !== \"-\"){\n                                    return true;\n                                }\n                            }\n                            else{\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }   \n    \n        checkCourseInProgress  = (arr, course) => {\n            let courseStrArr = course.split(\"/\")\n            for(let i = 0; i < courseStrArr.length; i++){\n                for(let j = 0; j < arr.length; j++){\n                    let courseStr = arr[j].department + \" \" + arr[j].courseNum;\n                    if(courseStrArr[i] === courseStr){\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n    \n        returnTrueVal = (value) => {\n            return value;\n        }\n\n        render(){\n            let dropdown;\n            var arrCourses = [];\n            let tempCoursePlan = this.state.coursePlan\n            if(tempCoursePlan){\n                Object.keys(tempCoursePlan).forEach(function (key){\n                    Object.keys(tempCoursePlan[key]).forEach(function (key2){\n                            Object.keys(tempCoursePlan[key][key2]).forEach(function (key3){\n                                arrCourses.push(tempCoursePlan[key][key2][key3])\n                            }) \n                    })\n                });\n            }\n            if (this.state.major.replace(/ /g,'') === \"AMS\" && this.state.rerender) {\n                if(this.state.track === \"Computational Applied Mathematics\"){\n                    dropdown = <div>\n                        <Collapsible class=\"disabled\">\n                            {this.state.degreeData.requirements.tracks.comp.courses.map((course) => {\n                                \n                                let trueVal = this.checkCompletedCourse(course);\n                                if(trueVal === true){\n                                    return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                                else if(this.checkCourseInProgress(arrCourses, course) === true){\n                                    return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                                else{\n                                    return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                            })}\n                        </Collapsible>\n                    </div>;\n                }\n                else if(this.state.track === \"Operations Research\"){\n                    dropdown = <div>\n                        <Collapsible class=\"disabled\">\n                            {this.state.degreeData.requirements.tracks.bio.courses.map((course) => {\n                                \n                                let trueVal = this.checkCompletedCourse(course);\n                                if(trueVal === true){\n                                    return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                                else if(this.checkCourseInProgress(arrCourses, course) === true){\n                                    return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                                else{\n                                    return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                            })}\n                        </Collapsible>\n                    </div>;\n                }\n                else if(this.state.track === \"Computational Biology\"){\n                    dropdown = <div>\n                        <Collapsible class=\"disabled\">\n                            {this.state.degreeData.requirements.tracks.op.courses.map((course) => {\n                                \n                                let trueVal = this.checkCompletedCourse(course);\n                                if(trueVal === true){\n                                    return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                                else if(this.checkCourseInProgress(arrCourses, course) === true){\n                                    return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                                else{\n                                    return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                            })}\n                        </Collapsible>\n                    </div>;\n                }\n                else if(this.state.track === \"Statistics\"){\n                    dropdown = <div>\n                        <Collapsible class=\"disabled\">\n                            {this.state.degreeData.requirements.tracks.stats.courses.map((course) => {\n                                \n                                let trueVal = this.checkCompletedCourse(course);\n                                if(trueVal === true){\n                                    return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                                else if(this.checkCourseInProgress(arrCourses, course) === true){\n                                    return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                                else{\n                                    return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                            })}\n                        </Collapsible>\n                    </div>;\n                }\n                else if(this.state.track === \"Quanitative Finance\"){\n                    dropdown = <div>\n                        <Collapsible class=\"disabled\">\n                            {this.state.degreeData.requirements.tracks.quan.courses.map((course) => {\n                                \n                                let trueVal = this.checkCompletedCourse(course);\n                                if(trueVal === true){\n                                    return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                                else if(this.checkCourseInProgress(arrCourses, course) === true){\n                                    return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                                else{\n                                    return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                            })}\n                        </Collapsible>\n                    </div>;\n                }\n            }\n            else if (this.state.major.replace(/ /g,'') === \"BMI\" && this.state.rerender){\n                if(this.state.track === \"Project/Imaging Informatics\"){\n                    dropdown = <div>\n                        <Collapsible class=\"disabled\">\n                            {this.state.degreeData.requirements.tracks.proj_imag.courses.map((course) => {\n                                \n                                let trueVal = this.checkCompletedCourse(course);\n                                if(trueVal === true){\n                                    return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                                else if(this.checkCourseInProgress(arrCourses, course) === true){\n                                    return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                                else{\n                                    return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                            })}\n                        </Collapsible>\n                    </div>;\n                }\n                else if(this.state.track === \"Project/Clinical Informatics\"){\n                    dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.tracks.proj_clinical.courses.map((course) => {\n                            \n                            let trueVal = this.checkCompletedCourse(course);\n                            if(trueVal === true){\n                                return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else if(this.checkCourseInProgress(arrCourses, course) === true){\n                                return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else{\n                                return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                        })}\n                    </Collapsible>\n                </div>;\n                }\n                else if(this.state.track === \"Project/Translational Bio-Informatics\"){\n                    dropdown = <div>\n                        <Collapsible class=\"disabled\">\n                            {this.state.degreeData.requirements.tracks.proj_trans.courses.map((course) => {\n                                \n                                let trueVal = this.checkCompletedCourse(course);\n                                if(trueVal === true){\n                                    return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                                else if(this.checkCourseInProgress(arrCourses, course) === true){\n                                    return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                                else{\n                                    return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                            })}\n                        </Collapsible>\n                    </div>;\n                }\n                else if(this.state.track === \"Thesis/Clinical Informatics\"){\n                    dropdown = <div>\n                        <Collapsible class=\"disabled\">\n                            {this.state.degreeData.requirements.tracks.thesis_clinical.courses.map((course) => {\n                                \n                                let trueVal = this.checkCompletedCourse(course);\n                                if(trueVal === true){\n                                    return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                                else if(this.checkCourseInProgress(arrCourses, course) === true){\n                                    return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                                else{\n                                    return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                            })}\n                        </Collapsible>\n                    </div>;\n                }\n                else if(this.state.track === \"Thesis/Translational Bio-Informatics\"){\n                    dropdown = <div>\n                        <Collapsible class=\"disabled\">\n                            {this.state.degreeData.requirements.tracks.thesis_trans.courses.map((course) => {\n                                \n                                let trueVal = this.checkCompletedCourse(course);\n                                if(trueVal === true){\n                                    return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                                else if(this.checkCourseInProgress(arrCourses, course) === true){\n                                    return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                                else{\n                                    return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                            })}\n                        </Collapsible>\n                    </div>;\n                }\n                else if(this.state.track === \"Thesis/Imaging Informatics\"){\n                    dropdown = <div>\n                        <Collapsible class=\"disabled\">\n                            {this.state.degreeData.requirements.tracks.thesis_imag.courses.map((course) => {\n                                \n                                let trueVal = this.checkCompletedCourse(course);\n                                if(trueVal === true){\n                                    return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                                else if(this.checkCourseInProgress(arrCourses, course) === true){\n                                    return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                                else{\n                                    return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                            })}\n                        </Collapsible>\n                    </div>;\n                }\n            }\n            else if(this.state.major.replace(/ /g,'') === \"CSE\" && this.state.rerender){\n                if(this.state.track === \"Basic\"){\n                    dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.tracks.basic.courses.map((course) => {\n                            let completedCheck = false;\n                            let trueVal = this.checkCompletedCourse(course);\n                            if(trueVal == true){\n                                return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else if(this.checkCourseInProgress(arrCourses, course) == true){\n                                return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else{\n                                return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                        })}\n                    </Collapsible>\n                </div>;\n                }\n                else if(this.state.track === \"Advanced\"){\n                    dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.tracks.advanced.courses.map((course) => {\n                            let completedCheck = false;\n                            let trueVal = this.checkCompletedCourse(course);\n                            if(trueVal == true){\n                                return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else if(this.checkCourseInProgress(arrCourses, course) == true){\n                                return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else{\n                                return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                        })}\n                    </Collapsible>\n                </div>;\n                }\n                if(this.state.track === \"Thesis\"){\n                    dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.tracks.thesis.courses.map((course) => {\n                            let completedCheck = false;\n                            let trueVal = this.checkCompletedCourse(course);\n                            if(trueVal == true){\n                                return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else if(this.checkCourseInProgress(arrCourses, course) == true){\n                                return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else{\n                                return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                        })}\n                    </Collapsible>\n                </div>;\n                }\n            }\n            else if(this.state.major.replace(/ /g,'') === \"CE\" && this.state.rerender){\n                if(this.state.track === \"Non-Thesis\"){\n                    dropdown = <div>\n                    <Collapsible class=\"disabled\">\n                        {this.state.degreeData.requirements.tracks.non_thesis.courses.map((course) => {\n                            \n                            let trueVal = this.checkCompletedCourse(course);\n                            if(trueVal === true){\n                                return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else if(this.checkCourseInProgress(arrCourses, course) === true){\n                                return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                            else{\n                                return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                            }\n                        })}\n                    </Collapsible>\n                </div>;\n                }\n                else if(this.state.track === \"Thesis\"){\n                    dropdown = <div>\n                        <Collapsible class=\"disabled\">\n                            {this.state.degreeData.requirements.tracks.thesis.courses.map((course) => {\n                                \n                                let trueVal = this.checkCompletedCourse(course);\n                                if(trueVal === true){\n                                    return <CollapsibleItem icon={<Checkbox checked disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                                else if(this.checkCourseInProgress(arrCourses, course) === true){\n                                    return <CollapsibleItem icon={<Checkbox indeterminate disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                                else{\n                                    return <CollapsibleItem icon={<Checkbox disabled id={course}/>} header={course}></CollapsibleItem>\n                                }\n                            })}\n                        </Collapsible>\n                    </div>;\n                }\n            }\n            return(\n                this.state.suggestPlan ? <Redirect to={{pathname: \"suggest_course_plan_stu\", state: {currentEditStudent: this.state.currentStudent, email: this.state.email}}}></Redirect> :\n                <div align=\"left\">\n                    <NavbarStudent />\n                    <br></br>\n                    <Row>\n                        <Col l={6}>\n                            <b>Edit Student: {this.state.firstName + \" \" + this.state.lastName}</b>\n                        </Col>\n                        <Col l={6}>\n                            <b>View/Edit Comments</b>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col l={6}>\n                            <Card className=\"blue-grey\">\n                                <Row>\n                                    <Col l={6}>\n                                        <span align=\"left\" class=\"white-text\">Full Name:</span>\n                                    </Col>\n                                    <Col l={6}>\n                                        <span class=\"white-text\">Major:</span>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col l={6}>\n                                        <TextInput class=\"white\" onChange={this.onChangeName} value={this.state.firstName + \" \" + this.state.lastName} id =\"fullName\">\n                                        </TextInput>\n                                    </Col>\n                                    <Col l={6}>\n                                        <TextInput class=\"white\" onChange={this.onChange} value={this.state.major} id=\"major\">\n                                        </TextInput>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col l={6}>\n                                        <span align=\"left\" class=\"white-text\">Email:</span>\n                                    </Col>\n                                    <Col l={6}>\n                                        <span class=\"white-text\">Entry Semester:</span>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col l={6}>\n                                        <TextInput class=\"white\" onChange={this.onChange} value={this.state.email} id=\"email\">\n                                        </TextInput>\n                                    </Col>\n                                    <Col l={6}>\n                                        <TextInput class=\"white\" onChange={this.onChange} value={this.state.entrySemester} id=\"entrySemester\">\n                                        </TextInput>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col l={6}>\n                                        <span align=\"left\" class=\"white-text\">SBU ID:</span>\n                                    </Col>\n                                    <Col l={6}>\n                                        <span class=\"white-text\">Expected Graduation:</span>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col l={6}>\n                                        <TextInput class=\"white\" disabled onChange={this.onChange} value={this.state.sbuID} id=\"sbuID\">\n                                        </TextInput>\n                                    </Col>\n                                    <Col l={6}>\n                                        <TextInput class=\"white\" onChange={this.onChange} value={this.state.expectedGraduation} id=\"expectedGraduation\"> \n                                        </TextInput>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                <Col l={6} offset=\"l6\">\n                                        <span align=\"left\" class=\"white-text\">Track:</span>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col l={6}>\n                                        <Button onClick={this.confirmEdit}>Confirm Changes</Button>\n                                    </Col>\n                                    <Col l={6}>\n                                        <TextInput class=\"white\" onChange={this.onChange} value={this.state.track} id=\"track\"> \n                                        </TextInput>\n                                    </Col>\n                                </Row>\n                            </Card>\n                        </Col>\n                        <Col l=\"6\">\n                            <Card className=\"blue-grey\">\n                                <Row>\n                                    <Col l={6}>\n                                        <Collapsible>\n                                            {this.state.comments.map((comment, index) =>\n                                            (<CollapsibleItem header={comment.message} onClick={this.onChangeComment.bind(this, index)}></CollapsibleItem>))}\n                                        </Collapsible>\n                                    </Col>\n                                    <Col><TextInput placeholder=\"Comment...\" class=\"white\" value={this.state.currentComment} onChange={this.onChange} id=\"currentComment\"></TextInput></Col>\n                                </Row>\n                                <Row>\n                                    <Col l={6}>\n                                    </Col>\n                                    <Col l={6}>\n                                        <Button onClick={this.confirmAddComment}>Add Comment</Button>\n                                    </Col>\n                                </Row>\n                            </Card>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col l={6}>\n                            <b>Current Course Plan:</b>\n                        </Col>\n                        <Col l={6}>\n                            <b>Degree Requirements:</b>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col l={6}>\n                        <Card className=\"blue-grey\">\n                            <Row className=\"white\">\n                                <Col l={12}>\n                                    <Table>\n                                        <thead>\n                                            <th>Course</th>\n                                            <th>Credits</th>\n                                            <th>Semester</th>\n                                        </thead>\n                                        <tbody>\n                                            {arrCourses.map((course) => (\n                                                <tr>\n                                                    <td>{course.department + \" \" + course.courseNum}</td>\n                                                    <td>{course.credits}</td>\n                                                    <td>{course.semester + \" \" + course.year}</td>\n                                                </tr>\n                                            ))}\n                                        </tbody>\n                                    </Table>\n                                </Col>\n                            </Row>\n                            <Button onClick={this.confirmSuggestPlan}>Suggest Course Plan</Button>\n                        </Card>\n                        </Col>\n                        <Col l={6}>\n                        <Card className=\"blue-grey\">\n                            <Row>\n                            <Col l={12}>\n                                {dropdown}\n                            </Col>\n                            </Row>\n                        </Card>\n                        </Col>    \n                    </Row>\n                    <br></br>\n                </div>\n                \n            );\n        }\n    }\n    export default StudentInfo;","import React, { Component, Fragment} from 'react'\nimport {Button} from 'react-materialize'\nimport '../style.css'\nimport NavbarGPD from './NavbarGPD';\nimport {DropzoneAreaBase} from 'material-ui-dropzone'\nimport axios from 'axios'\nimport formData from 'form-data'\nimport Select from 'react-select'\n\nclass UploadFileGPD extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            files: [],\n            studentCoursePlan: [],\n            upload_type: '',\n\n            departmentOptions: [\n                { label: 'CSE', value: 'CSE' },\n                { label: 'AMS', value: 'AMS' },\n                { label: 'CE', value: 'CE' },\n                { label: 'BMI', value: 'BMI' },\n            ],\n\n            semesterOptions: [ \n                //the value is the (year * 10) + (1 if Fall) (0 if spring)\n                //only works for years 2000+, the higher the val the more recent the sem\n                { label: 'F15', value: 151 },\n                { label: 'S16', value: 160 },\n                { label: 'F16', value: 161 },\n                { label: 'S17', value: 170 },\n                { label: 'F17', value: 171 },\n                { label: 'S18', value: 180 },\n                { label: 'F18', value: 181 },\n                { label: 'S19', value: 190 },\n                { label: 'F19', value: 191 },\n                { label: 'S20', value: 200 },\n                { label: 'F20', value: 201 },\n                { label: 'S21', value: 211 }\n            ],\n\n            selectedSemester: \"\",\n            selectedDepartment: \"\",\n        };\n    }\n\n    onSubmitCourseOfferings = async () => {\n\n        if (this.state.files.length < 1) return \n        const body = new formData()\n        body.append('file', this.state.files[0])\n\n        console.log(body)\n        await axios.post(\"/api/uploadfiles/course\", body).catch((error) => console.log(error));\n    }\n\n    onSubmitDegreeRequirements = async () => {\n        if(this.state.files.length < 1) return\n        const body = new formData()\n        body.append('file', this.state.files[0])\n        \n        console.log(body)\n        console.log(this.state.files[0])\n        await axios.post(\"/api/uploadfiles/degree_req\", body).catch((error) => console.log(error));\n    }\n\n    onSubmitCourseInformation = async () => {\n        if (this.state.files.length < 1) return \n        const body = new formData()\n        body.append('file', this.state.files[0])   \n        body.append('sem', this.state.selectedSemester)   \n        body.append('dept', this.state.selectedDepartment)   \n                  \n        await axios.post(\"/api/uploadfiles/course_info\", body).catch((error) => console.log(error));\n    }\n\n    onSubmitStudentData = async () => {\n        if (this.state.files.length < 1 || this.state.studentCoursePlan.length < 1) return \n        const body = new formData()\n        body.append('studentProfile', this.state.files[0])\n        // body.append(\"studentCoursePlan\", this.state.studentCoursePlan[0])\n\n        console.log(body)\n        await axios.post(\"/api/uploadfiles/student_data\", body).catch((error) => console.log(error));\n\n        const course_data_body = new formData()\n        course_data_body.append(\"studentCoursePlan\", this.state.studentCoursePlan[0])\n        await axios.post(\"/api/uploadfiles/student_course_data\", course_data_body).catch((error) => console.log(error));\n    }\n    \n    onSubmitStudentGrades = async () => {\n        if(this.state.files.length < 1) return\n        const body = new formData()\n        body.append('gradesObj', this.state.files[0])\n\n        console.log(body)\n        await axios.post(\"/api/uploadfiles/student_grades\", body).catch((error) => console.log(error));\n    }\n    \n    onSubmit = () => {\n        switch (this.state.upload_type) {\n            case 'CouseOfferings':\n                this.onSubmitCourseOfferings()\n                break;\n            case 'DegreeRequirements':\n                this.onSubmitDegreeRequirements()\n                break;\n            case 'StudentData':\n                this.onSubmitStudentData()\n                break;\n            case 'CourseInformation':\n                this.onSubmitCourseInformation() \n                break;\n            case 'StudentGrades':\n                this.onSubmitStudentGrades()\n                break;\n            default:\n                break;\n        }\n    }\n\n    render(){\n        return(\n            <div>\n                <NavbarGPD />\n                <div className=\"input-field col s4\">\n                    <select className=\"browser-default\" defaultValue=\"\" onChange={(e) => this.setState({upload_type: e.target.value})}>\n                        <option value=\"\" disabled >Choose your option</option>\n                        <option value=\"CouseOfferings\">Couse Offerings</option>\n                        <option value=\"DegreeRequirements\">Degree Requirements</option>\n                        <option value=\"StudentData\">Student Data</option>\n                        <option value=\"CourseInformation\">Course Information</option>\n                        <option value=\"StudentGrades\">Student Grades</option>\n                    </select>\n                </div>\n\n            {this.state.upload_type === \"StudentData\" ? \n            \n            <Fragment> \n                 <h1>Student Data: </h1>\n                <DropzoneAreaBase\n                onDrop={(files) => {this.setState({files: files})}}\n                maxFileSize={7000000}            \n            > </DropzoneAreaBase>\n                <h1>Course Data: </h1>\n                <DropzoneAreaBase\n                onDrop={(files) => {this.setState({studentCoursePlan: files})}}\n                maxFileSize={7000000}            \n            > </DropzoneAreaBase>\n            </Fragment> : \n            \n            <DropzoneAreaBase\n                onDrop={(files) => {this.setState({files: files})}}\n                maxFileSize={7000000}            \n            ></DropzoneAreaBase>}\n            <br></br>\n            <Button onClick={() => this.onSubmit()} \n            disabled={this.state.upload_type === \"CourseInformation\" && (this.state.selectedDepartment.length === 0 || this.state.selectedSemester.length === 0)} >Submit File</Button>\n            <div className = \"row\"></div>\n            <div className = \"row\">\n                    <Select\n                        isDisabled={this.state.upload_type !== \"CourseInformation\"}\n                        placeholder=\"Select a Semester/Year\"\n                        options={this.state.semesterOptions}\n                        className=\"col s6\"\n                        onChange={e => this.setState({selectedSemester: e.value})}\n                    />\n                    <Select\n                        isDisabled={this.state.upload_type !== 'CourseInformation'}\n                        placeholder=\"Select a Department\"\n                        options={this.state.departmentOptions}\n                        className=\"col s6\"\n                        onChange={e => this.setState({selectedDepartment: e.value})}\n                    />\n                </div>\n                </div>\n        );\n    }\n}\nexport default UploadFileGPD","import React, { Component} from 'react'\nimport { Button, Row, Col, Table, Checkbox, Card, TimePicker } from 'react-materialize';\nimport NavbarGPD from './NavbarGPD'\nimport Select from 'react-select'\nimport axios from 'axios'\n\nclass SuggestCoursePlanGPD extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            currentStudent: this.props.location.state.currentEditStudent,\n            studentID: this.props.location.state.currentEditStudent.id,\n            major: this.props.location.state.currentEditStudent.department,\n            entrySemester: this.props.location.state.currentEditStudent.entrySemester,\n            track: this.props.location.state.currentEditStudent.track,\n            sbuID: this.props.location.state.currentEditStudent.sbuID,\n            expectedGraduation: \"\",\n            grades: [],\n            degreeData: [],\n            allCourses: [],\n            maxCredits: 15,\n            remainingSemesters: 4,\n            mondayTimeBegin: \"00:00\",\n            mondayTimeEnd: \"23:59\",\n            tuesdayTimeBegin: \"00:00\",\n            tuesdayTimeEnd: \"23:59\",\n            wednesdayTimeBegin: \"00:00\",\n            wednesdayTimeEnd: \"23:59\",\n            thursdayTimeBegin: \"00:00\",\n            thursdayTimeEnd: \"23:59\",\n            fridayTimeBegin: \"00:00\",\n            fridayTimeEnd: \"23:59\", \n            currentSemester: \"S19\",\n            preferredCourses: [],\n            avoidedCourses: [],\n            allCourseVals: [],\n            currentCoursePlan: [],\n        };\n    }\n\n    //gets all of the grades in the database for the current student\n    getGrades = async () => {\n        let body = {id: this.state.studentID};\n        let header = {\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          }; \n        let res = await axios.post(\"/api/courses/getgrades\", body, header).catch((err) => console.log(err));\n        this.setState({grades: res.data});\n    }\n/*\n    calcGPA = async () => {\n        //get grades from databse\n        let grades4GPA = this.getGrades\n        let totalCredits = 0\n        let finalGPA = 0\n        //loop through and get total credits\n        for(let i = 0; i < grades4GPA.length; i++){\n            totalCredits += grades4GPA[i].credits\n        }\n        //loop through grades that are length two A-, b+, c+ etc...\n        for(let i = 0; i < grades4GPA.length; i++){\n            if(grades4GPA[i].grade.length == 2){\n                if(grades4GPA[i].grade.charAt(0) == \"A\"){\n                    if(grades4GPA[i].grade.charAt(1) == \"-\"){\n                        let gradeValue = 3.67\n                        let creditValue = grades4GPA[i].credits\n                        let GPAValue = gradeValue * creditValue\n                        finalGPA += GPAValue\n                    }\n                }\n                if(grades4GPA[i].grade.charAt(0) == \"B\"){\n                    if(grades4GPA[i].grade.charAt(1) == \"+\"){\n                        let gradeValue = 3.33\n                        let creditValue = grades4GPA[i].credits\n                        let GPAValue = gradeValue * creditValue\n                        finalGPA += GPAValue\n                    }\n                    if(grades4GPA[i].grade.charAt(1) == \"-\"){\n                        let gradeValue = 2.67\n                        let creditValue = grades4GPA[i].credits\n                        let GPAValue = gradeValue * creditValue\n                        finalGPA += GPAValue\n                    }\n                }\n                if(grades4GPA[i].grade.charAt(0) == \"C\"){\n                    if(grades4GPA[i].grade.charAt(1) == \"+\"){\n                        let gradeValue = 2.33\n                        let creditValue = grades4GPA[i].credits\n                        let GPAValue = gradeValue * creditValue\n                        finalGPA += GPAValue\n                    }\n                    if(grades4GPA[i].grade.charAt(1) == \"-\"){\n                        let gradeValue = 1.67\n                        let creditValue = grades4GPA[i].credits\n                        let GPAValue = gradeValue * creditValue\n                        finalGPA += GPAValue\n                    }\n                    \n                }\n                if(grades4GPA[i].grade.charAt(0) == \"D\"){\n                    if(grades4GPA[i].grade.charAt(1) == \"+\"){\n                        let gradeValue = 1.33\n                        let creditValue = grades4GPA[i].credits\n                        let GPAValue = gradeValue * creditValue\n                        finalGPA += GPAValue\n                    }\n                }\n            }\n            //Loop through classes get their grade and credit and mulitply for GPA Value\n            if(grades4GPA[i].grade.charAt(0) == \"A\"){\n                let gradeValue = 4.0\n                let creditValue = grades4GPA[i].credits \n                let GPAValue = gradeValue * creditValue\n                finalGPA += GPAValue\n            }\n            if(grades4GPA[i].grade.charAt(0) == \"B\"){\n                let gradeValue = 3.0\n                let creditValue = grades4GPA[i].credits \n                let GPAValue = gradeValue * creditValue\n                finalGPA += GPAValue\n            }\n            if(grades4GPA[i].grade.charAt(0) == \"C\"){\n                let gradeValue = 2.0\n                let creditValue = grades4GPA[i].credits \n                let GPAValue = gradeValue * creditValue\n                finalGPA += GPAValue\n            }\n            if(grades4GPA[i].grade.charAt(0) == \"D\"){\n                let gradeValue = 1.0\n                let creditValue = grades4GPA[i].credits\n                let GPAValue = gradeValue * creditValue\n                finalGPA += GPAValue\n            }\n            if(grades4GPA[i].grade.charAt(0) == \"F\"){\n                let gradeValue = 0.0\n                let creditValue = grades4GPA[i].credits\n                let GPAValue = gradeValue * creditValue\n                finalGPA += GPAValue\n            }\n            finalGPA = finalGPA / totalCredits //get the actual final GPA\n            return finalGPA\n        }\n    }\n*/\n    //gets all the degree requirements for a specific major/track\n    getDegreeRequirements = async () => {\n        let degrees = await axios.get('api/degrees').catch((err) => console.log('caught it'));\n        let degreeData = degrees.data\n        for(let i = 0; i < degreeData.length; i++){\n            let tempDegree = degreeData[i];\n            if(this.state.major.replace(/ /g,'') == tempDegree.department){\n                this.setState({\n                    degreeData: degreeData[i].json,\n                    rerender: true\n                });\n                break;\n            }\n        }\n    }\n//get_creditsd_reamining takes remaining courses paramter and gets the total credits of the courses and see how many credits they still need to take\n\n    //compares grades with required courses for major and track to check what courses still need to be taken\n    searchCoursesAMS = async (grades, required_courses, elective_credits) => {\n        let finished_courses = []\n        let temp_elective_credits = elective_credits\n        console.log(temp_elective_credits);\n        for(let i = 0; i < grades.length; i++){\n            //checks letter grades to see if it is a valid grade (C to pass)\n            if(grades[i].grade.charAt(0) <= \"C\"){\n                if(grades[i].grade.length > 1){\n                    if(grades[i].grade.charAt(1) != \"-\"){\n                        //then split the required courses by / if there are multiple required courses that could fit one requirement\n                        for(let j = 0; j < required_courses.length; j++){\n                            let temp_courses = required_courses[j].split('/');\n                            let found_course = false;\n                            for(let k = 0; k < temp_courses.length; k++){\n                                //checks to see if there is a grade that matches a required course\n                                if((grades[i].department + \" \" + grades[i].course_num) == temp_courses[k]){\n                                    //if so that course is finished, push to finished courses and remove it from required courses\n                                    finished_courses.push(grades[i].department + \" \" + grades[i].course_num);\n                                    required_courses.splice(j, 1);\n                                    found_course = true;\n                                    break;\n                                }\n                            }\n                            //if no direct course that requirements are solved, check to see if it can satisfy an elective course\n                            if(!found_course){\n                                let duplicate = false;\n                                for(let l = 0; l < finished_courses.length; l++){\n                                    //if the grade is already accounted for, don't account for it again\n                                    if((grades[i].department + \" \" + grades[i].course_num) == finished_courses[l]){\n                                        duplicate = true;\n                                        break;\n                                    }\n                                }\n                                //if not, have it satisfy elective credits\n                                if(!duplicate){\n                                    finished_courses.push(grades[i].department + \" \" + grades[i].course_num);\n                                    temp_elective_credits = temp_elective_credits - (grades[i].credits);\n                                }\n                            }\n                        }\n                    }\n                }\n                else{\n                    for(let j = 0; j < required_courses.length; j++){\n                        let temp_courses = required_courses[j].split('/');\n                        let found_course = false;\n                        for(let k = 0; k < temp_courses.length; k++){\n                            //checks to see if there is a grade that matches a required course\n                            if((grades[i].department + \" \" + grades[i].course_num) == temp_courses[k]){\n                                //if so that course is finished, push to finished courses and remove it from required courses\n                                finished_courses.push(grades[i].department + \" \" + grades[i].course_num);\n                                required_courses.splice(j, 1);\n                                found_course = true;\n                                break;\n                            }\n                        }\n                        //if no direct course that requirements are solved, check to see if it can satisfy an elective course\n                        if(!found_course){\n                            let duplicate = false;\n                            for(let l = 0; l < finished_courses.length; l++){\n                                //if the grade is already accounted for, don't account for it again\n                                if((grades[i].department + \" \" + grades[i].course_num) == finished_courses[l]){\n                                    duplicate = true;\n                                    break;\n                                }\n                            }\n                            //if not, have it satisfy elective credits\n                            if(!duplicate){\n                                finished_courses.push(grades[i].department + \" \" + grades[i].course_num);\n                                temp_elective_credits = temp_elective_credits - (grades[i].credits);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        let body = {required_courses: required_courses, elective_credits: temp_elective_credits}\n        return body;\n    }\n\n    //gets the remaining courses \n    getRemainingCourses = async () => {\n        let grades = this.state.grades;\n        let required_courses = []\n        let elective_credits = 0\n        let remaining_courses = []\n        if (this.state.major.replace(/ /g,'') == \"AMS\") {\n            if(this.state.track == \"Computational Applied Mathematics\"){\n                required_courses = this.state.degreeData.requirements.tracks.comp.courses\n                elective_credits = this.state.degreeData.requirements.tracks.comp.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n            else if(this.state.track == \"Computational Biology\"){\n                required_courses = this.state.degreeData.requirements.tracks.bio.courses\n                elective_credits = this.state.degreeData.requirements.tracks.bio.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n            else if(this.state.track == \"Operations Research\"){\n                required_courses = this.state.degreeData.requirements.tracks.op.courses\n                elective_credits = this.state.degreeData.requirements.tracks.op.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n            else if(this.state.track == \"Statistics\"){\n                required_courses = this.state.degreeData.requirements.tracks.stats.courses\n                elective_credits = this.state.degreeData.requirements.tracks.stats.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n            else if(this.state.track == \"Quanitative Finance\"){\n                required_courses = this.state.degreeData.requirements.tracks.quan.courses\n                elective_credits = this.state.degreeData.requirements.tracks.quan.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n        } \n        if(this.state.major.replace(/ /g, '') == 'BMI'){\n            if(this.state.track == \"Project/Imaging Informatics\"){\n                required_courses = this.state.degreeData.requirements.tracks.proj_imag.courses\n                elective_credits = this.state.degreeData.requirements.tracks.proj_imag.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n            else if(this.state.track == \"Project/Clinical Informatics\"){\n                required_courses = this.state.degreeData.requirements.tracks.proj_clinical.courses\n                elective_credits = this.state.degreeData.requirements.tracks.proj_clinical.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n            else if(this.state.track == \"Project/Translational Bio-Informatics\"){\n                required_courses = this.state.degreeData.requirements.tracks.proj_trans.courses\n                elective_credits = this.state.degreeData.requirements.tracks.proj_trans.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n            else if(this.state.track == \"Thesis/Clinical Informatics\"){\n                required_courses = this.state.degreeData.requirements.tracks.thesis_clinical.courses\n                elective_credits = this.state.degreeData.requirements.tracks.thesis_clinical.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n            else if(this.state.track == \"Thesis/Translational Bio-Informatics\"){\n                required_courses = this.state.degreeData.requirements.tracks.thesis_trans.courses\n                elective_credits = this.state.degreeData.requirements.tracks.thesis_trans.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n            else if(this.state.track == \"Thesis/Imaging Informatics\"){\n                required_courses = this.state.degreeData.requirements.tracks.thesis_imag.courses\n                elective_credits = this.state.degreeData.requirements.tracks.thesis_imag.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n        }\n        if(this.state.major.replace(/ /g, '') == 'CSE'){\n            if(this.state.track == \"Basic\"){\n                required_courses = this.state.degreeData.requirements.tracks.basic.courses\n                elective_credits = this.state.degreeData.requirements.tracks.basic.elective_creds\n                console.log(elective_credits);\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n                console.log(remaining_courses);\n            }\n            else if(this.state.track == \"Advanced\"){\n                required_courses = this.state.degreeData.requirements.tracks.advanced.courses\n                elective_credits = this.state.degreeData.requirements.tracks.advanced.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n            else if(this.state.track == \"Thesis\"){\n                required_courses = this.state.degreeData.requirements.tracks.thesis.courses\n                elective_credits = this.state.degreeData.requirements.tracks.thesis.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n        }\n        if(this.state.major.replace(/ /g, '') == 'CE'){\n            if(this.state.track == \"Non-Thesis\"){\n                required_courses = this.state.degreeData.requirements.tracks.non_thesis.courses\n                elective_credits = this.state.degreeData.requirements.tracks.non_thesis.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n            else if(this.state.track == \"Thesis\"){\n                required_courses = this.state.degreeData.requirements.tracks.thesis.courses\n                elective_credits = this.state.degreeData.requirements.tracks.thesis.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n        }\n        return remaining_courses;\n    }\n\n    //gets the total credits from the remaining courses for the student to take\n    getCreditsRemainingCourses = async (remainingCourses) => {\n        \n        console.log(remainingCourses);\n        let total = 0\n        for(const course of remainingCourses){\n            let values = course.split(\" \")\n            let retval = await axios.get(\"/api/courses/course?name=\" + values[0] + \"&number=\" +values[1])\n            if(retval.data != \"\"){\n                total = total + retval.data.credits\n            }\n        }\n        return total\n    }\n\n    //triggered when \"Suggest Course Plan\" Button is pressed\n    onClickSuggestPlan = async () => {\n        let requirementsBody = await this.getRemainingCourses();\n        let remainingCourses = requirementsBody.required_courses;\n        let remainingElectiveCredits = requirementsBody.elective_credits;\n        let preferredCourses = await this.getPreferredCourses();\n        let avoidedCourses = await this.getAvoidedCourses();\n        let totalRemainingCredits = await this.getCreditsRemainingCourses(remainingCourses) + remainingElectiveCredits;\n        let plans = await this.suggestCoursePlan(remainingCourses, remainingElectiveCredits, preferredCourses, avoidedCourses, totalRemainingCredits);\n        this.setState({currentCoursePlan: plans});\n        console.log(this.state.currentCoursePlan);\n    }\n\n    //gets the preferred courses from the user input on the website\n    getPreferredCourses = async () => {\n        let courses = []\n        for(const course of this.state.preferredCourses){\n            let values = course.split(\" \")\n            let retval = await axios.get(\"/api/courses/course?name=\" + values[0] + \"&number=\" +values[1])\n            \n            if(retval.data != \"\"){\n                courses.push(retval.data)\n            }\n        }\n\n        \n        return courses\n    }\n\n    //gets the avoided courses from the user input on the website\n    getAvoidedCourses = async () => {\n\n        let courses = []\n        for(const course of this.state.avoidedCourses){\n            let values = course.split(\" \")\n            let retval = await axios.get(\"/api/courses/course?name=\" + values[0] + \"&number=\" +values[1])\n\n            if(retval.data != \"\"){\n                courses.push(retval.data)\n            }\n        }\n        console.log(courses);\n        return courses\n\n    }\n\n    //gets all courses from the database\n    getAllCourses = async () => {\n        let courses = await axios.get(\"/api/courses/\").catch((err) => console.log('caught', err));\n        let courseData = courses.data\n        let courseNames = []\n        let courseVals = []\n        for(var course in courseData){\n            courseVals.push(courseData[course]);\n            courseNames.push((courseData[course].department + \" \" + (courseData[course].courseNumber).toString()));\n        }\n        courseNames.sort();\n        this.setState({\n            allCourses: courseNames,\n            allCourseVals: courseVals\n        });\n    }\n\n    convert24to12 = (str) => {\n        let [hours, minutes] = str.split(\":\");\n        let time = \"\"\n        if(hours === \"12\"){\n            hours = \"00\";\n        }\n        else if(hours.length == 1){\n            hours = \"0\" + hours;\n        }\n        if(minutes.substring(2) == \"PM\"){\n            hours = parseInt(hours) + 12;\n            time = hours + \":\" + minutes.substring(0, 2);\n        }\n        else{\n            time = hours + \":\" + minutes.substring(0, 2);\n        }\n        return time;\n\n    }\n\n    smartSuggestCoursePlan = async () => {\n        let requirementsBody = await this.getRemainingCourses();\n        let remainingCourses = requirementsBody.required_courses;\n        let remainingElectiveCredits = requirementsBody.elective_credits;\n        let totalRemainingCredits = await this.getCreditsRemainingCourses(remainingCourses) + remainingElectiveCredits;\n        let plans = await this.suggestCoursePlan(remainingCourses, remainingElectiveCredits, [], [], totalRemainingCredits);\n        console.log(plans);\n        this.setState({currentCoursePlan: plans});\n    }\n\n    suggestCoursePlan = async (remainingCourses, remainingElectiveCredits, preferredCourses, avoidedCourses, totalRemainingCredits) => {\n        let editElectiveCredits = remainingElectiveCredits;\n        let remainingSemesters = this.state.remainingSemesters\n        let loopNextSem = this.state.currentSemester;\n        let coursePlan = []\n        let coursePlanWeight = 0\n        if(totalRemainingCredits > (this.state.maxCredits * remainingSemesters)){\n            return [] //can't be done with constraints provided\n        }\n        while(remainingSemesters > 0){\n            let semCourses = [];\n            let loopSemCredits = this.state.maxCredits;\n            if(loopNextSem.charAt(0) == \"F\"){\n                loopNextSem = \"S\" + loopNextSem.substring(1);\n            }\n            else{\n                let year = parseInt(loopNextSem.substring(1));\n                year = year + 1\n                loopNextSem = \"F\" + year.toString();\n            }\n            console.log(loopNextSem);\n            //start priority course loop\n            for(let i = 0; i < preferredCourses.length; i++){\n                let constraintViolated = false;\n                let electiveCourse = false;\n                //checks to see if any time constraints are violated, if so don't add course to plan\n                let initSplit = preferredCourses[i].days.split(\" \");\n                let daysSplit = initSplit[0].split(\"/\");\n                let timesSplit = initSplit[1].split(\"-\");\n                for(let temp = 0; temp < daysSplit.length; temp++){\n                    if(daysSplit[temp] == \"MW\"){\n                        if((this.convert24to12(timesSplit[0]) < this.state.mondayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.mondayTimeEnd) || (this.convert24to12(timesSplit[0]) < this.state.wednesdayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.wednesdayTimeEnd)){\n                            constraintViolated = true;\n                            break;\n                        }\n                    }\n                    else if(daysSplit[temp] == \"TUTH\"){\n                        if((this.convert24to12(timesSplit[0]) < this.state.tuesdayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.tuesdayTimeEnd) || (this.convert24to12(timesSplit[0]) < this.state.thursdayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.thursdayTimeEnd)){\n                            constraintViolated = true;\n                            break;\n                        }\n                    }\n                    else if(daysSplit[temp] == \"MWF\"){\n                        if((this.convert24to12(timesSplit[0]) < this.state.mondayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.mondayTimeEnd) || (this.convert24to12(timesSplit[0]) < this.state.wednesdayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.wednesdayTimeEnd)  && (this.convert24to12(timesSplit[0]) < this.state.fridayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.fridayTimeEnd)){\n                            constraintViolated = true;\n                            break;\n                        }\n                    }\n                    else if(daysSplit[temp] == \"MF\"){\n                        if((this.convert24to12(timesSplit[0]) < this.state.mondayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.mondayTimeEnd) || (this.convert24to12(timesSplit[0]) < this.state.fridayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.fridayTimeEnd)){\n                            constraintViolated = true;\n                            break;\n                        }\n                    }\n                }\n                //Now checks to see if semester constraint would be violated\n                let courseOfferedSemester = preferredCourses[i].semester\n                console.log(courseOfferedSemester);\n                if(loopNextSem != courseOfferedSemester)\n                {\n                    constraintViolated = true;\n                }\n                if(constraintViolated){\n                    continue;\n                }\n                //Now checks degree requirement constraint\n                let courseStr = preferredCourses[i].department + \" \" + preferredCourses[i].courseNumber;\n                let department = preferredCourses[i].department\n                let degreeReqFound = false;\n                for(let remainLoop = 0; remainLoop < remainingCourses.length; remainLoop++){\n                    let remainingCoursesSplit = remainingCourses[remainLoop].split(\"/\");\n                    for(let splitLoop = 0; splitLoop < remainingCoursesSplit.length; splitLoop++){\n                        console.log(remainingCoursesSplit[splitLoop]);\n                        if(courseStr == remainingCoursesSplit[splitLoop]){\n                            degreeReqFound = true;\n                        }\n                    }\n                }\n                if(!degreeReqFound){\n                    if(preferredCourses[i].credits > editElectiveCredits){\n                        continue;\n                    }\n                    else{\n                        electiveCourse = true;\n                    }\n                }\n                //finally pushes it to the semester plan\n                if(preferredCourses[i].credits <= loopSemCredits){\n                    semCourses.push(preferredCourses[i]);\n                    for(let j = 0; j < remainingCourses.length; j++){\n                        let remainingCoursesSplit = remainingCourses[j].split(\"/\");\n                        for(let splitLoop = 0; splitLoop < remainingCoursesSplit.length; splitLoop++){\n                            console.log(remainingCoursesSplit[splitLoop]);\n                            if(courseStr == remainingCoursesSplit[splitLoop] ){\n                                remainingCourses.splice(j, 1);\n                            }\n                        }\n                    }\n                    coursePlanWeight += 12;\n                    if(electiveCourse){\n                        editElectiveCredits = editElectiveCredits - preferredCourses[i].credits;\n                        loopSemCredits = loopSemCredits - preferredCourses[i].credits;\n                    }\n                    else{\n                        loopSemCredits -= preferredCourses[i].credits;\n                    }\n                }\n                if(loopSemCredits == 0){\n                    break;\n                }\n            }\n            //end of preferred course loop, check to see if the credit limit was reached for the semester\n            if(loopSemCredits == 0){\n                coursePlan.push(semCourses);\n                remainingSemesters = remainingSemesters - 1;\n            }\n            else{\n                await this.getAllCourses();\n                let nonPreferredCourses = this.state.allCourseVals;\n                console.log(nonPreferredCourses)\n                for(let i = 0; i < nonPreferredCourses.length; i++){\n                    let constraintViolated = false;\n                    let electiveCourse = false;\n                    let requiredCourseFlag = false;\n                    for(let j = 0; j < remainingCourses.length; j++){\n                        let tempStrArr = remainingCourses[j].split(\"/\");\n                        for(let k = 0; k < tempStrArr.length; k++){\n                            if(nonPreferredCourses[i].department + \" \" + nonPreferredCourses[i].courseNumber == tempStrArr[k]){\n                                requiredCourseFlag = true;\n                            }\n                        }\n                    }\n                    if(nonPreferredCourses[i].department == this.state.major){\n                        requiredCourseFlag = true;\n                    }\n                    console.log(requiredCourseFlag);\n                    if(!requiredCourseFlag){\n                        continue;\n                    }\n                    for(let j = 0; j < avoidedCourses.length; j++){\n                        console.log(avoidedCourses[j]);\n                        if(nonPreferredCourses[i].department + \" \" + nonPreferredCourses[i].courseNumber == avoidedCourses[j].department + \" \" + avoidedCourses[j].courseNumber){\n                            constraintViolated = true;\n                        }\n                    }\n                    if(constraintViolated){\n                        continue;\n                    }\n                //checks to see if any time constraints are violated, if so don't add course to plan\n                let initSplit = nonPreferredCourses[i].days.split(\" \");\n                let daysSplit = initSplit[0].split(\"/\");\n                let timesSplit = initSplit[1].split(\"-\");\n                for(let temp = 0; temp < daysSplit.length; temp++){\n                    if(daysSplit[temp] == \"MW\"){\n                        if((this.convert24to12(timesSplit[0]) < this.state.mondayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.mondayTimeEnd) || (this.convert24to12(timesSplit[0]) < this.state.wednesdayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.wednesdayTimeEnd)){\n                            constraintViolated = true;\n                        }\n                    }\n                    else if(daysSplit[temp] == \"TUTH\"){\n                        if((this.convert24to12(timesSplit[0]) < this.state.tuesdayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.tuesdayTimeEnd) || (this.convert24to12(timesSplit[0]) < this.state.thursdayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.thursdayTimeEnd)){\n                            constraintViolated = true;\n                        }\n                    }\n                    else if(daysSplit[temp] == \"MWF\"){\n                        if((this.convert24to12(timesSplit[0]) < this.state.mondayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.mondayTimeEnd) || (this.convert24to12(timesSplit[0]) < this.state.wednesdayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.wednesdayTimeEnd)  && (this.convert24to12(timesSplit[0]) < this.state.fridayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.fridayTimeEnd)){\n                            constraintViolated = true;\n                        }\n                    }\n                    else if(daysSplit[temp] == \"MF\"){\n                        if((this.convert24to12(timesSplit[0]) < this.state.mondayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.mondayTimeEnd) || (this.convert24to12(timesSplit[0]) < this.state.fridayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.fridayTimeEnd)){\n                            constraintViolated = true;\n                        }\n                    }\n                }\n                //Now checks to see if semester constraint would be violated\n                let courseOfferedSemester = nonPreferredCourses[i].semester\n                console.log(courseOfferedSemester);\n                if(loopNextSem != courseOfferedSemester)\n                {\n                    constraintViolated = true;\n                }\n                if(constraintViolated){\n                    continue;\n                }\n                console.log(\"Here\")\n                //Now checks degree requirement constraint\n                let courseStr = nonPreferredCourses[i].department + \" \" + nonPreferredCourses[i].courseNumber;\n                let degreeReqFound = false;\n                for(let remainLoop = 0; remainLoop < remainingCourses.length; remainLoop++){\n                    let remainingCoursesSplit = remainingCourses[remainLoop].split(\"/\");\n                    for(let splitLoop = 0; splitLoop < remainingCoursesSplit.length; splitLoop++){\n                        console.log(remainingCoursesSplit[splitLoop]);\n                        if(courseStr == remainingCoursesSplit[splitLoop]){\n                            degreeReqFound = true;\n                            break;\n                        }\n                    }\n                }\n                if(!degreeReqFound){\n                    if(nonPreferredCourses[i].credits > editElectiveCredits){\n                        continue;\n                    }\n                    else{\n                        electiveCourse = true;\n                    }\n                }\n                //finally pushes it to the semester plan\n                if(nonPreferredCourses[i].credits <= loopSemCredits){\n                    semCourses.push(nonPreferredCourses[i]);\n                    coursePlanWeight += 10;\n                    if(electiveCourse){\n                        editElectiveCredits = editElectiveCredits - nonPreferredCourses[i].credits;\n                        loopSemCredits = loopSemCredits - nonPreferredCourses[i].credits;\n                    }\n                    else{\n                        loopSemCredits -= nonPreferredCourses[i].credits;\n                    }\n                }\n                if(loopSemCredits == 0){\n                    break;\n                }\n                }\n                coursePlan.push(semCourses);\n                remainingSemesters = remainingSemesters - 1;\n            }\n        }\n        return coursePlan;\n    }\n\n    approveCousePlan = async () => {\n        \n        let approvedPlan ={sbuID: this.state.studentID, semesters: {}}\n        let currentCoursePlan = this.state.currentCoursePlan;\n        console.log(currentCoursePlan);\n        let semesters = {}\n        for (const semester of currentCoursePlan){;\n            console.log(semester);\n            for(const course of semester){\n                console.log(course);\n                if(semesters.hasOwnProperty(course.semester)){\n                    semesters[course.semester][Object.keys(course.semester).length.toString()] = course\n                }else{\n                    semesters[course.semester] = { \"0\": course}\n                }\n            }\n        }\n\n        approvedPlan.semesters = semesters\n        console.log(approvedPlan)\n        let body = {\"studentID\": this.state.sbuID, coursePlan: approvedPlan}\n        let header = {\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          }; \n\n        await axios.post('/api/edit_student/addCoursePlan', body, header)\n\n    }\n\n    onChange = (event) => {\n        this.setState({[event.target.id]: event.target.value});\n    }\n\n    componentDidMount = async() => {\n        this.getDegreeRequirements();\n        this.getAllCourses();\n        this.getGrades();\n    }\n\n    render(){\n        return(\n            <div>\n            <NavbarGPD />\n            <br></br>\n            <Row>\n                <Col l={2}>\n                    <Card className=\"grey lighten-3\">\n                        <Row>\n                            <Col l={12}>\n                                <Button onClick={this.smartSuggestCoursePlan}>Smart Suggestion</Button>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col l={12}>\n                                <b><u>Student Suggestions</u></b>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col l={12}>\n                                <b><u>Max Credits:</u></b>\n                                <input type=\"number\" id=\"maxCredits\" name=\"credits\" step=\"1\" min=\"0\" max=\"24\" onChange={this.onChange}></input>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col l={12}>\n                                <b><u>Max Semesters:</u></b>\n                                <input type=\"number\" id=\"remainingSemesters\" name=\"credits\" step=\"1\" min=\"0\" max=\"4\" onChange={this.onChange}></input>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col l={12}>\n                                <b><u>Course(s) to Avoid</u></b>\n                                <Table>\n                                    <thead>\n                                        <tr>\n                                            <th data-field=\"Name\">Course Name:</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {this.state.allCourses.map((course) => (\n                                            <tr>\n                                                <td><Checkbox id={course + \"prefer\"} value={course} \n                                                onChange={(e) => {this.state.avoidedCourses.includes(e.target.value) ? this.setState({avoidedCourses: this.state.avoidedCourses.filter((obj) => obj !== e.target.value)}) : this.setState({avoidedCourses: [...this.state.avoidedCourses, e.target.value]})}}  \n                                                label={<span style={{color: \"black\"}}>{course}</span>}></Checkbox></td>\n                                            </tr>\n                                        ))}\n                                    </tbody>\n                                </Table>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col l={12}>\n                                <b><u>Preferred Course(s)</u></b>\n                                <Table>\n                                    <thead>\n                                        <tr>\n                                            <th data-field=\"Name\">Course Name:</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {this.state.allCourses.map((course) => (\n                                            <tr>\n                                                <td><Checkbox id={course + \"avoid\"} value={course} onChange={(e) => {this.state.preferredCourses.includes(e.target.value) ? this.setState({preferredCourses: this.state.preferredCourses.filter((obj) => obj !== e.target.value)}) : this.setState({preferredCourses: [...this.state.preferredCourses, e.target.value]})}} label={<span style={{color: \"black\"}}>{course}</span>}></Checkbox></td>\n                                            </tr>\n                                        ))}\n                                    </tbody>\n                                </Table>\n                            </Col>\n                        </Row>\n                    </Card>\n                </Col>\n                <Col l={8} offset=\"l1\">\n                    <Row>\n                    <Card className=\"grey lighten-3\">\n                        <Row>\n                            <Col l={4}>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col l={12}>\n                                <Table centered>\n                                    <thead>\n                                        <tr>\n                                            <th data-field=\"Name\">Course</th>\n                                            <th data-field=\"Credit\">Credit(s)</th>\n                                            <th data-field=\"Days\">Days</th>\n                                            <th data-field=\"Semester\">Semester</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {this.state.currentCoursePlan.map((semester) => {\n                                            let tempArr = semester;\n                                            console.log(semester);\n                                            return (semester.map((course) => {\n                                                return(<tr>\n                                                    <td>{course.department + \" \" + course.courseNumber}</td>\n                                                    <td>{course.credits}</td>\n                                                    <td>{course.days}</td>\n                                                    <td>{course.semester}</td>\n                                                </tr>);\n                                            }));\n                                        })}\n                                    </tbody>\n                                </Table>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col l={6} offset=\"l3\">\n                                <Button onClick={() => this.approveCousePlan()}>Approve Course Plan</Button>\n                            </Col>\n                        </Row>\n                    </Card>\n                    </Row>\n                    <Row>\n                        <Card className=\"grey lighten-3\">\n                            <b><u>Preferred Timeslots for Courses:</u></b>\n                            <Row></Row>\n                            <Row>\n                                <Col l={3}>\n                                    <b><u>Monday</u></b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"mondayTimeBegin\" onChange={this.onChange}></input>\n                                </Col>\n                                <Col l={3}>\n                                    <b>to</b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"mondayTimeEnd\" onChange={this.onChange}></input>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col l={3}>\n                                    <b><u>Tuesday</u></b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"tuesdayTimeBegin\" onChange={this.onChange}></input>\n                                </Col>\n                                <Col l={3}>\n                                    <b>to</b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"tuesdayTimeEnd\" onChange={this.onChange}></input>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col l={3}>\n                                    <b><u>Wednesday</u></b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"wednesdayTimeBegin\" onChange={this.onChange}></input>\n                                </Col>\n                                <Col l={3}>\n                                    <b>to</b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"wednesdayTimeEnd\" onChange={this.onChange}></input>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col l={3}>\n                                    <b><u>Thursday</u></b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"thursdayTimeBegin\" onChange={this.onChange}></input>\n                                </Col>\n                                <Col l={3}>\n                                    <b>to</b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"thursdayTimeEnd\" onChange={this.onChange}></input>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col l={3}>\n                                    <b><u>Friday</u></b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"fridayTimeBegin\" onChange={this.onChange}></input>\n                                </Col>\n                                <Col l={3}>\n                                    <b>to</b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"fridayTimeEnd\" onChange={this.onChange}></input>\n                                </Col>\n                            </Row>\n                            <Button onClick={this.onClickSuggestPlan}>Suggest Course Plan</Button>\n                        </Card>\n                    </Row>\n                </Col>\n            </Row>\n            </div>\n        );\n    }\n}\n\nexport default SuggestCoursePlanGPD;","import React, { Component} from 'react'\nimport { Button, Row, Col, Table, Checkbox, Card, TimePicker } from 'react-materialize';\nimport NavbarStudent from './NavbarStudent'\nimport Select from 'react-select'\nimport axios from 'axios'\nimport { Redirect } from 'react-router';\n\nclass CoursePlanScreen extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            currentStudent: this.props.location.state.currentEditStudent,\n            studentID: this.props.location.state.currentEditStudent.id,\n            major: this.props.location.state.currentEditStudent.department,\n            entrySemester: this.props.location.state.currentEditStudent.entrySemester,\n            track: this.props.location.state.currentEditStudent.track,\n            sbuID: this.props.location.state.currentEditStudent.sbuID,\n            email: this.props.location.state.email,\n            expectedGraduation: \"\",\n            grades: [],\n            degreeData: [],\n            allCourses: [],\n            maxCredits: 0,\n            remainingSemesters: 0,\n            mondayTimeBegin: \"\",\n            mondayTimeEnd: \"\",\n            tuesdayTimeBegin: \"\",\n            tuesdayTimeEnd: \"\",\n            wednesdayTimeBegin: \"\",\n            wednesdayTimeEnd: \"\",\n            thursdayTimeBegin: \"\",\n            thursdayTimeEnd: \"\",\n            fridayTimeBegin: \"\",\n            fridayTimeEnd: \"\", \n            currentSemester: \"S19\",\n            preferredCourses: [],\n            avoidedCourses: [],\n            allCourseVals: [],\n            currentCoursePlan: [],\n            returnHome: [],\n            goHomeFlag: false\n        };\n    }\n\n    //gets all of the grades in the database for the current student\n    getGrades = async () => {\n        let body = {id: this.state.studentID};\n        let header = {\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          }; \n        let res = await axios.post(\"/api/courses/getgrades\", body, header).catch((err) => console.log(err));\n        this.setState({grades: res.data});\n    }\n/*\n    calcGPA = async () => {\n        //get grades from databse\n        let grades4GPA = this.getGrades\n        let totalCredits = 0\n        let finalGPA = 0\n        //loop through and get total credits\n        for(let i = 0; i < grades4GPA.length; i++){\n            totalCredits += grades4GPA[i].credits\n        }\n        //loop through grades that are length two A-, b+, c+ etc...\n        for(let i = 0; i < grades4GPA.length; i++){\n            if(grades4GPA[i].grade.length == 2){\n                if(grades4GPA[i].grade.charAt(0) == \"A\"){\n                    if(grades4GPA[i].grade.charAt(1) == \"-\"){\n                        let gradeValue = 3.67\n                        let creditValue = grades4GPA[i].credits\n                        let GPAValue = gradeValue * creditValue\n                        finalGPA += GPAValue\n                    }\n                }\n                if(grades4GPA[i].grade.charAt(0) == \"B\"){\n                    if(grades4GPA[i].grade.charAt(1) == \"+\"){\n                        let gradeValue = 3.33\n                        let creditValue = grades4GPA[i].credits\n                        let GPAValue = gradeValue * creditValue\n                        finalGPA += GPAValue\n                    }\n                    if(grades4GPA[i].grade.charAt(1) == \"-\"){\n                        let gradeValue = 2.67\n                        let creditValue = grades4GPA[i].credits\n                        let GPAValue = gradeValue * creditValue\n                        finalGPA += GPAValue\n                    }\n                }\n                if(grades4GPA[i].grade.charAt(0) == \"C\"){\n                    if(grades4GPA[i].grade.charAt(1) == \"+\"){\n                        let gradeValue = 2.33\n                        let creditValue = grades4GPA[i].credits\n                        let GPAValue = gradeValue * creditValue\n                        finalGPA += GPAValue\n                    }\n                    if(grades4GPA[i].grade.charAt(1) == \"-\"){\n                        let gradeValue = 1.67\n                        let creditValue = grades4GPA[i].credits\n                        let GPAValue = gradeValue * creditValue\n                        finalGPA += GPAValue\n                    }\n                    \n                }\n                if(grades4GPA[i].grade.charAt(0) == \"D\"){\n                    if(grades4GPA[i].grade.charAt(1) == \"+\"){\n                        let gradeValue = 1.33\n                        let creditValue = grades4GPA[i].credits\n                        let GPAValue = gradeValue * creditValue\n                        finalGPA += GPAValue\n                    }\n                }\n            }\n            //Loop through classes get their grade and credit and mulitply for GPA Value\n            if(grades4GPA[i].grade.charAt(0) == \"A\"){\n                let gradeValue = 4.0\n                let creditValue = grades4GPA[i].credits \n                let GPAValue = gradeValue * creditValue\n                finalGPA += GPAValue\n            }\n            if(grades4GPA[i].grade.charAt(0) == \"B\"){\n                let gradeValue = 3.0\n                let creditValue = grades4GPA[i].credits \n                let GPAValue = gradeValue * creditValue\n                finalGPA += GPAValue\n            }\n            if(grades4GPA[i].grade.charAt(0) == \"C\"){\n                let gradeValue = 2.0\n                let creditValue = grades4GPA[i].credits \n                let GPAValue = gradeValue * creditValue\n                finalGPA += GPAValue\n            }\n            if(grades4GPA[i].grade.charAt(0) == \"D\"){\n                let gradeValue = 1.0\n                let creditValue = grades4GPA[i].credits\n                let GPAValue = gradeValue * creditValue\n                finalGPA += GPAValue\n            }\n            if(grades4GPA[i].grade.charAt(0) == \"F\"){\n                let gradeValue = 0.0\n                let creditValue = grades4GPA[i].credits\n                let GPAValue = gradeValue * creditValue\n                finalGPA += GPAValue\n            }\n            finalGPA = finalGPA / totalCredits //get the actual final GPA\n            return finalGPA\n        }\n    }\n*/\n    //gets all the degree requirements for a specific major/track\n    getDegreeRequirements = async () => {\n        let degrees = await axios.get('api/degrees').catch((err) => console.log('caught it'));\n        let degreeData = degrees.data\n        for(let i = 0; i < degreeData.length; i++){\n            let tempDegree = degreeData[i];\n            if(this.state.major.replace(/ /g,'') == tempDegree.department){\n                this.setState({\n                    degreeData: degreeData[i].json,\n                    rerender: true\n                });\n                break;\n            }\n        }\n    }\n//get_creditsd_reamining takes remaining courses paramter and gets the total credits of the courses and see how many credits they still need to take\n\n    //compares grades with required courses for major and track to check what courses still need to be taken\n    searchCoursesAMS = async (grades, required_courses, elective_credits) => {\n        let finished_courses = []\n        let temp_elective_credits = elective_credits\n        for(let i = 0; i < grades.length; i++){\n            //checks letter grades to see if it is a valid grade (C to pass)\n            if(grades[i].grade.charAt(0) <= \"C\"){\n                if(grades[i].grade.length > 1){\n                    if(grades[i].grade.charAt(1) != \"-\"){\n                        //then split the required courses by / if there are multiple required courses that could fit one requirement\n                        for(let j = 0; j < required_courses.length; j++){\n                            let temp_courses = required_courses[j].split('/');\n                            let found_course = false;\n                            for(let k = 0; k < temp_courses.length; k++){\n                                //checks to see if there is a grade that matches a required course\n                                if((grades[i].department + \" \" + grades[i].course_num) == temp_courses[k]){\n                                    //if so that course is finished, push to finished courses and remove it from required courses\n                                    finished_courses.push(grades[i].department + \" \" + grades[i].course_num);\n                                    required_courses.splice(j, 1);\n                                    found_course = true;\n                                    break;\n                                }\n                            }\n                            //if no direct course that requirements are solved, check to see if it can satisfy an elective course\n                            if(!found_course){\n                                let duplicate = false;\n                                for(let l = 0; l < finished_courses.length; l++){\n                                    //if the grade is already accounted for, don't account for it again\n                                    if((grades[i].department + \" \" + grades[i].course_num) == finished_courses[l]){\n                                        duplicate = true;\n                                        break;\n                                    }\n                                }\n                                //if not, have it satisfy elective credits\n                                if(!duplicate){\n                                    finished_courses.push(grades[i].department + \" \" + grades[i].course_num);\n                                    temp_elective_credits = temp_elective_credits - (grades[i].credits);\n                                }\n                            }\n                        }\n                    }\n                }\n                else{\n                    for(let j = 0; j < required_courses.length; j++){\n                        let temp_courses = required_courses[j].split('/');\n                        let found_course = false;\n                        for(let k = 0; k < temp_courses.length; k++){\n                            //checks to see if there is a grade that matches a required course\n                            if((grades[i].department + \" \" + grades[i].course_num) == temp_courses[k]){\n                                //if so that course is finished, push to finished courses and remove it from required courses\n                                finished_courses.push(grades[i].department + \" \" + grades[i].course_num);\n                                required_courses.splice(j, 1);\n                                found_course = true;\n                                break;\n                            }\n                        }\n                        //if no direct course that requirements are solved, check to see if it can satisfy an elective course\n                        if(!found_course){\n                            let duplicate = false;\n                            for(let l = 0; l < finished_courses.length; l++){\n                                //if the grade is already accounted for, don't account for it again\n                                if((grades[i].department + \" \" + grades[i].course_num) == finished_courses[l]){\n                                    duplicate = true;\n                                    break;\n                                }\n                            }\n                            //if not, have it satisfy elective credits\n                            if(!duplicate){\n                                finished_courses.push(grades[i].department + \" \" + grades[i].course_num);\n                                temp_elective_credits = temp_elective_credits - (grades[i].credits);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        let body = {required_courses: required_courses, elective_credits: temp_elective_credits}\n        return body;\n    }\n\n    //gets the remaining courses \n    getRemainingCourses = async () => {\n        let grades = this.state.grades;\n        let required_courses = []\n        let elective_credits = 0\n        let remaining_courses = []\n        if (this.state.major.replace(/ /g,'') == \"AMS\") {\n            if(this.state.track == \"Computational Applied Mathematics\"){\n                required_courses = this.state.degreeData.requirements.tracks.comp.courses\n                elective_credits = this.state.degreeData.requirements.tracks.comp.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n            else if(this.state.track == \"Computational Biology\"){\n                required_courses = this.state.degreeData.requirements.tracks.bio.courses\n                elective_credits = this.state.degreeData.requirements.tracks.bio.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n            else if(this.state.track == \"Operations Research\"){\n                required_courses = this.state.degreeData.requirements.tracks.op.courses\n                elective_credits = this.state.degreeData.requirements.tracks.op.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n            else if(this.state.track == \"Statistics\"){\n                required_courses = this.state.degreeData.requirements.tracks.stats.courses\n                elective_credits = this.state.degreeData.requirements.tracks.stats.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n            else if(this.state.track == \"Quanitative Finance\"){\n                required_courses = this.state.degreeData.requirements.tracks.quan.courses\n                elective_credits = this.state.degreeData.requirements.tracks.quan.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n        } \n        if(this.state.major.replace(/ /g, '') == 'BMI'){\n            if(this.state.track == \"Project/Imaging Informatics\"){\n                required_courses = this.state.degreeData.requirements.tracks.proj_imag.courses\n                elective_credits = this.state.degreeData.requirements.tracks.proj_imag.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n            else if(this.state.track == \"Project/Clinical Informatics\"){\n                required_courses = this.state.degreeData.requirements.tracks.proj_clinical.courses\n                elective_credits = this.state.degreeData.requirements.tracks.proj_clinical.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n            else if(this.state.track == \"Project/Translational Bio-Informatics\"){\n                required_courses = this.state.degreeData.requirements.tracks.proj_trans.courses\n                elective_credits = this.state.degreeData.requirements.tracks.proj_trans.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n            else if(this.state.track == \"Thesis/Clinical Informatics\"){\n                required_courses = this.state.degreeData.requirements.tracks.thesis_clinical.courses\n                elective_credits = this.state.degreeData.requirements.tracks.thesis_clinical.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n            else if(this.state.track == \"Thesis/Translational Bio-Informatics\"){\n                required_courses = this.state.degreeData.requirements.tracks.thesis_trans.courses\n                elective_credits = this.state.degreeData.requirements.tracks.thesis_trans.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n            else if(this.state.track == \"Thesis/Imaging Informatics\"){\n                required_courses = this.state.degreeData.requirements.tracks.thesis_imag.courses\n                elective_credits = this.state.degreeData.requirements.tracks.thesis_imag.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n        }\n        if(this.state.major.replace(/ /g, '') == 'CSE'){\n            if(this.state.track == \"Basic\"){\n                required_courses = this.state.degreeData.requirements.tracks.basic.courses\n                elective_credits = this.state.degreeData.requirements.tracks.basic.elective_creds\n                console.log(elective_credits);\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n                console.log(remaining_courses);\n            }\n            else if(this.state.track == \"Advanced\"){\n                required_courses = this.state.degreeData.requirements.tracks.advanced.courses\n                elective_credits = this.state.degreeData.requirements.tracks.advanced.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n            else if(this.state.track == \"Thesis\"){\n                required_courses = this.state.degreeData.requirements.tracks.thesis.courses\n                elective_credits = this.state.degreeData.requirements.tracks.thesis.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n        }\n        if(this.state.major.replace(/ /g, '') == 'CE'){\n            if(this.state.track == \"Non-Thesis\"){\n                required_courses = this.state.degreeData.requirements.tracks.non_thesis.courses\n                elective_credits = this.state.degreeData.requirements.tracks.non_thesis.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n            else if(this.state.track == \"Thesis\"){\n                required_courses = this.state.degreeData.requirements.tracks.thesis.courses\n                elective_credits = this.state.degreeData.requirements.tracks.thesis.elective_creds\n                remaining_courses = await this.searchCoursesAMS(grades, required_courses, elective_credits);\n            }\n        }\n        return remaining_courses;\n    }\n\n    //gets the total credits from the remaining courses for the student to take\n    getCreditsRemainingCourses = async (remainingCourses) => {\n        \n        let total = 0\n        for(const course of remainingCourses){\n            let values = course.split(\" \")\n            let retval = await axios.get(\"/api/courses/course?name=\" + values[0] + \"&number=\" +values[1])\n            if(retval.data != \"\"){\n                total = total + retval.data.credits\n            }\n        }\n        return total\n    }\n\n    //triggered when \"Suggest Course Plan\" Button is pressed\n    onClickSuggestPlan = async () => {\n        let requirementsBody = await this.getRemainingCourses();\n        let remainingCourses = requirementsBody.required_courses;\n        let remainingElectiveCredits = requirementsBody.elective_credits;\n        let preferredCourses = await this.getPreferredCourses();\n        let avoidedCourses = await this.getAvoidedCourses();\n        let plans = await this.suggestCoursePlan(remainingCourses, remainingElectiveCredits, preferredCourses, avoidedCourses);\n        this.setState({currentCoursePlan: plans});\n        console.log(this.state.currentCoursePlan);\n    }\n\n    //gets the preferred courses from the user input on the website\n    getPreferredCourses = async () => {\n        let courses = []\n        for(const course of this.state.preferredCourses){\n            let values = course.split(\" \")\n            let retval = await axios.get(\"/api/courses/course?name=\" + values[0] + \"&number=\" +values[1])\n            \n            if(retval.data != \"\"){\n                courses.push(retval.data)\n            }\n        }        \n        return courses\n    }\n\n    //gets the avoided courses from the user input on the website\n    getAvoidedCourses = async () => {\n\n        let courses = []\n        for(const course of this.state.avoidedCourses){\n            let values = course.split(\" \")\n            let retval = await axios.get(\"/api/courses/course?name=\" + values[0] + \"&number=\" +values[1])\n\n            if(retval.data != \"\"){\n                courses.push(retval.data)\n            }\n        }\n        console.log(courses);\n        return courses\n\n    }\n\n    //gets all courses from the database\n    getAllCourses = async () => {\n        let courses = await axios.get(\"/api/courses/\").catch((err) => console.log('caught', err));\n        let courseData = courses.data\n        let courseNames = []\n        let courseVals = []\n        for(var course in courseData){\n            courseVals.push(courseData[course]);\n            courseNames.push((courseData[course].department + \" \" + (courseData[course].courseNumber).toString()));\n        }\n        courseNames.sort();\n        this.setState({\n            allCourses: courseNames,\n            allCourseVals: courseVals\n        });\n    }\n\n    convert24to12 = (str) => {\n        let [hours, minutes] = str.split(\":\");\n        let time = \"\"\n        if(hours === \"12\"){\n            hours = \"00\";\n        }\n        else if(hours.length == 1){\n            hours = \"0\" + hours;\n        }\n        if(minutes.substring(2) == \"PM\"){\n            hours = parseInt(hours) + 12;\n            time = hours + \":\" + minutes.substring(0, 2);\n        }\n        else{\n            time = hours + \":\" + minutes.substring(0, 2);\n        }\n        return time;\n\n    }\n\n    suggestCoursePlan = async (remainingCourses, remainingElectiveCredits, preferredCourses, avoidedCourses, totalRemainingCredits) => {\n        let editElectiveCredits = remainingElectiveCredits;\n        let remainingSemesters = this.state.remainingSemesters\n        let loopNextSem = this.state.currentSemester;\n        let coursePlan = []\n        let coursePlanWeight = 0\n        if(totalRemainingCredits > (this.state.maxCredits * remainingSemesters)){\n            return [] //can't be done with constraints provided\n        }\n        while(remainingSemesters > 0){\n            let semCourses = [];\n            let loopSemCredits = this.state.maxCredits;\n            if(loopNextSem.charAt(0) == \"F\"){\n                loopNextSem = \"S\" + loopNextSem.substring(1);\n            }\n            else{\n                let year = parseInt(loopNextSem.substring(1));\n                year = year + 1\n                loopNextSem = \"F\" + year.toString();\n            }\n            console.log(loopNextSem);\n            //start priority course loop\n            for(let i = 0; i < preferredCourses.length; i++){\n                let constraintViolated = false;\n                let electiveCourse = false;\n                //checks to see if any time constraints are violated, if so don't add course to plan\n                let initSplit = preferredCourses[i].days.split(\" \");\n                let daysSplit = initSplit[0].split(\"/\");\n                let timesSplit = initSplit[1].split(\"-\");\n                for(let temp = 0; temp < daysSplit.length; temp++){\n                    if(daysSplit[temp] == \"MW\"){\n                        if((this.convert24to12(timesSplit[0]) < this.state.mondayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.mondayTimeEnd) || (this.convert24to12(timesSplit[0]) < this.state.wednesdayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.wednesdayTimeEnd)){\n                            constraintViolated = true;\n                            break;\n                        }\n                    }\n                    else if(daysSplit[temp] == \"TUTH\"){\n                        if((this.convert24to12(timesSplit[0]) < this.state.tuesdayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.tuesdayTimeEnd) || (this.convert24to12(timesSplit[0]) < this.state.thursdayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.thursdayTimeEnd)){\n                            constraintViolated = true;\n                            break;\n                        }\n                    }\n                    else if(daysSplit[temp] == \"MWF\"){\n                        if((this.convert24to12(timesSplit[0]) < this.state.mondayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.mondayTimeEnd) || (this.convert24to12(timesSplit[0]) < this.state.wednesdayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.wednesdayTimeEnd)  && (this.convert24to12(timesSplit[0]) < this.state.fridayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.fridayTimeEnd)){\n                            constraintViolated = true;\n                            break;\n                        }\n                    }\n                    else if(daysSplit[temp] == \"MF\"){\n                        if((this.convert24to12(timesSplit[0]) < this.state.mondayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.mondayTimeEnd) || (this.convert24to12(timesSplit[0]) < this.state.fridayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.fridayTimeEnd)){\n                            constraintViolated = true;\n                            break;\n                        }\n                    }\n                }\n                //Now checks to see if semester constraint would be violated\n                let courseOfferedSemester = preferredCourses[i].semester\n                console.log(courseOfferedSemester);\n                if(loopNextSem != courseOfferedSemester)\n                {\n                    constraintViolated = true;\n                }\n                if(constraintViolated){\n                    continue;\n                }\n                //Now checks degree requirement constraint\n                let courseStr = preferredCourses[i].department + \" \" + preferredCourses[i].courseNumber;\n                let department = preferredCourses[i].department\n                let degreeReqFound = false;\n                for(let remainLoop = 0; remainLoop < remainingCourses.length; remainLoop++){\n                    let remainingCoursesSplit = remainingCourses[remainLoop].split(\"/\");\n                    for(let splitLoop = 0; splitLoop < remainingCoursesSplit.length; splitLoop++){\n                        console.log(remainingCoursesSplit[splitLoop]);\n                        if(courseStr == remainingCoursesSplit[splitLoop]){\n                            degreeReqFound = true;\n                        }\n                    }\n                }\n                if(!degreeReqFound){\n                    if(preferredCourses[i].credits > editElectiveCredits){\n                        continue;\n                    }\n                    else{\n                        electiveCourse = true;\n                    }\n                }\n                //finally pushes it to the semester plan\n                if(preferredCourses[i].credits <= loopSemCredits){\n                    semCourses.push(preferredCourses[i]);\n                    for(let j = 0; j < remainingCourses.length; j++){\n                        let remainingCoursesSplit = remainingCourses[j].split(\"/\");\n                        for(let splitLoop = 0; splitLoop < remainingCoursesSplit.length; splitLoop++){\n                            console.log(remainingCoursesSplit[splitLoop]);\n                            if(courseStr == remainingCoursesSplit[splitLoop] ){\n                                remainingCourses.splice(j, 1);\n                            }\n                        }\n                    }\n                    coursePlanWeight += 12;\n                    if(electiveCourse){\n                        editElectiveCredits = editElectiveCredits - preferredCourses[i].credits;\n                        loopSemCredits = loopSemCredits - preferredCourses[i].credits;\n                    }\n                    else{\n                        loopSemCredits -= preferredCourses[i].credits;\n                    }\n                }\n                if(loopSemCredits == 0){\n                    break;\n                }\n            }\n            //end of preferred course loop, check to see if the credit limit was reached for the semester\n            if(loopSemCredits == 0){\n                coursePlan.push(semCourses);\n                remainingSemesters = remainingSemesters - 1;\n            }\n            else{\n                await this.getAllCourses();\n                let nonPreferredCourses = this.state.allCourseVals;\n                console.log(nonPreferredCourses)\n                for(let i = 0; i < nonPreferredCourses.length; i++){\n                    let constraintViolated = false;\n                    let electiveCourse = false;\n                    let requiredCourseFlag = false;\n                    for(let j = 0; j < remainingCourses.length; j++){\n                        let tempStrArr = remainingCourses[j].split(\"/\");\n                        for(let k = 0; k < tempStrArr.length; k++){\n                            if(nonPreferredCourses[i].department + \" \" + nonPreferredCourses[i].courseNumber == tempStrArr[k]){\n                                requiredCourseFlag = true;\n                            }\n                        }\n                    }\n                    if(nonPreferredCourses[i].department == this.state.major){\n                        requiredCourseFlag = true;\n                    }\n                    console.log(requiredCourseFlag);\n                    if(!requiredCourseFlag){\n                        continue;\n                    }\n                    for(let j = 0; j < avoidedCourses.length; j++){\n                        console.log(avoidedCourses[j]);\n                        if(nonPreferredCourses[i].department + \" \" + nonPreferredCourses[i].courseNumber == avoidedCourses[j].department + \" \" + avoidedCourses[j].courseNumber){\n                            constraintViolated = true;\n                        }\n                    }\n                    if(constraintViolated){\n                        continue;\n                    }\n                //checks to see if any time constraints are violated, if so don't add course to plan\n                let initSplit = nonPreferredCourses[i].days.split(\" \");\n                let daysSplit = initSplit[0].split(\"/\");\n                let timesSplit = initSplit[1].split(\"-\");\n                for(let temp = 0; temp < daysSplit.length; temp++){\n                    if(daysSplit[temp] == \"MW\"){\n                        if((this.convert24to12(timesSplit[0]) < this.state.mondayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.mondayTimeEnd) || (this.convert24to12(timesSplit[0]) < this.state.wednesdayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.wednesdayTimeEnd)){\n                            constraintViolated = true;\n                        }\n                    }\n                    else if(daysSplit[temp] == \"TUTH\"){\n                        if((this.convert24to12(timesSplit[0]) < this.state.tuesdayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.tuesdayTimeEnd) || (this.convert24to12(timesSplit[0]) < this.state.thursdayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.thursdayTimeEnd)){\n                            constraintViolated = true;\n                        }\n                    }\n                    else if(daysSplit[temp] == \"MWF\"){\n                        if((this.convert24to12(timesSplit[0]) < this.state.mondayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.mondayTimeEnd) || (this.convert24to12(timesSplit[0]) < this.state.wednesdayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.wednesdayTimeEnd)  && (this.convert24to12(timesSplit[0]) < this.state.fridayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.fridayTimeEnd)){\n                            constraintViolated = true;\n                        }\n                    }\n                    else if(daysSplit[temp] == \"MF\"){\n                        if((this.convert24to12(timesSplit[0]) < this.state.mondayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.mondayTimeEnd) || (this.convert24to12(timesSplit[0]) < this.state.fridayTimeBegin || this.convert24to12(timesSplit[1]) > this.state.fridayTimeEnd)){\n                            constraintViolated = true;\n                        }\n                    }\n                }\n                //Now checks to see if semester constraint would be violated\n                let courseOfferedSemester = nonPreferredCourses[i].semester\n                console.log(courseOfferedSemester);\n                if(loopNextSem != courseOfferedSemester)\n                {\n                    constraintViolated = true;\n                }\n                if(constraintViolated){\n                    continue;\n                }\n                //Now checks degree requirement constraint\n                let courseStr = nonPreferredCourses[i].department + \" \" + nonPreferredCourses[i].courseNumber;\n                let degreeReqFound = false;\n                for(let remainLoop = 0; remainLoop < remainingCourses.length; remainLoop++){\n                    let remainingCoursesSplit = remainingCourses[remainLoop].split(\"/\");\n                    for(let splitLoop = 0; splitLoop < remainingCoursesSplit.length; splitLoop++){\n                        console.log(remainingCoursesSplit[splitLoop]);\n                        if(courseStr == remainingCoursesSplit[splitLoop]){\n                            degreeReqFound = true;\n                            break;\n                        }\n                    }\n                }\n                if(!degreeReqFound){\n                    if(nonPreferredCourses[i].credits > editElectiveCredits){\n                        continue;\n                    }\n                    else{\n                        electiveCourse = true;\n                    }\n                }\n                //finally pushes it to the semester plan\n                if(nonPreferredCourses[i].credits <= loopSemCredits){\n                    semCourses.push(nonPreferredCourses[i]);\n                    coursePlanWeight += 10;\n                    if(electiveCourse){\n                        editElectiveCredits = editElectiveCredits - nonPreferredCourses[i].credits;\n                        loopSemCredits = loopSemCredits - nonPreferredCourses[i].credits;\n                    }\n                    else{\n                        loopSemCredits -= nonPreferredCourses[i].credits;\n                    }\n                }\n                if(loopSemCredits == 0){\n                    break;\n                }\n                }\n                coursePlan.push(semCourses);\n                remainingSemesters = remainingSemesters - 1;\n            }\n        }\n        return coursePlan;\n    }\n\n    onChange = (event) => {\n        this.setState({[event.target.id]: event.target.value});\n    }\n\n    componentDidMount = async() => {\n        this.getDegreeRequirements();\n        this.getAllCourses();\n        this.getGrades();\n    }\n\n    goHome = () => {\n        this.setState({goHomeFlag: true});\n    }\n\n    render(){\n        return(\n            this.state.goHomeFlag ? <Redirect to={{pathname: \"student_info_stu\", state: {email: this.state.email}}}></Redirect> :\n            <div>\n            <NavbarStudent />\n            <br></br>\n            <Row>\n                <Col l={2}>\n                    <Card className=\"grey lighten-3\">\n                        <Row>\n                            <Col l={12}>\n                                <Button>Smart Suggestion</Button>\n                            </Col>\n                        </Row>\n                        <Row>\n                        <Col l={12}>\n                                    <Button onClick={this.goHome}>Return Home</Button>\n                        </Col>\n                        </Row>\n                        <Row>\n                            <Col l={12}>\n                                <b><u>Student Suggestions</u></b>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col l={12}>\n                                <b><u>Max Credits:</u></b>\n                                <input type=\"number\" id=\"maxCredits\" name=\"credits\" step=\"1\" min=\"0\" max=\"24\" onChange={this.onChange}></input>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col l={12}>\n                                <b><u>Max Semesters:</u></b>\n                                <input type=\"number\" id=\"remainingSemesters\" name=\"credits\" step=\"1\" min=\"0\" max=\"4\" onChange={this.onChange}></input>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col l={12}>\n                                <b><u>Course(s) to Avoid</u></b>\n                                <Table>\n                                    <thead>\n                                        <tr>\n                                            <th data-field=\"Name\">Course Name:</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {this.state.allCourses.map((course) => (\n                                            <tr>\n                                                <td><Checkbox id={course + \"prefer\"} value={course} \n                                                onChange={(e) => {this.state.avoidedCourses.includes(e.target.value) ? this.setState({avoidedCourses: this.state.avoidedCourses.filter((obj) => obj !== e.target.value)}) : this.setState({avoidedCourses: [...this.state.avoidedCourses, e.target.value]})}}  \n                                                label={<span style={{color: \"black\"}}>{course}</span>}></Checkbox></td>\n                                            </tr>\n                                        ))}\n                                    </tbody>\n                                </Table>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col l={12}>\n                                <b><u>Preferred Course(s)</u></b>\n                                <Table>\n                                    <thead>\n                                        <tr>\n                                            <th data-field=\"Name\">Course Name:</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {this.state.allCourses.map((course) => (\n                                            <tr>\n                                                <td><Checkbox id={course + \"avoid\"} value={course} onChange={(e) => {this.state.preferredCourses.includes(e.target.value) ? this.setState({preferredCourses: this.state.preferredCourses.filter((obj) => obj !== e.target.value)}) : this.setState({preferredCourses: [...this.state.preferredCourses, e.target.value]})}} label={<span style={{color: \"black\"}}>{course}</span>}></Checkbox></td>\n                                            </tr>\n                                        ))}\n                                    </tbody>\n                                </Table>\n                            </Col>\n                        </Row>\n                    </Card>\n                </Col>\n                <Col l={8} offset=\"l1\">\n                    <Row>\n                    <Card className=\"grey lighten-3\">\n                        <Row>\n                            <Col l={4}>\n                                <Select\n                                    placeholder=\"Select Semester\"\n                                />\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col l={12}>\n                                <Table centered>\n                                    <thead>\n                                        <tr>\n                                            <th data-field=\"Name\">Course</th>\n                                            <th data-field=\"Credit\">Credit(s)</th>\n                                            <th data-field=\"Days\">Days</th>\n                                            <th data-field=\"Semester\">Semester</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {this.state.currentCoursePlan.map((semester) => {\n                                            let tempArr = semester;\n                                            console.log(semester);\n                                            return (semester.map((course) => {\n                                                console.log(course);\n                                                return(<tr>\n                                                    <td>{course.department + \" \" + course.courseNumber}</td>\n                                                    <td>{course.credits}</td>\n                                                    <td>{course.days}</td>\n                                                    <td>{course.semester}</td>\n                                                </tr>);\n                                            }));\n                                        })}\n                                    </tbody>\n                                </Table>\n                            </Col>\n                        </Row>\n                    </Card>\n                    </Row>\n                    <Row>\n                        <Card className=\"grey lighten-3\">\n                            <b><u>Preferred Timeslots for Courses:</u></b>\n                            <Row></Row>\n                            <Row>\n                                <Col l={3}>\n                                    <b><u>Monday</u></b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"mondayTimeBegin\" onChange={this.onChange}></input>\n                                </Col>\n                                <Col l={3}>\n                                    <b>to</b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"mondayTimeEnd\" onChange={this.onChange}></input>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col l={3}>\n                                    <b><u>Tuesday</u></b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"tuesdayTimeBegin\" onChange={this.onChange}></input>\n                                </Col>\n                                <Col l={3}>\n                                    <b>to</b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"tuesdayTimeEnd\" onChange={this.onChange}></input>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col l={3}>\n                                    <b><u>Wednesday</u></b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"wednesdayTimeBegin\" onChange={this.onChange}></input>\n                                </Col>\n                                <Col l={3}>\n                                    <b>to</b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"wednesdayTimeEnd\" onChange={this.onChange}></input>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col l={3}>\n                                    <b><u>Thursday</u></b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"thursdayTimeBegin\" onChange={this.onChange}></input>\n                                </Col>\n                                <Col l={3}>\n                                    <b>to</b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"thursdayTimeEnd\" onChange={this.onChange}></input>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col l={3}>\n                                    <b><u>Friday</u></b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"fridayTimeBegin\" onChange={this.onChange}></input>\n                                </Col>\n                                <Col l={3}>\n                                    <b>to</b>\n                                </Col>\n                                <Col l={3}>\n                                    <input type=\"time\" id=\"fridayTimeEnd\" onChange={this.onChange}></input>\n                                </Col>\n                            </Row>\n                            <Button onClick={this.onClickSuggestPlan}>Suggest Course Plan</Button>\n                        </Card>\n                    </Row>\n                </Col>\n            </Row>\n            </div>\n        );\n    }\n}\n\nexport default CoursePlanScreen;","\nimport './App.css';\nimport React, { Component} from 'react'\nimport {Switch, Route, BrowserRouter} from 'react-router-dom'\nimport ManageStudentsGPD from './GPDScreens/ManageStudentsGPD';\nimport EditStudentGPD from './GPDScreens/EditStudentGPD';\nimport LoginScreen from './LoginScreens/LoginScreen';\nimport EnrollmentTrendsGPD from './GPDScreens/EnrollmentTrendsGPD';\nimport StudentInfo from './StudentScreens/StudentInfo';\nimport axios from 'axios'\nimport UploadFileGPD from './GPDScreens/UploadFileGPD';\nimport SuggestCoursePlanGPD from './GPDScreens/SuggestCoursePlanGPD';\nimport CoursePlanScreen from './StudentScreens/CoursePlanScreen';\n\nclass App extends Component{\n  state = {\n    data: null\n  };\n\n  componentDidMount = () => {\n    this.callBackendAPI();\n  }\n\n  callBackendAPI = async () => {\n    const response = await axios.get(\"/api/users\").catch((err) => console.log('caught', err));\n    this.setState({data: response.data});\n    console.log(this.state.data)\n\n    return response;\n  }\n\n\n  render(){\n  return this.state.data ? (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={LoginScreen}>\n          </Route>\n          <Route exact path=\"/manage_students_gpd\" component={ManageStudentsGPD}>\n          </Route>\n          <Route exact path=\"/edit_student_gpd\" component={EditStudentGPD}>\n          </Route>  \n          <Route exact path=\"/upload_file_gpd\" component={UploadFileGPD}>\n          </Route>\n          <Route exact path=\"/student_info_stu\" component ={StudentInfo}>\n          </Route>\n          <Route exact path=\"/enrollment_trends_gpd\" component={EnrollmentTrendsGPD}>\n          </Route>\n          <Route exact path = \"/suggest_course_plan_gpd\" component={SuggestCoursePlanGPD}>\n          </Route>\n          <Route exact path = \"/suggest_course_plan_stu\" component={CoursePlanScreen}>\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  ) : (<div>Loading...</div>);\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'materialize-css/dist/css/materialize.min.css'\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}